
Ws2812.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001920  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001a2c  08001a2c  00011a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a50  08001a50  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001a50  08001a50  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a50  08001a50  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a50  08001a50  00011a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a54  08001a54  00011a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001a58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  2000000c  08001a64  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08001a64  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010edc  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ad2  00000000  00000000  00030f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000094f0  00000000  00000000  00033a26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ad0  00000000  00000000  0003cf18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ff1  00000000  00000000  0003d9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00017a46  00000000  00000000  0003e9d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016145  00000000  00000000  0005641f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008b176  00000000  00000000  0006c564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002628  00000000  00000000  000f76dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  000f9d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001a14 	.word	0x08001a14

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001a14 	.word	0x08001a14

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000152:	4a0d      	ldr	r2, [pc, #52]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000154:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000156:	7811      	ldrb	r1, [r2, #0]
 8000158:	4a0c      	ldr	r2, [pc, #48]	; (800018c <HAL_InitTick+0x40>)
 800015a:	fbb3 f3f1 	udiv	r3, r3, r1
 800015e:	6812      	ldr	r2, [r2, #0]
 8000160:	fbb2 f0f3 	udiv	r0, r2, r3
 8000164:	f000 fa74 	bl	8000650 <HAL_SYSTICK_Config>
 8000168:	b908      	cbnz	r0, 800016e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016a:	2d0f      	cmp	r5, #15
 800016c:	d901      	bls.n	8000172 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800016e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000170:	bd38      	pop	{r3, r4, r5, pc}
 8000172:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000174:	4602      	mov	r2, r0
 8000176:	4629      	mov	r1, r5
 8000178:	f04f 30ff 	mov.w	r0, #4294967295
 800017c:	f000 fa1c 	bl	80005b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <HAL_InitTick+0x44>)
 8000182:	4620      	mov	r0, r4
 8000184:	601d      	str	r5, [r3, #0]
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f9f7 	bl	8000594 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	200f      	movs	r0, #15
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f001 fae6 	bl	800177c <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
}
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000028 	.word	0x20000028
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000028 	.word	0x20000028

080001dc <HAL_ADC_Init>:
  uint32_t tmp_cr1 = 0U;
  uint32_t tmp_cr2 = 0U;
  uint32_t tmp_sqr1 = 0U;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80001dc:	2800      	cmp	r0, #0
 80001de:	f000 808b 	beq.w	80002f8 <HAL_ADC_Init+0x11c>
{
 80001e2:	b538      	push	{r3, r4, r5, lr}
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80001e4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80001e6:	4604      	mov	r4, r0
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d06d      	beq.n	80002c8 <HAL_ADC_Init+0xec>
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80001ec:	6823      	ldr	r3, [r4, #0]
 80001ee:	689a      	ldr	r2, [r3, #8]
 80001f0:	07d1      	lsls	r1, r2, #31
 80001f2:	d442      	bmi.n	800027a <HAL_ADC_Init+0x9e>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80001f4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80001f6:	06d2      	lsls	r2, r2, #27
 80001f8:	d460      	bmi.n	80002bc <HAL_ADC_Init+0xe0>
    ADC_STATE_CLR_SET(hadc->State,
 80001fa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80001fc:	6861      	ldr	r1, [r4, #4]
 80001fe:	69e0      	ldr	r0, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000200:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000204:	7b25      	ldrb	r5, [r4, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8000206:	f022 0202 	bic.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800020a:	4301      	orrs	r1, r0
    ADC_STATE_CLR_SET(hadc->State,
 800020c:	f042 0202 	orr.w	r2, r2, #2
 8000210:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000212:	ea41 0245 	orr.w	r2, r1, r5, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000216:	68a1      	ldr	r1, [r4, #8]
 8000218:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800021c:	d05a      	beq.n	80002d4 <HAL_ADC_Init+0xf8>
 800021e:	f1a1 0001 	sub.w	r0, r1, #1
 8000222:	fab0 f080 	clz	r0, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000226:	f894 c014 	ldrb.w	ip, [r4, #20]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800022a:	0940      	lsrs	r0, r0, #5
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800022c:	f1bc 0f01 	cmp.w	ip, #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000230:	ea4f 2000 	mov.w	r0, r0, lsl #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000234:	d06c      	beq.n	8000310 <HAL_ADC_Init+0x134>
      MODIFY_REG(hadc->Instance->CR1,
 8000236:	685d      	ldr	r5, [r3, #4]
 8000238:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 800023c:	4328      	orrs	r0, r5
 800023e:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000240:	689d      	ldr	r5, [r3, #8]
 8000242:	4844      	ldr	r0, [pc, #272]	; (8000354 <HAL_ADC_Init+0x178>)
 8000244:	4028      	ands	r0, r5
 8000246:	4310      	orrs	r0, r2
 8000248:	6098      	str	r0, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800024a:	2901      	cmp	r1, #1
 800024c:	d050      	beq.n	80002f0 <HAL_ADC_Init+0x114>
  uint32_t tmp_sqr1 = 0U;
 800024e:	2000      	movs	r0, #0
    MODIFY_REG(hadc->Instance->SQR1,
 8000250:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000252:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 8000256:	4301      	orrs	r1, r0
 8000258:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800025a:	6899      	ldr	r1, [r3, #8]
 800025c:	4b3e      	ldr	r3, [pc, #248]	; (8000358 <HAL_ADC_Init+0x17c>)
 800025e:	400b      	ands	r3, r1
 8000260:	429a      	cmp	r2, r3
 8000262:	d04b      	beq.n	80002fc <HAL_ADC_Init+0x120>
      tmp_hal_status = HAL_ERROR;
 8000264:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8000266:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000268:	f023 0312 	bic.w	r3, r3, #18
 800026c:	f043 0310 	orr.w	r3, r3, #16
 8000270:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000272:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000274:	4303      	orrs	r3, r0
 8000276:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8000278:	bd38      	pop	{r3, r4, r5, pc}
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800027a:	689a      	ldr	r2, [r3, #8]
 800027c:	f022 0201 	bic.w	r2, r2, #1
 8000280:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000282:	f7ff ffa5 	bl	80001d0 <HAL_GetTick>
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000286:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8000288:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800028a:	689a      	ldr	r2, [r3, #8]
 800028c:	07d2      	lsls	r2, r2, #31
 800028e:	d5b1      	bpl.n	80001f4 <HAL_ADC_Init+0x18>
 8000290:	e002      	b.n	8000298 <HAL_ADC_Init+0xbc>
 8000292:	689a      	ldr	r2, [r3, #8]
 8000294:	07d1      	lsls	r1, r2, #31
 8000296:	d5ad      	bpl.n	80001f4 <HAL_ADC_Init+0x18>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000298:	f7ff ff9a 	bl	80001d0 <HAL_GetTick>
 800029c:	1b40      	subs	r0, r0, r5
 800029e:	2802      	cmp	r0, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80002a0:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80002a2:	d9f6      	bls.n	8000292 <HAL_ADC_Init+0xb6>
        if(ADC_IS_ENABLE(hadc) != RESET)
 80002a4:	689a      	ldr	r2, [r3, #8]
 80002a6:	07d0      	lsls	r0, r2, #31
 80002a8:	d5f3      	bpl.n	8000292 <HAL_ADC_Init+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80002ac:	f043 0310 	orr.w	r3, r3, #16
 80002b0:	62a3      	str	r3, [r4, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80002b4:	f043 0301 	orr.w	r3, r3, #1
 80002b8:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80002ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 80002be:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002c0:	f043 0310 	orr.w	r3, r3, #16
 80002c4:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80002c6:	bd38      	pop	{r3, r4, r5, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 80002c8:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80002ca:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80002ce:	f001 fa77 	bl	80017c0 <HAL_ADC_MspInit>
 80002d2:	e78b      	b.n	80001ec <HAL_ADC_Init+0x10>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80002d4:	7d20      	ldrb	r0, [r4, #20]
 80002d6:	2801      	cmp	r0, #1
 80002d8:	d019      	beq.n	800030e <HAL_ADC_Init+0x132>
      MODIFY_REG(hadc->Instance->CR1,
 80002da:	6858      	ldr	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80002dc:	491d      	ldr	r1, [pc, #116]	; (8000354 <HAL_ADC_Init+0x178>)
      MODIFY_REG(hadc->Instance->CR1,
 80002de:	f420 4069 	bic.w	r0, r0, #59648	; 0xe900
 80002e2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80002e6:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80002e8:	6898      	ldr	r0, [r3, #8]
 80002ea:	4001      	ands	r1, r0
 80002ec:	4311      	orrs	r1, r2
 80002ee:	6099      	str	r1, [r3, #8]
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80002f0:	6920      	ldr	r0, [r4, #16]
 80002f2:	3801      	subs	r0, #1
 80002f4:	0500      	lsls	r0, r0, #20
 80002f6:	e7ab      	b.n	8000250 <HAL_ADC_Init+0x74>
    return HAL_ERROR;
 80002f8:	2001      	movs	r0, #1
}
 80002fa:	4770      	bx	lr
      ADC_CLEAR_ERRORCODE(hadc);
 80002fc:	2000      	movs	r0, #0
 80002fe:	62e0      	str	r0, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000300:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000302:	f023 0303 	bic.w	r3, r3, #3
 8000306:	f043 0301 	orr.w	r3, r3, #1
 800030a:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800030c:	bd38      	pop	{r3, r4, r5, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800030e:	4608      	mov	r0, r1
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000310:	b1c5      	cbz	r5, 8000344 <HAL_ADC_Init+0x168>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000312:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8000314:	f045 0520 	orr.w	r5, r5, #32
 8000318:	62a5      	str	r5, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800031a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800031c:	f045 0501 	orr.w	r5, r5, #1
 8000320:	62e5      	str	r5, [r4, #44]	; 0x2c
      MODIFY_REG(hadc->Instance->CR1,
 8000322:	685d      	ldr	r5, [r3, #4]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000324:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8000328:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 800032c:	ea40 0005 	orr.w	r0, r0, r5
 8000330:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000332:	689d      	ldr	r5, [r3, #8]
 8000334:	4807      	ldr	r0, [pc, #28]	; (8000354 <HAL_ADC_Init+0x178>)
 8000336:	ea00 0005 	and.w	r0, r0, r5
 800033a:	ea40 0002 	orr.w	r0, r0, r2
 800033e:	6098      	str	r0, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000340:	d183      	bne.n	800024a <HAL_ADC_Init+0x6e>
 8000342:	e7d5      	b.n	80002f0 <HAL_ADC_Init+0x114>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000344:	69a5      	ldr	r5, [r4, #24]
 8000346:	3d01      	subs	r5, #1
 8000348:	ea40 3045 	orr.w	r0, r0, r5, lsl #13
 800034c:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8000350:	e7e7      	b.n	8000322 <HAL_ADC_Init+0x146>
 8000352:	bf00      	nop
 8000354:	ffe1f7fd 	.word	0xffe1f7fd
 8000358:	ff1f0efe 	.word	0xff1f0efe

0800035c <HAL_ADC_ConvCpltCallback>:
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop

08000360 <HAL_ADC_LevelOutOfWindowCallback>:
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop

08000364 <HAL_ADC_IRQHandler>:
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000364:	6803      	ldr	r3, [r0, #0]
{
 8000366:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000368:	685a      	ldr	r2, [r3, #4]
{
 800036a:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800036c:	0690      	lsls	r0, r2, #26
 800036e:	d502      	bpl.n	8000376 <HAL_ADC_IRQHandler+0x12>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000370:	681a      	ldr	r2, [r3, #0]
 8000372:	0791      	lsls	r1, r2, #30
 8000374:	d42a      	bmi.n	80003cc <HAL_ADC_IRQHandler+0x68>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000376:	685a      	ldr	r2, [r3, #4]
 8000378:	0610      	lsls	r0, r2, #24
 800037a:	d502      	bpl.n	8000382 <HAL_ADC_IRQHandler+0x1e>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800037c:	681a      	ldr	r2, [r3, #0]
 800037e:	0751      	lsls	r1, r2, #29
 8000380:	d406      	bmi.n	8000390 <HAL_ADC_IRQHandler+0x2c>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000382:	685a      	ldr	r2, [r3, #4]
 8000384:	0652      	lsls	r2, r2, #25
 8000386:	d502      	bpl.n	800038e <HAL_ADC_IRQHandler+0x2a>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	07db      	lsls	r3, r3, #31
 800038c:	d433      	bmi.n	80003f6 <HAL_ADC_IRQHandler+0x92>
}
 800038e:	bd10      	pop	{r4, pc}
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000390:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000392:	06d2      	lsls	r2, r2, #27
 8000394:	d403      	bmi.n	800039e <HAL_ADC_IRQHandler+0x3a>
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000396:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000398:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800039c:	62a2      	str	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800039e:	689a      	ldr	r2, [r3, #8]
 80003a0:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 80003a4:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 80003a8:	d034      	beq.n	8000414 <HAL_ADC_IRQHandler+0xb0>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80003aa:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80003ac:	0550      	lsls	r0, r2, #21
 80003ae:	d405      	bmi.n	80003bc <HAL_ADC_IRQHandler+0x58>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80003b0:	689a      	ldr	r2, [r3, #8]
 80003b2:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80003b6:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80003ba:	d028      	beq.n	800040e <HAL_ADC_IRQHandler+0xaa>
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80003bc:	4620      	mov	r0, r4
 80003be:	f000 f8e7 	bl	8000590 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80003c2:	f06f 020c 	mvn.w	r2, #12
 80003c6:	6823      	ldr	r3, [r4, #0]
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	e7da      	b.n	8000382 <HAL_ADC_IRQHandler+0x1e>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80003cc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80003ce:	06d2      	lsls	r2, r2, #27
 80003d0:	d403      	bmi.n	80003da <HAL_ADC_IRQHandler+0x76>
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80003d2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80003d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80003d8:	62a2      	str	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80003da:	689a      	ldr	r2, [r3, #8]
 80003dc:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80003e0:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80003e4:	d026      	beq.n	8000434 <HAL_ADC_IRQHandler+0xd0>
      HAL_ADC_ConvCpltCallback(hadc);
 80003e6:	4620      	mov	r0, r4
 80003e8:	f7ff ffb8 	bl	800035c <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80003ec:	f06f 0212 	mvn.w	r2, #18
 80003f0:	6823      	ldr	r3, [r4, #0]
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	e7bf      	b.n	8000376 <HAL_ADC_IRQHandler+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80003f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80003f8:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80003fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003fe:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000400:	f7ff ffae 	bl	8000360 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000404:	f06f 0201 	mvn.w	r2, #1
 8000408:	6823      	ldr	r3, [r4, #0]
 800040a:	601a      	str	r2, [r3, #0]
}
 800040c:	bd10      	pop	{r4, pc}
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800040e:	7b22      	ldrb	r2, [r4, #12]
 8000410:	2a00      	cmp	r2, #0
 8000412:	d1d3      	bne.n	80003bc <HAL_ADC_IRQHandler+0x58>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000414:	685a      	ldr	r2, [r3, #4]
 8000416:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800041a:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800041c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800041e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000422:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000424:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000426:	05d9      	lsls	r1, r3, #23
 8000428:	d4c8      	bmi.n	80003bc <HAL_ADC_IRQHandler+0x58>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800042a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800042c:	f043 0301 	orr.w	r3, r3, #1
 8000430:	62a3      	str	r3, [r4, #40]	; 0x28
 8000432:	e7c3      	b.n	80003bc <HAL_ADC_IRQHandler+0x58>
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000434:	7b22      	ldrb	r2, [r4, #12]
 8000436:	2a00      	cmp	r2, #0
 8000438:	d1d5      	bne.n	80003e6 <HAL_ADC_IRQHandler+0x82>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800043a:	685a      	ldr	r2, [r3, #4]
 800043c:	f022 0220 	bic.w	r2, r2, #32
 8000440:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000442:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000448:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800044a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800044c:	04db      	lsls	r3, r3, #19
 800044e:	d4ca      	bmi.n	80003e6 <HAL_ADC_IRQHandler+0x82>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000450:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000452:	f043 0301 	orr.w	r3, r3, #1
 8000456:	62a3      	str	r3, [r4, #40]	; 0x28
 8000458:	e7c5      	b.n	80003e6 <HAL_ADC_IRQHandler+0x82>
 800045a:	bf00      	nop

0800045c <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 800045c:	2300      	movs	r3, #0
{ 
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8000462:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000464:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000468:	2b01      	cmp	r3, #1
 800046a:	d074      	beq.n	8000556 <HAL_ADC_ConfigChannel+0xfa>
 800046c:	2301      	movs	r3, #1
 800046e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000472:	684b      	ldr	r3, [r1, #4]
 8000474:	4602      	mov	r2, r0
 8000476:	2b06      	cmp	r3, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000478:	6804      	ldr	r4, [r0, #0]
  if (sConfig->Rank < 7U)
 800047a:	d932      	bls.n	80004e2 <HAL_ADC_ConfigChannel+0x86>
  else if (sConfig->Rank < 13U)
 800047c:	2b0c      	cmp	r3, #12
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800047e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 13U)
 8000482:	d84e      	bhi.n	8000522 <HAL_ADC_ConfigChannel+0xc6>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000484:	f04f 0c1f 	mov.w	ip, #31
 8000488:	6808      	ldr	r0, [r1, #0]
 800048a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800048c:	3b23      	subs	r3, #35	; 0x23
 800048e:	fa00 fe03 	lsl.w	lr, r0, r3
 8000492:	fa0c f303 	lsl.w	r3, ip, r3
 8000496:	ea25 0303 	bic.w	r3, r5, r3
 800049a:	ea43 030e 	orr.w	r3, r3, lr
 800049e:	6323      	str	r3, [r4, #48]	; 0x30
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80004a0:	2809      	cmp	r0, #9
 80004a2:	d930      	bls.n	8000506 <HAL_ADC_ConfigChannel+0xaa>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80004a4:	f04f 0c07 	mov.w	ip, #7
 80004a8:	688d      	ldr	r5, [r1, #8]
 80004aa:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 80004ae:	68e3      	ldr	r3, [r4, #12]
 80004b0:	391e      	subs	r1, #30
 80004b2:	408d      	lsls	r5, r1
 80004b4:	fa0c f101 	lsl.w	r1, ip, r1
 80004b8:	ea23 0301 	bic.w	r3, r3, r1
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80004bc:	f1a0 0110 	sub.w	r1, r0, #16
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80004c0:	432b      	orrs	r3, r5
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80004c2:	2901      	cmp	r1, #1
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80004c4:	60e3      	str	r3, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80004c6:	d844      	bhi.n	8000552 <HAL_ADC_ConfigChannel+0xf6>
    if (hadc->Instance == ADC1)
 80004c8:	4b2e      	ldr	r3, [pc, #184]	; (8000584 <HAL_ADC_ConfigChannel+0x128>)
 80004ca:	429c      	cmp	r4, r3
 80004cc:	d038      	beq.n	8000540 <HAL_ADC_ConfigChannel+0xe4>
      tmp_hal_status = HAL_ERROR;
 80004ce:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80004d0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80004d2:	f043 0320 	orr.w	r3, r3, #32
 80004d6:	6293      	str	r3, [r2, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 80004d8:	2300      	movs	r3, #0
 80004da:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
}
 80004de:	b003      	add	sp, #12
 80004e0:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80004e2:	f04f 0c1f 	mov.w	ip, #31
 80004e6:	6808      	ldr	r0, [r1, #0]
 80004e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80004ec:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80004ee:	3b05      	subs	r3, #5
 80004f0:	fa00 fe03 	lsl.w	lr, r0, r3
 80004f4:	fa0c f303 	lsl.w	r3, ip, r3
 80004f8:	ea25 0303 	bic.w	r3, r5, r3
 80004fc:	ea43 030e 	orr.w	r3, r3, lr
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000500:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000502:	6363      	str	r3, [r4, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000504:	d8ce      	bhi.n	80004a4 <HAL_ADC_ConfigChannel+0x48>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000506:	2507      	movs	r5, #7
 8000508:	6889      	ldr	r1, [r1, #8]
 800050a:	6923      	ldr	r3, [r4, #16]
 800050c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000510:	4081      	lsls	r1, r0
 8000512:	fa05 f000 	lsl.w	r0, r5, r0
 8000516:	ea23 0300 	bic.w	r3, r3, r0
 800051a:	430b      	orrs	r3, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800051c:	2000      	movs	r0, #0
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800051e:	6123      	str	r3, [r4, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000520:	e7da      	b.n	80004d8 <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000522:	f04f 0c1f 	mov.w	ip, #31
 8000526:	6808      	ldr	r0, [r1, #0]
 8000528:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800052a:	3b41      	subs	r3, #65	; 0x41
 800052c:	fa00 fe03 	lsl.w	lr, r0, r3
 8000530:	fa0c f303 	lsl.w	r3, ip, r3
 8000534:	ea25 0303 	bic.w	r3, r5, r3
 8000538:	ea43 030e 	orr.w	r3, r3, lr
 800053c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800053e:	e7af      	b.n	80004a0 <HAL_ADC_ConfigChannel+0x44>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000540:	68a3      	ldr	r3, [r4, #8]
 8000542:	021b      	lsls	r3, r3, #8
 8000544:	d405      	bmi.n	8000552 <HAL_ADC_ConfigChannel+0xf6>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000546:	68a3      	ldr	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000548:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800054a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800054e:	60a3      	str	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000550:	d004      	beq.n	800055c <HAL_ADC_ConfigChannel+0x100>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000552:	2000      	movs	r0, #0
 8000554:	e7c0      	b.n	80004d8 <HAL_ADC_ConfigChannel+0x7c>
  __HAL_LOCK(hadc);
 8000556:	2002      	movs	r0, #2
}
 8000558:	b003      	add	sp, #12
 800055a:	bd30      	pop	{r4, r5, pc}
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800055c:	4b0a      	ldr	r3, [pc, #40]	; (8000588 <HAL_ADC_ConfigChannel+0x12c>)
 800055e:	490b      	ldr	r1, [pc, #44]	; (800058c <HAL_ADC_ConfigChannel+0x130>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	fba1 1303 	umull	r1, r3, r1, r3
 8000566:	0c9b      	lsrs	r3, r3, #18
 8000568:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000570:	9b01      	ldr	r3, [sp, #4]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d0ed      	beq.n	8000552 <HAL_ADC_ConfigChannel+0xf6>
            wait_loop_index--;
 8000576:	9b01      	ldr	r3, [sp, #4]
 8000578:	3b01      	subs	r3, #1
 800057a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800057c:	9b01      	ldr	r3, [sp, #4]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d1f9      	bne.n	8000576 <HAL_ADC_ConfigChannel+0x11a>
 8000582:	e7e6      	b.n	8000552 <HAL_ADC_ConfigChannel+0xf6>
 8000584:	40012400 	.word	0x40012400
 8000588:	20000008 	.word	0x20000008
 800058c:	431bde83 	.word	0x431bde83

08000590 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000594:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000598:	4906      	ldr	r1, [pc, #24]	; (80005b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800059a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800059c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800059e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005a2:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80005b0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80005b2:	4770      	bx	lr
 80005b4:	e000ed00 	.word	0xe000ed00

080005b8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005b8:	4b1c      	ldr	r3, [pc, #112]	; (800062c <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005ba:	b500      	push	{lr}
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005c2:	f1c3 0e07 	rsb	lr, r3, #7
 80005c6:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ca:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ce:	bf28      	it	cs
 80005d0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005d4:	f1bc 0f06 	cmp.w	ip, #6
 80005d8:	d91b      	bls.n	8000612 <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005da:	f04f 3cff 	mov.w	ip, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005de:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005e0:	fa0c fc03 	lsl.w	ip, ip, r3
 80005e4:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005e8:	f04f 3cff 	mov.w	ip, #4294967295
 80005ec:	fa0c fc0e 	lsl.w	ip, ip, lr
 80005f0:	ea21 010c 	bic.w	r1, r1, ip
 80005f4:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80005f6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f8:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80005fc:	db0c      	blt.n	8000618 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fe:	0109      	lsls	r1, r1, #4
 8000600:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000604:	b2c9      	uxtb	r1, r1
 8000606:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800060a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800060e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000612:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000614:	4613      	mov	r3, r2
 8000616:	e7e7      	b.n	80005e8 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000618:	4b05      	ldr	r3, [pc, #20]	; (8000630 <HAL_NVIC_SetPriority+0x78>)
 800061a:	f000 000f 	and.w	r0, r0, #15
 800061e:	0109      	lsls	r1, r1, #4
 8000620:	b2c9      	uxtb	r1, r1
 8000622:	4403      	add	r3, r0
 8000624:	7619      	strb	r1, [r3, #24]
 8000626:	f85d fb04 	ldr.w	pc, [sp], #4
 800062a:	bf00      	nop
 800062c:	e000ed00 	.word	0xe000ed00
 8000630:	e000ecfc 	.word	0xe000ecfc

08000634 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000634:	2800      	cmp	r0, #0
 8000636:	db07      	blt.n	8000648 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000638:	2301      	movs	r3, #1
 800063a:	f000 011f 	and.w	r1, r0, #31
 800063e:	4a03      	ldr	r2, [pc, #12]	; (800064c <HAL_NVIC_EnableIRQ+0x18>)
 8000640:	0940      	lsrs	r0, r0, #5
 8000642:	408b      	lsls	r3, r1
 8000644:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	e000e100 	.word	0xe000e100

08000650 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000650:	3801      	subs	r0, #1
 8000652:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000656:	d20f      	bcs.n	8000678 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000658:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065c:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000660:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000662:	2107      	movs	r1, #7
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000664:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000666:	4c05      	ldr	r4, [pc, #20]	; (800067c <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000668:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066a:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800066e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000670:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8000672:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000674:	6119      	str	r1, [r3, #16]
 8000676:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000678:	2001      	movs	r0, #1
 800067a:	4770      	bx	lr
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000680:	b180      	cbz	r0, 80006a4 <HAL_CRC_Init+0x24>
{
 8000682:	b510      	push	{r4, lr}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000684:	7943      	ldrb	r3, [r0, #5]
 8000686:	4604      	mov	r4, r0
 8000688:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800068c:	b11b      	cbz	r3, 8000696 <HAL_CRC_Init+0x16>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800068e:	2301      	movs	r3, #1
 8000690:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8000692:	2000      	movs	r0, #0
}
 8000694:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8000696:	7102      	strb	r2, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8000698:	f001 f8ca 	bl	8001830 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_READY;
 800069c:	2301      	movs	r3, #1
 800069e:	7163      	strb	r3, [r4, #5]
  return HAL_OK;
 80006a0:	2000      	movs	r0, #0
}
 80006a2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80006a4:	2001      	movs	r0, #1
}
 80006a6:	4770      	bx	lr

080006a8 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80006a8:	b340      	cbz	r0, 80006fc <HAL_DMA_Init+0x54>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80006aa:	4603      	mov	r3, r0
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80006ac:	c805      	ldmia	r0, {r0, r2}
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80006ae:	f44f 7c80 	mov.w	ip, #256	; 0x100
{
 80006b2:	b430      	push	{r4, r5}
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80006b4:	2400      	movs	r4, #0
  tmp |=  hdma->Init.Direction        |
 80006b6:	6899      	ldr	r1, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80006b8:	68dd      	ldr	r5, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80006ba:	430a      	orrs	r2, r1
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80006bc:	4910      	ldr	r1, [pc, #64]	; (8000700 <HAL_DMA_Init+0x58>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80006be:	432a      	orrs	r2, r5
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80006c0:	4d10      	ldr	r5, [pc, #64]	; (8000704 <HAL_DMA_Init+0x5c>)
 80006c2:	4401      	add	r1, r0
 80006c4:	fba5 5101 	umull	r5, r1, r5, r1
 80006c8:	0909      	lsrs	r1, r1, #4
 80006ca:	0089      	lsls	r1, r1, #2
 80006cc:	6419      	str	r1, [r3, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80006ce:	6919      	ldr	r1, [r3, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80006d0:	699d      	ldr	r5, [r3, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80006d2:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80006d4:	6959      	ldr	r1, [r3, #20]
 80006d6:	430a      	orrs	r2, r1
  tmp = hdma->Instance->CCR;
 80006d8:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80006da:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80006dc:	69dd      	ldr	r5, [r3, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80006de:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
 80006e2:	f021 0130 	bic.w	r1, r1, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 80006e6:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Direction        |
 80006e8:	430a      	orrs	r2, r1
  hdma->DmaBaseAddress = DMA1;
 80006ea:	4907      	ldr	r1, [pc, #28]	; (8000708 <HAL_DMA_Init+0x60>)
 80006ec:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 80006ee:	6002      	str	r2, [r0, #0]
  hdma->Lock = HAL_UNLOCKED;
 80006f0:	f8a3 c020 	strh.w	ip, [r3, #32]

  return HAL_OK;
 80006f4:	4620      	mov	r0, r4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80006f6:	639c      	str	r4, [r3, #56]	; 0x38
}
 80006f8:	bc30      	pop	{r4, r5}
 80006fa:	4770      	bx	lr
    return HAL_ERROR;
 80006fc:	2001      	movs	r0, #1
}
 80006fe:	4770      	bx	lr
 8000700:	bffdfff8 	.word	0xbffdfff8
 8000704:	cccccccd 	.word	0xcccccccd
 8000708:	40020000 	.word	0x40020000

0800070c <HAL_DMA_IRQHandler>:
{
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800070c:	2204      	movs	r2, #4
{
 800070e:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000710:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000712:	6c01      	ldr	r1, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000714:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000716:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000718:	408a      	lsls	r2, r1
 800071a:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 800071c:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800071e:	d01f      	beq.n	8000760 <HAL_DMA_IRQHandler+0x54>
 8000720:	076a      	lsls	r2, r5, #29
 8000722:	d51d      	bpl.n	8000760 <HAL_DMA_IRQHandler+0x54>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	0691      	lsls	r1, r2, #26
 8000728:	d403      	bmi.n	8000732 <HAL_DMA_IRQHandler+0x26>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	f022 0204 	bic.w	r2, r2, #4
 8000730:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000732:	4a3e      	ldr	r2, [pc, #248]	; (800082c <HAL_DMA_IRQHandler+0x120>)
 8000734:	4293      	cmp	r3, r2
 8000736:	d05a      	beq.n	80007ee <HAL_DMA_IRQHandler+0xe2>
 8000738:	3214      	adds	r2, #20
 800073a:	4293      	cmp	r3, r2
 800073c:	d05f      	beq.n	80007fe <HAL_DMA_IRQHandler+0xf2>
 800073e:	3214      	adds	r2, #20
 8000740:	4293      	cmp	r3, r2
 8000742:	d066      	beq.n	8000812 <HAL_DMA_IRQHandler+0x106>
 8000744:	3214      	adds	r2, #20
 8000746:	4293      	cmp	r3, r2
 8000748:	d069      	beq.n	800081e <HAL_DMA_IRQHandler+0x112>
 800074a:	3214      	adds	r2, #20
 800074c:	4293      	cmp	r3, r2
 800074e:	d05b      	beq.n	8000808 <HAL_DMA_IRQHandler+0xfc>
 8000750:	3214      	adds	r2, #20
 8000752:	4293      	cmp	r3, r2
 8000754:	bf0c      	ite	eq
 8000756:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
 800075a:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 800075e:	e047      	b.n	80007f0 <HAL_DMA_IRQHandler+0xe4>
      hdma->XferHalfCpltCallback(hdma);
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000760:	2202      	movs	r2, #2
 8000762:	408a      	lsls	r2, r1
 8000764:	4222      	tst	r2, r4
 8000766:	d022      	beq.n	80007ae <HAL_DMA_IRQHandler+0xa2>
 8000768:	07aa      	lsls	r2, r5, #30
 800076a:	d520      	bpl.n	80007ae <HAL_DMA_IRQHandler+0xa2>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	0691      	lsls	r1, r2, #26
 8000770:	d406      	bmi.n	8000780 <HAL_DMA_IRQHandler+0x74>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000772:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	f022 020a 	bic.w	r2, r2, #10
 800077a:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800077c:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000780:	4a2a      	ldr	r2, [pc, #168]	; (800082c <HAL_DMA_IRQHandler+0x120>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d029      	beq.n	80007da <HAL_DMA_IRQHandler+0xce>
 8000786:	3214      	adds	r2, #20
 8000788:	4293      	cmp	r3, r2
 800078a:	d040      	beq.n	800080e <HAL_DMA_IRQHandler+0x102>
 800078c:	3214      	adds	r2, #20
 800078e:	4293      	cmp	r3, r2
 8000790:	d042      	beq.n	8000818 <HAL_DMA_IRQHandler+0x10c>
 8000792:	3214      	adds	r2, #20
 8000794:	4293      	cmp	r3, r2
 8000796:	d034      	beq.n	8000802 <HAL_DMA_IRQHandler+0xf6>
 8000798:	3214      	adds	r2, #20
 800079a:	4293      	cmp	r3, r2
 800079c:	d042      	beq.n	8000824 <HAL_DMA_IRQHandler+0x118>
 800079e:	3214      	adds	r2, #20
 80007a0:	4293      	cmp	r3, r2
 80007a2:	bf0c      	ite	eq
 80007a4:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 80007a8:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 80007ac:	e016      	b.n	80007dc <HAL_DMA_IRQHandler+0xd0>
      hdma->XferCpltCallback(hdma);
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80007ae:	2208      	movs	r2, #8
 80007b0:	408a      	lsls	r2, r1
 80007b2:	4222      	tst	r2, r4
 80007b4:	d019      	beq.n	80007ea <HAL_DMA_IRQHandler+0xde>
 80007b6:	072a      	lsls	r2, r5, #28
 80007b8:	d517      	bpl.n	80007ea <HAL_DMA_IRQHandler+0xde>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80007ba:	681a      	ldr	r2, [r3, #0]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80007bc:	f44f 7480 	mov.w	r4, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80007c0:	f022 020e 	bic.w	r2, r2, #14
 80007c4:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80007c6:	2301      	movs	r3, #1

    if (hdma->XferErrorCallback != NULL)
 80007c8:	6b02      	ldr	r2, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80007ca:	fa03 f101 	lsl.w	r1, r3, r1
 80007ce:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80007d0:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80007d2:	8404      	strh	r4, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80007d4:	b14a      	cbz	r2, 80007ea <HAL_DMA_IRQHandler+0xde>
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
    }
  }
  return;
}
 80007d6:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80007d8:	4710      	bx	r2
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80007da:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 80007dc:	2100      	movs	r1, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80007de:	4c14      	ldr	r4, [pc, #80]	; (8000830 <HAL_DMA_IRQHandler+0x124>)
    if(hdma->XferCpltCallback != NULL)
 80007e0:	6a83      	ldr	r3, [r0, #40]	; 0x28
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80007e2:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 80007e4:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80007e8:	b93b      	cbnz	r3, 80007fa <HAL_DMA_IRQHandler+0xee>
}
 80007ea:	bc70      	pop	{r4, r5, r6}
 80007ec:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80007ee:	2204      	movs	r2, #4
 80007f0:	490f      	ldr	r1, [pc, #60]	; (8000830 <HAL_DMA_IRQHandler+0x124>)
    if(hdma->XferHalfCpltCallback != NULL)
 80007f2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80007f4:	604a      	str	r2, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0f7      	beq.n	80007ea <HAL_DMA_IRQHandler+0xde>
}
 80007fa:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 80007fc:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80007fe:	2240      	movs	r2, #64	; 0x40
 8000800:	e7f6      	b.n	80007f0 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000802:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000806:	e7e9      	b.n	80007dc <HAL_DMA_IRQHandler+0xd0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000808:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800080c:	e7f0      	b.n	80007f0 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800080e:	2220      	movs	r2, #32
 8000810:	e7e4      	b.n	80007dc <HAL_DMA_IRQHandler+0xd0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000812:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000816:	e7eb      	b.n	80007f0 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800081c:	e7de      	b.n	80007dc <HAL_DMA_IRQHandler+0xd0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800081e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000822:	e7e5      	b.n	80007f0 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000824:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000828:	e7d8      	b.n	80007dc <HAL_DMA_IRQHandler+0xd0>
 800082a:	bf00      	nop
 800082c:	40020008 	.word	0x40020008
 8000830:	40020000 	.word	0x40020000

08000834 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000838:	680e      	ldr	r6, [r1, #0]
{
 800083a:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800083c:	2e00      	cmp	r6, #0
 800083e:	f000 80b5 	beq.w	80009ac <HAL_GPIO_Init+0x178>
 8000842:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000844:	4f7a      	ldr	r7, [pc, #488]	; (8000a30 <HAL_GPIO_Init+0x1fc>)
  uint32_t config = 0x00u;
 8000846:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 8000848:	4613      	mov	r3, r2
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800084a:	4d7a      	ldr	r5, [pc, #488]	; (8000a34 <HAL_GPIO_Init+0x200>)
      switch (GPIO_Init->Mode)
 800084c:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8000a38 <HAL_GPIO_Init+0x204>
 8000850:	e006      	b.n	8000860 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 8000852:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000854:	fa36 f403 	lsrs.w	r4, r6, r3
 8000858:	f102 0204 	add.w	r2, r2, #4
 800085c:	f000 80a6 	beq.w	80009ac <HAL_GPIO_Init+0x178>
    ioposition = (0x01uL << position);
 8000860:	2401      	movs	r4, #1
 8000862:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 8000864:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000868:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 800086c:	d1f1      	bne.n	8000852 <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 800086e:	684e      	ldr	r6, [r1, #4]
 8000870:	2e12      	cmp	r6, #18
 8000872:	f200 809e 	bhi.w	80009b2 <HAL_GPIO_Init+0x17e>
 8000876:	2e12      	cmp	r6, #18
 8000878:	d81a      	bhi.n	80008b0 <HAL_GPIO_Init+0x7c>
 800087a:	e8df f006 	tbb	[pc, r6]
 800087e:	b9a7      	.short	0xb9a7
 8000880:	1919ceb5 	.word	0x1919ceb5
 8000884:	19191919 	.word	0x19191919
 8000888:	19191919 	.word	0x19191919
 800088c:	b1191919 	.word	0xb1191919
 8000890:	bc          	.byte	0xbc
 8000891:	00          	.byte	0x00
 8000892:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8000a3c <HAL_GPIO_Init+0x208>
 8000896:	4576      	cmp	r6, lr
 8000898:	f000 8098 	beq.w	80009cc <HAL_GPIO_Init+0x198>
 800089c:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 80008a0:	4576      	cmp	r6, lr
 80008a2:	f000 8093 	beq.w	80009cc <HAL_GPIO_Init+0x198>
 80008a6:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 80008aa:	4576      	cmp	r6, lr
 80008ac:	f000 808e 	beq.w	80009cc <HAL_GPIO_Init+0x198>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008b0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80008b4:	bf9c      	itt	ls
 80008b6:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80008b8:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008ba:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008be:	bf84      	itt	hi
 80008c0:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80008c4:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008c8:	f8de 4000 	ldr.w	r4, [lr]
 80008cc:	fa0a f90b 	lsl.w	r9, sl, fp
 80008d0:	fa06 fb0b 	lsl.w	fp, r6, fp
 80008d4:	ea24 040b 	bic.w	r4, r4, fp
 80008d8:	ea44 0409 	orr.w	r4, r4, r9
 80008dc:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008e0:	684c      	ldr	r4, [r1, #4]
 80008e2:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 80008e6:	d079      	beq.n	80009dc <HAL_GPIO_Init+0x1a8>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80008e8:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80008ec:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80008f0:	f04e 0e01 	orr.w	lr, lr, #1
 80008f4:	f8c7 e018 	str.w	lr, [r7, #24]
 80008f8:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80008fc:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000900:	f00e 0e01 	and.w	lr, lr, #1
 8000904:	f8cd e004 	str.w	lr, [sp, #4]
 8000908:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 800090c:	f023 0e03 	bic.w	lr, r3, #3
 8000910:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8000914:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8000918:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800091c:	fa06 f609 	lsl.w	r6, r6, r9
 8000920:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000924:	f8df b118 	ldr.w	fp, [pc, #280]	; 8000a40 <HAL_GPIO_Init+0x20c>
 8000928:	4558      	cmp	r0, fp
 800092a:	d013      	beq.n	8000954 <HAL_GPIO_Init+0x120>
 800092c:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 8000930:	4558      	cmp	r0, fp
 8000932:	d06b      	beq.n	8000a0c <HAL_GPIO_Init+0x1d8>
 8000934:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8000a44 <HAL_GPIO_Init+0x210>
 8000938:	4558      	cmp	r0, fp
 800093a:	d060      	beq.n	80009fe <HAL_GPIO_Init+0x1ca>
 800093c:	f8df b108 	ldr.w	fp, [pc, #264]	; 8000a48 <HAL_GPIO_Init+0x214>
 8000940:	4558      	cmp	r0, fp
 8000942:	bf0c      	ite	eq
 8000944:	f04f 0b03 	moveq.w	fp, #3
 8000948:	f04f 0b04 	movne.w	fp, #4
 800094c:	fa0b f909 	lsl.w	r9, fp, r9
 8000950:	ea46 0609 	orr.w	r6, r6, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000954:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000958:	682e      	ldr	r6, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800095a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800095e:	bf14      	ite	ne
 8000960:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000964:	ea26 060c 	biceq.w	r6, r6, ip
 8000968:	602e      	str	r6, [r5, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 800096a:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800096c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000970:	bf14      	ite	ne
 8000972:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000976:	ea26 060c 	biceq.w	r6, r6, ip
 800097a:	606e      	str	r6, [r5, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800097c:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800097e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000982:	bf14      	ite	ne
 8000984:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000988:	ea26 060c 	biceq.w	r6, r6, ip
 800098c:	60ae      	str	r6, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800098e:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000992:	68ec      	ldr	r4, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000994:	d01f      	beq.n	80009d6 <HAL_GPIO_Init+0x1a2>
          SET_BIT(EXTI->FTSR, iocurrent);
 8000996:	ea44 040c 	orr.w	r4, r4, ip
 800099a:	60ec      	str	r4, [r5, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800099c:	680e      	ldr	r6, [r1, #0]
	position++;
 800099e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009a0:	fa36 f403 	lsrs.w	r4, r6, r3
 80009a4:	f102 0204 	add.w	r2, r2, #4
 80009a8:	f47f af5a 	bne.w	8000860 <HAL_GPIO_Init+0x2c>
  }
}
 80009ac:	b003      	add	sp, #12
 80009ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80009b2:	4546      	cmp	r6, r8
 80009b4:	d00a      	beq.n	80009cc <HAL_GPIO_Init+0x198>
 80009b6:	f67f af6c 	bls.w	8000892 <HAL_GPIO_Init+0x5e>
 80009ba:	f8df e090 	ldr.w	lr, [pc, #144]	; 8000a4c <HAL_GPIO_Init+0x218>
 80009be:	4576      	cmp	r6, lr
 80009c0:	d004      	beq.n	80009cc <HAL_GPIO_Init+0x198>
 80009c2:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 80009c6:	4576      	cmp	r6, lr
 80009c8:	f47f af72 	bne.w	80008b0 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009cc:	688e      	ldr	r6, [r1, #8]
 80009ce:	bb3e      	cbnz	r6, 8000a20 <HAL_GPIO_Init+0x1ec>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009d0:	f04f 0a04 	mov.w	sl, #4
 80009d4:	e76c      	b.n	80008b0 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80009d6:	ea24 040c 	bic.w	r4, r4, ip
 80009da:	60ec      	str	r4, [r5, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009dc:	680e      	ldr	r6, [r1, #0]
 80009de:	e738      	b.n	8000852 <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009e0:	68cc      	ldr	r4, [r1, #12]
 80009e2:	f104 0a04 	add.w	sl, r4, #4
          break;
 80009e6:	e763      	b.n	80008b0 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009e8:	68cc      	ldr	r4, [r1, #12]
 80009ea:	f104 0a08 	add.w	sl, r4, #8
          break;
 80009ee:	e75f      	b.n	80008b0 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009f0:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 80009f4:	e75c      	b.n	80008b0 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009f6:	68cc      	ldr	r4, [r1, #12]
 80009f8:	f104 0a0c 	add.w	sl, r4, #12
          break;
 80009fc:	e758      	b.n	80008b0 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009fe:	f04f 0b02 	mov.w	fp, #2
 8000a02:	fa0b f909 	lsl.w	r9, fp, r9
 8000a06:	ea46 0609 	orr.w	r6, r6, r9
 8000a0a:	e7a3      	b.n	8000954 <HAL_GPIO_Init+0x120>
 8000a0c:	f04f 0b01 	mov.w	fp, #1
 8000a10:	fa0b f909 	lsl.w	r9, fp, r9
 8000a14:	ea46 0609 	orr.w	r6, r6, r9
 8000a18:	e79c      	b.n	8000954 <HAL_GPIO_Init+0x120>
      switch (GPIO_Init->Mode)
 8000a1a:	f04f 0a00 	mov.w	sl, #0
 8000a1e:	e747      	b.n	80008b0 <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a20:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a22:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 8000a26:	bf0c      	ite	eq
 8000a28:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 8000a2a:	6144      	strne	r4, [r0, #20]
 8000a2c:	e740      	b.n	80008b0 <HAL_GPIO_Init+0x7c>
 8000a2e:	bf00      	nop
 8000a30:	40021000 	.word	0x40021000
 8000a34:	40010400 	.word	0x40010400
 8000a38:	10220000 	.word	0x10220000
 8000a3c:	10120000 	.word	0x10120000
 8000a40:	40010800 	.word	0x40010800
 8000a44:	40011000 	.word	0x40011000
 8000a48:	40011400 	.word	0x40011400
 8000a4c:	10310000 	.word	0x10310000

08000a50 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a50:	2800      	cmp	r0, #0
 8000a52:	f000 81b6 	beq.w	8000dc2 <HAL_RCC_OscConfig+0x372>
{
 8000a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a5a:	6803      	ldr	r3, [r0, #0]
 8000a5c:	4604      	mov	r4, r0
 8000a5e:	07dd      	lsls	r5, r3, #31
{
 8000a60:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a62:	d535      	bpl.n	8000ad0 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a64:	499a      	ldr	r1, [pc, #616]	; (8000cd0 <HAL_RCC_OscConfig+0x280>)
 8000a66:	684a      	ldr	r2, [r1, #4]
 8000a68:	f002 020c 	and.w	r2, r2, #12
 8000a6c:	2a04      	cmp	r2, #4
 8000a6e:	f000 80ef 	beq.w	8000c50 <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a72:	684a      	ldr	r2, [r1, #4]
 8000a74:	f002 020c 	and.w	r2, r2, #12
 8000a78:	2a08      	cmp	r2, #8
 8000a7a:	f000 80e5 	beq.w	8000c48 <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a7e:	6863      	ldr	r3, [r4, #4]
 8000a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a84:	d010      	beq.n	8000aa8 <HAL_RCC_OscConfig+0x58>
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	f000 810c 	beq.w	8000ca4 <HAL_RCC_OscConfig+0x254>
 8000a8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a90:	f000 8182 	beq.w	8000d98 <HAL_RCC_OscConfig+0x348>
 8000a94:	4b8e      	ldr	r3, [pc, #568]	; (8000cd0 <HAL_RCC_OscConfig+0x280>)
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	e004      	b.n	8000ab2 <HAL_RCC_OscConfig+0x62>
 8000aa8:	4a89      	ldr	r2, [pc, #548]	; (8000cd0 <HAL_RCC_OscConfig+0x280>)
 8000aaa:	6813      	ldr	r3, [r2, #0]
 8000aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ab0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ab2:	f7ff fb8d 	bl	80001d0 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ab6:	4e86      	ldr	r6, [pc, #536]	; (8000cd0 <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 8000ab8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000aba:	e005      	b.n	8000ac8 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000abc:	f7ff fb88 	bl	80001d0 <HAL_GetTick>
 8000ac0:	1b40      	subs	r0, r0, r5
 8000ac2:	2864      	cmp	r0, #100	; 0x64
 8000ac4:	f200 80ea 	bhi.w	8000c9c <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ac8:	6833      	ldr	r3, [r6, #0]
 8000aca:	039a      	lsls	r2, r3, #14
 8000acc:	d5f6      	bpl.n	8000abc <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ace:	6823      	ldr	r3, [r4, #0]
 8000ad0:	079f      	lsls	r7, r3, #30
 8000ad2:	d528      	bpl.n	8000b26 <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ad4:	4a7e      	ldr	r2, [pc, #504]	; (8000cd0 <HAL_RCC_OscConfig+0x280>)
 8000ad6:	6851      	ldr	r1, [r2, #4]
 8000ad8:	f011 0f0c 	tst.w	r1, #12
 8000adc:	f000 808d 	beq.w	8000bfa <HAL_RCC_OscConfig+0x1aa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ae0:	6851      	ldr	r1, [r2, #4]
 8000ae2:	f001 010c 	and.w	r1, r1, #12
 8000ae6:	2908      	cmp	r1, #8
 8000ae8:	f000 8083 	beq.w	8000bf2 <HAL_RCC_OscConfig+0x1a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000aec:	6923      	ldr	r3, [r4, #16]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	f000 8118 	beq.w	8000d24 <HAL_RCC_OscConfig+0x2d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000af4:	2201      	movs	r2, #1
 8000af6:	4b77      	ldr	r3, [pc, #476]	; (8000cd4 <HAL_RCC_OscConfig+0x284>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000af8:	4e75      	ldr	r6, [pc, #468]	; (8000cd0 <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_ENABLE();
 8000afa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000afc:	f7ff fb68 	bl	80001d0 <HAL_GetTick>
 8000b00:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b02:	e005      	b.n	8000b10 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b04:	f7ff fb64 	bl	80001d0 <HAL_GetTick>
 8000b08:	1b40      	subs	r0, r0, r5
 8000b0a:	2802      	cmp	r0, #2
 8000b0c:	f200 80c6 	bhi.w	8000c9c <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b10:	6833      	ldr	r3, [r6, #0]
 8000b12:	0798      	lsls	r0, r3, #30
 8000b14:	d5f6      	bpl.n	8000b04 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b16:	6833      	ldr	r3, [r6, #0]
 8000b18:	6962      	ldr	r2, [r4, #20]
 8000b1a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000b1e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000b22:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b24:	6823      	ldr	r3, [r4, #0]
 8000b26:	071a      	lsls	r2, r3, #28
 8000b28:	d41f      	bmi.n	8000b6a <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b2a:	075d      	lsls	r5, r3, #29
 8000b2c:	d542      	bpl.n	8000bb4 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b2e:	4b68      	ldr	r3, [pc, #416]	; (8000cd0 <HAL_RCC_OscConfig+0x280>)
 8000b30:	69da      	ldr	r2, [r3, #28]
 8000b32:	00d0      	lsls	r0, r2, #3
 8000b34:	d57d      	bpl.n	8000c32 <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 8000b36:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b38:	4e67      	ldr	r6, [pc, #412]	; (8000cd8 <HAL_RCC_OscConfig+0x288>)
 8000b3a:	6833      	ldr	r3, [r6, #0]
 8000b3c:	05d9      	lsls	r1, r3, #23
 8000b3e:	f140 809d 	bpl.w	8000c7c <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b42:	68e3      	ldr	r3, [r4, #12]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	f000 80fe 	beq.w	8000d46 <HAL_RCC_OscConfig+0x2f6>
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	f000 80ca 	beq.w	8000ce4 <HAL_RCC_OscConfig+0x294>
 8000b50:	2b05      	cmp	r3, #5
 8000b52:	4b5f      	ldr	r3, [pc, #380]	; (8000cd0 <HAL_RCC_OscConfig+0x280>)
 8000b54:	6a1a      	ldr	r2, [r3, #32]
 8000b56:	f000 812c 	beq.w	8000db2 <HAL_RCC_OscConfig+0x362>
 8000b5a:	f022 0201 	bic.w	r2, r2, #1
 8000b5e:	621a      	str	r2, [r3, #32]
 8000b60:	6a1a      	ldr	r2, [r3, #32]
 8000b62:	f022 0204 	bic.w	r2, r2, #4
 8000b66:	621a      	str	r2, [r3, #32]
 8000b68:	e0f2      	b.n	8000d50 <HAL_RCC_OscConfig+0x300>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b6a:	69a3      	ldr	r3, [r4, #24]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d04f      	beq.n	8000c10 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_LSI_ENABLE();
 8000b70:	2201      	movs	r2, #1
 8000b72:	4b58      	ldr	r3, [pc, #352]	; (8000cd4 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b74:	4e56      	ldr	r6, [pc, #344]	; (8000cd0 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_ENABLE();
 8000b76:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8000b7a:	f7ff fb29 	bl	80001d0 <HAL_GetTick>
 8000b7e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b80:	e005      	b.n	8000b8e <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000b82:	f7ff fb25 	bl	80001d0 <HAL_GetTick>
 8000b86:	1b40      	subs	r0, r0, r5
 8000b88:	2802      	cmp	r0, #2
 8000b8a:	f200 8087 	bhi.w	8000c9c <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b8e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000b90:	079b      	lsls	r3, r3, #30
 8000b92:	d5f6      	bpl.n	8000b82 <HAL_RCC_OscConfig+0x132>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000b94:	4b51      	ldr	r3, [pc, #324]	; (8000cdc <HAL_RCC_OscConfig+0x28c>)
 8000b96:	4a52      	ldr	r2, [pc, #328]	; (8000ce0 <HAL_RCC_OscConfig+0x290>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b9e:	0a5b      	lsrs	r3, r3, #9
 8000ba0:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000ba2:	bf00      	nop
  }
  while (Delay --);
 8000ba4:	9b01      	ldr	r3, [sp, #4]
 8000ba6:	1e5a      	subs	r2, r3, #1
 8000ba8:	9201      	str	r2, [sp, #4]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d1f9      	bne.n	8000ba2 <HAL_RCC_OscConfig+0x152>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000bae:	6823      	ldr	r3, [r4, #0]
 8000bb0:	075d      	lsls	r5, r3, #29
 8000bb2:	d4bc      	bmi.n	8000b2e <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000bb4:	69e0      	ldr	r0, [r4, #28]
 8000bb6:	b1c0      	cbz	r0, 8000bea <HAL_RCC_OscConfig+0x19a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000bb8:	4d45      	ldr	r5, [pc, #276]	; (8000cd0 <HAL_RCC_OscConfig+0x280>)
 8000bba:	686b      	ldr	r3, [r5, #4]
 8000bbc:	f003 030c 	and.w	r3, r3, #12
 8000bc0:	2b08      	cmp	r3, #8
 8000bc2:	f000 80d8 	beq.w	8000d76 <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	4b42      	ldr	r3, [pc, #264]	; (8000cd4 <HAL_RCC_OscConfig+0x284>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000bca:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000bcc:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000bce:	f000 80fa 	beq.w	8000dc6 <HAL_RCC_OscConfig+0x376>
        tickstart = HAL_GetTick();
 8000bd2:	f7ff fafd 	bl	80001d0 <HAL_GetTick>
 8000bd6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bd8:	e004      	b.n	8000be4 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bda:	f7ff faf9 	bl	80001d0 <HAL_GetTick>
 8000bde:	1b00      	subs	r0, r0, r4
 8000be0:	2802      	cmp	r0, #2
 8000be2:	d85b      	bhi.n	8000c9c <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000be4:	682b      	ldr	r3, [r5, #0]
 8000be6:	019b      	lsls	r3, r3, #6
 8000be8:	d4f7      	bmi.n	8000bda <HAL_RCC_OscConfig+0x18a>
  return HAL_OK;
 8000bea:	2000      	movs	r0, #0
}
 8000bec:	b002      	add	sp, #8
 8000bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000bf2:	6852      	ldr	r2, [r2, #4]
 8000bf4:	03d6      	lsls	r6, r2, #15
 8000bf6:	f53f af79 	bmi.w	8000aec <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bfa:	4a35      	ldr	r2, [pc, #212]	; (8000cd0 <HAL_RCC_OscConfig+0x280>)
 8000bfc:	6812      	ldr	r2, [r2, #0]
 8000bfe:	0795      	lsls	r5, r2, #30
 8000c00:	d530      	bpl.n	8000c64 <HAL_RCC_OscConfig+0x214>
 8000c02:	6922      	ldr	r2, [r4, #16]
 8000c04:	2a01      	cmp	r2, #1
 8000c06:	d02d      	beq.n	8000c64 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 8000c08:	2001      	movs	r0, #1
}
 8000c0a:	b002      	add	sp, #8
 8000c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8000c10:	4a30      	ldr	r2, [pc, #192]	; (8000cd4 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c12:	4e2f      	ldr	r6, [pc, #188]	; (8000cd0 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_DISABLE();
 8000c14:	f8c2 3480 	str.w	r3, [r2, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8000c18:	f7ff fada 	bl	80001d0 <HAL_GetTick>
 8000c1c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c1e:	e004      	b.n	8000c2a <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c20:	f7ff fad6 	bl	80001d0 <HAL_GetTick>
 8000c24:	1b40      	subs	r0, r0, r5
 8000c26:	2802      	cmp	r0, #2
 8000c28:	d838      	bhi.n	8000c9c <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c2a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000c2c:	079f      	lsls	r7, r3, #30
 8000c2e:	d4f7      	bmi.n	8000c20 <HAL_RCC_OscConfig+0x1d0>
 8000c30:	e7bd      	b.n	8000bae <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c32:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8000c34:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c36:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c3a:	61da      	str	r2, [r3, #28]
 8000c3c:	69db      	ldr	r3, [r3, #28]
 8000c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c42:	9300      	str	r3, [sp, #0]
 8000c44:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8000c46:	e777      	b.n	8000b38 <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c48:	684a      	ldr	r2, [r1, #4]
 8000c4a:	03d0      	lsls	r0, r2, #15
 8000c4c:	f57f af17 	bpl.w	8000a7e <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c50:	4a1f      	ldr	r2, [pc, #124]	; (8000cd0 <HAL_RCC_OscConfig+0x280>)
 8000c52:	6812      	ldr	r2, [r2, #0]
 8000c54:	0391      	lsls	r1, r2, #14
 8000c56:	f57f af3b 	bpl.w	8000ad0 <HAL_RCC_OscConfig+0x80>
 8000c5a:	6862      	ldr	r2, [r4, #4]
 8000c5c:	2a00      	cmp	r2, #0
 8000c5e:	f47f af37 	bne.w	8000ad0 <HAL_RCC_OscConfig+0x80>
 8000c62:	e7d1      	b.n	8000c08 <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c64:	491a      	ldr	r1, [pc, #104]	; (8000cd0 <HAL_RCC_OscConfig+0x280>)
 8000c66:	6960      	ldr	r0, [r4, #20]
 8000c68:	680a      	ldr	r2, [r1, #0]
 8000c6a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000c6e:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8000c72:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c74:	071a      	lsls	r2, r3, #28
 8000c76:	f57f af58 	bpl.w	8000b2a <HAL_RCC_OscConfig+0xda>
 8000c7a:	e776      	b.n	8000b6a <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c7c:	6833      	ldr	r3, [r6, #0]
 8000c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c82:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000c84:	f7ff faa4 	bl	80001d0 <HAL_GetTick>
 8000c88:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c8a:	6833      	ldr	r3, [r6, #0]
 8000c8c:	05da      	lsls	r2, r3, #23
 8000c8e:	f53f af58 	bmi.w	8000b42 <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c92:	f7ff fa9d 	bl	80001d0 <HAL_GetTick>
 8000c96:	1bc0      	subs	r0, r0, r7
 8000c98:	2864      	cmp	r0, #100	; 0x64
 8000c9a:	d9f6      	bls.n	8000c8a <HAL_RCC_OscConfig+0x23a>
            return HAL_TIMEOUT;
 8000c9c:	2003      	movs	r0, #3
}
 8000c9e:	b002      	add	sp, #8
 8000ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ca4:	4d0a      	ldr	r5, [pc, #40]	; (8000cd0 <HAL_RCC_OscConfig+0x280>)
 8000ca6:	682b      	ldr	r3, [r5, #0]
 8000ca8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cac:	602b      	str	r3, [r5, #0]
 8000cae:	682b      	ldr	r3, [r5, #0]
 8000cb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cb4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000cb6:	f7ff fa8b 	bl	80001d0 <HAL_GetTick>
 8000cba:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cbc:	e004      	b.n	8000cc8 <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cbe:	f7ff fa87 	bl	80001d0 <HAL_GetTick>
 8000cc2:	1b80      	subs	r0, r0, r6
 8000cc4:	2864      	cmp	r0, #100	; 0x64
 8000cc6:	d8e9      	bhi.n	8000c9c <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cc8:	682b      	ldr	r3, [r5, #0]
 8000cca:	039b      	lsls	r3, r3, #14
 8000ccc:	d4f7      	bmi.n	8000cbe <HAL_RCC_OscConfig+0x26e>
 8000cce:	e6fe      	b.n	8000ace <HAL_RCC_OscConfig+0x7e>
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	42420000 	.word	0x42420000
 8000cd8:	40007000 	.word	0x40007000
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ce4:	4e50      	ldr	r6, [pc, #320]	; (8000e28 <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ce6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cea:	6a33      	ldr	r3, [r6, #32]
 8000cec:	f023 0301 	bic.w	r3, r3, #1
 8000cf0:	6233      	str	r3, [r6, #32]
 8000cf2:	6a33      	ldr	r3, [r6, #32]
 8000cf4:	f023 0304 	bic.w	r3, r3, #4
 8000cf8:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8000cfa:	f7ff fa69 	bl	80001d0 <HAL_GetTick>
 8000cfe:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d00:	e004      	b.n	8000d0c <HAL_RCC_OscConfig+0x2bc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d02:	f7ff fa65 	bl	80001d0 <HAL_GetTick>
 8000d06:	1bc0      	subs	r0, r0, r7
 8000d08:	4540      	cmp	r0, r8
 8000d0a:	d8c7      	bhi.n	8000c9c <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d0c:	6a33      	ldr	r3, [r6, #32]
 8000d0e:	0798      	lsls	r0, r3, #30
 8000d10:	d4f7      	bmi.n	8000d02 <HAL_RCC_OscConfig+0x2b2>
    if (pwrclkchanged == SET)
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	f43f af4e 	beq.w	8000bb4 <HAL_RCC_OscConfig+0x164>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d18:	4a43      	ldr	r2, [pc, #268]	; (8000e28 <HAL_RCC_OscConfig+0x3d8>)
 8000d1a:	69d3      	ldr	r3, [r2, #28]
 8000d1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d20:	61d3      	str	r3, [r2, #28]
 8000d22:	e747      	b.n	8000bb4 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8000d24:	4a41      	ldr	r2, [pc, #260]	; (8000e2c <HAL_RCC_OscConfig+0x3dc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d26:	4e40      	ldr	r6, [pc, #256]	; (8000e28 <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_HSI_DISABLE();
 8000d28:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000d2a:	f7ff fa51 	bl	80001d0 <HAL_GetTick>
 8000d2e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d30:	e004      	b.n	8000d3c <HAL_RCC_OscConfig+0x2ec>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d32:	f7ff fa4d 	bl	80001d0 <HAL_GetTick>
 8000d36:	1b40      	subs	r0, r0, r5
 8000d38:	2802      	cmp	r0, #2
 8000d3a:	d8af      	bhi.n	8000c9c <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d3c:	6833      	ldr	r3, [r6, #0]
 8000d3e:	0799      	lsls	r1, r3, #30
 8000d40:	d4f7      	bmi.n	8000d32 <HAL_RCC_OscConfig+0x2e2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d42:	6823      	ldr	r3, [r4, #0]
 8000d44:	e6ef      	b.n	8000b26 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d46:	4a38      	ldr	r2, [pc, #224]	; (8000e28 <HAL_RCC_OscConfig+0x3d8>)
 8000d48:	6a13      	ldr	r3, [r2, #32]
 8000d4a:	f043 0301 	orr.w	r3, r3, #1
 8000d4e:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8000d50:	f7ff fa3e 	bl	80001d0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d54:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000d58:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d5a:	4f33      	ldr	r7, [pc, #204]	; (8000e28 <HAL_RCC_OscConfig+0x3d8>)
 8000d5c:	e004      	b.n	8000d68 <HAL_RCC_OscConfig+0x318>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d5e:	f7ff fa37 	bl	80001d0 <HAL_GetTick>
 8000d62:	1b80      	subs	r0, r0, r6
 8000d64:	4540      	cmp	r0, r8
 8000d66:	d899      	bhi.n	8000c9c <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d68:	6a3b      	ldr	r3, [r7, #32]
 8000d6a:	079b      	lsls	r3, r3, #30
 8000d6c:	d5f7      	bpl.n	8000d5e <HAL_RCC_OscConfig+0x30e>
    if (pwrclkchanged == SET)
 8000d6e:	2d00      	cmp	r5, #0
 8000d70:	f43f af20 	beq.w	8000bb4 <HAL_RCC_OscConfig+0x164>
 8000d74:	e7d0      	b.n	8000d18 <HAL_RCC_OscConfig+0x2c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000d76:	2801      	cmp	r0, #1
 8000d78:	f43f af38 	beq.w	8000bec <HAL_RCC_OscConfig+0x19c>
        pll_config = RCC->CFGR;
 8000d7c:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d7e:	6a22      	ldr	r2, [r4, #32]
 8000d80:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8000d84:	4291      	cmp	r1, r2
 8000d86:	f47f af3f 	bne.w	8000c08 <HAL_RCC_OscConfig+0x1b8>
 8000d8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000d8c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    return HAL_ERROR;
 8000d90:	1a18      	subs	r0, r3, r0
 8000d92:	bf18      	it	ne
 8000d94:	2001      	movne	r0, #1
 8000d96:	e729      	b.n	8000bec <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d9c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	e67f      	b.n	8000ab2 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000db2:	f042 0204 	orr.w	r2, r2, #4
 8000db6:	621a      	str	r2, [r3, #32]
 8000db8:	6a1a      	ldr	r2, [r3, #32]
 8000dba:	f042 0201 	orr.w	r2, r2, #1
 8000dbe:	621a      	str	r2, [r3, #32]
 8000dc0:	e7c6      	b.n	8000d50 <HAL_RCC_OscConfig+0x300>
    return HAL_ERROR;
 8000dc2:	2001      	movs	r0, #1
}
 8000dc4:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8000dc6:	f7ff fa03 	bl	80001d0 <HAL_GetTick>
 8000dca:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dcc:	e005      	b.n	8000dda <HAL_RCC_OscConfig+0x38a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000dce:	f7ff f9ff 	bl	80001d0 <HAL_GetTick>
 8000dd2:	1b80      	subs	r0, r0, r6
 8000dd4:	2802      	cmp	r0, #2
 8000dd6:	f63f af61 	bhi.w	8000c9c <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dda:	682b      	ldr	r3, [r5, #0]
 8000ddc:	0199      	lsls	r1, r3, #6
 8000dde:	d4f6      	bmi.n	8000dce <HAL_RCC_OscConfig+0x37e>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000de0:	6a23      	ldr	r3, [r4, #32]
 8000de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000de6:	d105      	bne.n	8000df4 <HAL_RCC_OscConfig+0x3a4>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000de8:	686a      	ldr	r2, [r5, #4]
 8000dea:	68a1      	ldr	r1, [r4, #8]
 8000dec:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000df0:	430a      	orrs	r2, r1
 8000df2:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000df4:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000df6:	4d0c      	ldr	r5, [pc, #48]	; (8000e28 <HAL_RCC_OscConfig+0x3d8>)
 8000df8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000dfa:	686a      	ldr	r2, [r5, #4]
 8000dfc:	430b      	orrs	r3, r1
 8000dfe:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8000e02:	490a      	ldr	r1, [pc, #40]	; (8000e2c <HAL_RCC_OscConfig+0x3dc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e04:	4313      	orrs	r3, r2
 8000e06:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000e08:	6608      	str	r0, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8000e0a:	f7ff f9e1 	bl	80001d0 <HAL_GetTick>
 8000e0e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e10:	e005      	b.n	8000e1e <HAL_RCC_OscConfig+0x3ce>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e12:	f7ff f9dd 	bl	80001d0 <HAL_GetTick>
 8000e16:	1b00      	subs	r0, r0, r4
 8000e18:	2802      	cmp	r0, #2
 8000e1a:	f63f af3f 	bhi.w	8000c9c <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e1e:	682b      	ldr	r3, [r5, #0]
 8000e20:	019a      	lsls	r2, r3, #6
 8000e22:	d5f6      	bpl.n	8000e12 <HAL_RCC_OscConfig+0x3c2>
 8000e24:	e6e1      	b.n	8000bea <HAL_RCC_OscConfig+0x19a>
 8000e26:	bf00      	nop
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	42420000 	.word	0x42420000

08000e30 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8000e30:	2800      	cmp	r0, #0
 8000e32:	f000 80b1 	beq.w	8000f98 <HAL_RCC_ClockConfig+0x168>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000e36:	4a5e      	ldr	r2, [pc, #376]	; (8000fb0 <HAL_RCC_ClockConfig+0x180>)
{
 8000e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000e3c:	6813      	ldr	r3, [r2, #0]
 8000e3e:	4604      	mov	r4, r0
 8000e40:	f003 0307 	and.w	r3, r3, #7
 8000e44:	428b      	cmp	r3, r1
 8000e46:	460d      	mov	r5, r1
{
 8000e48:	b086      	sub	sp, #24
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000e4a:	d20d      	bcs.n	8000e68 <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e4c:	6813      	ldr	r3, [r2, #0]
 8000e4e:	f023 0307 	bic.w	r3, r3, #7
 8000e52:	430b      	orrs	r3, r1
 8000e54:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e56:	6813      	ldr	r3, [r2, #0]
 8000e58:	f003 0307 	and.w	r3, r3, #7
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d003      	beq.n	8000e68 <HAL_RCC_ClockConfig+0x38>
    return HAL_ERROR;
 8000e60:	2001      	movs	r0, #1
}
 8000e62:	b006      	add	sp, #24
 8000e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e68:	6823      	ldr	r3, [r4, #0]
 8000e6a:	079e      	lsls	r6, r3, #30
 8000e6c:	d514      	bpl.n	8000e98 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e6e:	0758      	lsls	r0, r3, #29
 8000e70:	d504      	bpl.n	8000e7c <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000e72:	4950      	ldr	r1, [pc, #320]	; (8000fb4 <HAL_RCC_ClockConfig+0x184>)
 8000e74:	684a      	ldr	r2, [r1, #4]
 8000e76:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8000e7a:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e7c:	0719      	lsls	r1, r3, #28
 8000e7e:	d504      	bpl.n	8000e8a <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000e80:	494c      	ldr	r1, [pc, #304]	; (8000fb4 <HAL_RCC_ClockConfig+0x184>)
 8000e82:	684a      	ldr	r2, [r1, #4]
 8000e84:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8000e88:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e8a:	494a      	ldr	r1, [pc, #296]	; (8000fb4 <HAL_RCC_ClockConfig+0x184>)
 8000e8c:	68a0      	ldr	r0, [r4, #8]
 8000e8e:	684a      	ldr	r2, [r1, #4]
 8000e90:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000e94:	4302      	orrs	r2, r0
 8000e96:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e98:	07da      	lsls	r2, r3, #31
 8000e9a:	d520      	bpl.n	8000ede <HAL_RCC_ClockConfig+0xae>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e9c:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e9e:	4b45      	ldr	r3, [pc, #276]	; (8000fb4 <HAL_RCC_ClockConfig+0x184>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ea0:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ea2:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ea4:	d07a      	beq.n	8000f9c <HAL_RCC_ClockConfig+0x16c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ea6:	2a02      	cmp	r2, #2
 8000ea8:	d073      	beq.n	8000f92 <HAL_RCC_ClockConfig+0x162>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eaa:	079e      	lsls	r6, r3, #30
 8000eac:	d5d8      	bpl.n	8000e60 <HAL_RCC_ClockConfig+0x30>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000eae:	4e41      	ldr	r6, [pc, #260]	; (8000fb4 <HAL_RCC_ClockConfig+0x184>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000eb0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000eb4:	6873      	ldr	r3, [r6, #4]
 8000eb6:	f023 0303 	bic.w	r3, r3, #3
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000ebe:	f7ff f987 	bl	80001d0 <HAL_GetTick>
 8000ec2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ec4:	e004      	b.n	8000ed0 <HAL_RCC_ClockConfig+0xa0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ec6:	f7ff f983 	bl	80001d0 <HAL_GetTick>
 8000eca:	1bc0      	subs	r0, r0, r7
 8000ecc:	4540      	cmp	r0, r8
 8000ece:	d868      	bhi.n	8000fa2 <HAL_RCC_ClockConfig+0x172>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ed0:	6873      	ldr	r3, [r6, #4]
 8000ed2:	6862      	ldr	r2, [r4, #4]
 8000ed4:	f003 030c 	and.w	r3, r3, #12
 8000ed8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000edc:	d1f3      	bne.n	8000ec6 <HAL_RCC_ClockConfig+0x96>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000ede:	4a34      	ldr	r2, [pc, #208]	; (8000fb0 <HAL_RCC_ClockConfig+0x180>)
 8000ee0:	6813      	ldr	r3, [r2, #0]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	42ab      	cmp	r3, r5
 8000ee8:	d909      	bls.n	8000efe <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000eea:	6813      	ldr	r3, [r2, #0]
 8000eec:	f023 0307 	bic.w	r3, r3, #7
 8000ef0:	432b      	orrs	r3, r5
 8000ef2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ef4:	6813      	ldr	r3, [r2, #0]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	42ab      	cmp	r3, r5
 8000efc:	d1b0      	bne.n	8000e60 <HAL_RCC_ClockConfig+0x30>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000efe:	6823      	ldr	r3, [r4, #0]
 8000f00:	0758      	lsls	r0, r3, #29
 8000f02:	d506      	bpl.n	8000f12 <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f04:	492b      	ldr	r1, [pc, #172]	; (8000fb4 <HAL_RCC_ClockConfig+0x184>)
 8000f06:	68e0      	ldr	r0, [r4, #12]
 8000f08:	684a      	ldr	r2, [r1, #4]
 8000f0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000f0e:	4302      	orrs	r2, r0
 8000f10:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f12:	0719      	lsls	r1, r3, #28
 8000f14:	d507      	bpl.n	8000f26 <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000f16:	4a27      	ldr	r2, [pc, #156]	; (8000fb4 <HAL_RCC_ClockConfig+0x184>)
 8000f18:	6921      	ldr	r1, [r4, #16]
 8000f1a:	6853      	ldr	r3, [r2, #4]
 8000f1c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000f20:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f24:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000f26:	f240 2401 	movw	r4, #513	; 0x201
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000f2a:	4b23      	ldr	r3, [pc, #140]	; (8000fb8 <HAL_RCC_ClockConfig+0x188>)
 8000f2c:	ad06      	add	r5, sp, #24
 8000f2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f30:	e905 000f 	stmdb	r5, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8000f34:	491f      	ldr	r1, [pc, #124]	; (8000fb4 <HAL_RCC_ClockConfig+0x184>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000f36:	f8ad 4004 	strh.w	r4, [sp, #4]
  tmpreg = RCC->CFGR;
 8000f3a:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000f3c:	f002 030c 	and.w	r3, r2, #12
 8000f40:	2b08      	cmp	r3, #8
 8000f42:	d011      	beq.n	8000f68 <HAL_RCC_ClockConfig+0x138>
      sysclockfreq = HSE_VALUE;
 8000f44:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <HAL_RCC_ClockConfig+0x18c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000f46:	4a1b      	ldr	r2, [pc, #108]	; (8000fb4 <HAL_RCC_ClockConfig+0x184>)
 8000f48:	481d      	ldr	r0, [pc, #116]	; (8000fc0 <HAL_RCC_ClockConfig+0x190>)
 8000f4a:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8000f4c:	491d      	ldr	r1, [pc, #116]	; (8000fc4 <HAL_RCC_ClockConfig+0x194>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000f4e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8000f52:	5c80      	ldrb	r0, [r0, r2]
 8000f54:	4a1c      	ldr	r2, [pc, #112]	; (8000fc8 <HAL_RCC_ClockConfig+0x198>)
 8000f56:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 8000f58:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000f5a:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8000f5c:	f7ff f8f6 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000f60:	2000      	movs	r0, #0
}
 8000f62:	b006      	add	sp, #24
 8000f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000f68:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8000f6c:	3318      	adds	r3, #24
 8000f6e:	446b      	add	r3, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000f70:	03d2      	lsls	r2, r2, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000f72:	f813 3c10 	ldrb.w	r3, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000f76:	d516      	bpl.n	8000fa6 <HAL_RCC_ClockConfig+0x176>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000f78:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000f7a:	4910      	ldr	r1, [pc, #64]	; (8000fbc <HAL_RCC_ClockConfig+0x18c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000f7c:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000f80:	fb01 f303 	mul.w	r3, r1, r3
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000f84:	3218      	adds	r2, #24
 8000f86:	446a      	add	r2, sp
 8000f88:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000f8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f90:	e7d9      	b.n	8000f46 <HAL_RCC_ClockConfig+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f92:	019f      	lsls	r7, r3, #6
 8000f94:	d48b      	bmi.n	8000eae <HAL_RCC_ClockConfig+0x7e>
 8000f96:	e763      	b.n	8000e60 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8000f98:	2001      	movs	r0, #1
}
 8000f9a:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f9c:	039b      	lsls	r3, r3, #14
 8000f9e:	d486      	bmi.n	8000eae <HAL_RCC_ClockConfig+0x7e>
 8000fa0:	e75e      	b.n	8000e60 <HAL_RCC_ClockConfig+0x30>
        return HAL_TIMEOUT;
 8000fa2:	2003      	movs	r0, #3
 8000fa4:	e75d      	b.n	8000e62 <HAL_RCC_ClockConfig+0x32>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000fa6:	4a09      	ldr	r2, [pc, #36]	; (8000fcc <HAL_RCC_ClockConfig+0x19c>)
 8000fa8:	fb02 f303 	mul.w	r3, r2, r3
 8000fac:	e7cb      	b.n	8000f46 <HAL_RCC_ClockConfig+0x116>
 8000fae:	bf00      	nop
 8000fb0:	40022000 	.word	0x40022000
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	08001a2c 	.word	0x08001a2c
 8000fbc:	007a1200 	.word	0x007a1200
 8000fc0:	08001a40 	.word	0x08001a40
 8000fc4:	20000004 	.word	0x20000004
 8000fc8:	20000008 	.word	0x20000008
 8000fcc:	003d0900 	.word	0x003d0900

08000fd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fd4:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000fd6:	6800      	ldr	r0, [r0, #0]
{
 8000fd8:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000fda:	07c1      	lsls	r1, r0, #31
 8000fdc:	d52c      	bpl.n	8001038 <HAL_RCCEx_PeriphCLKConfig+0x68>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fde:	4b3a      	ldr	r3, [pc, #232]	; (80010c8 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8000fe0:	69da      	ldr	r2, [r3, #28]
 8000fe2:	00d2      	lsls	r2, r2, #3
 8000fe4:	d53f      	bpl.n	8001066 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fe6:	4d39      	ldr	r5, [pc, #228]	; (80010cc <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    FlagStatus pwrclkchanged = RESET;
 8000fe8:	2600      	movs	r6, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fea:	682b      	ldr	r3, [r5, #0]
 8000fec:	05df      	lsls	r7, r3, #23
 8000fee:	d548      	bpl.n	8001082 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000ff0:	4d35      	ldr	r5, [pc, #212]	; (80010c8 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8000ff2:	6a2b      	ldr	r3, [r5, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000ff4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000ff8:	d011      	beq.n	800101e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8000ffa:	6861      	ldr	r1, [r4, #4]
 8000ffc:	f401 7240 	and.w	r2, r1, #768	; 0x300
 8001000:	429a      	cmp	r2, r3
 8001002:	d00d      	beq.n	8001020 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001004:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001006:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001008:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800100a:	4a31      	ldr	r2, [pc, #196]	; (80010d0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800100c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001010:	f8c2 7440 	str.w	r7, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001014:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001018:	6229      	str	r1, [r5, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800101a:	07d9      	lsls	r1, r3, #31
 800101c:	d444      	bmi.n	80010a8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800101e:	6861      	ldr	r1, [r4, #4]
 8001020:	4a29      	ldr	r2, [pc, #164]	; (80010c8 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8001022:	6a13      	ldr	r3, [r2, #32]
 8001024:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001028:	430b      	orrs	r3, r1
 800102a:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800102c:	b11e      	cbz	r6, 8001036 <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800102e:	69d3      	ldr	r3, [r2, #28]
 8001030:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001034:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001036:	6820      	ldr	r0, [r4, #0]
 8001038:	0783      	lsls	r3, r0, #30
 800103a:	d506      	bpl.n	800104a <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800103c:	4922      	ldr	r1, [pc, #136]	; (80010c8 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800103e:	68a3      	ldr	r3, [r4, #8]
 8001040:	684a      	ldr	r2, [r1, #4]
 8001042:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001046:	431a      	orrs	r2, r3
 8001048:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800104a:	f010 0010 	ands.w	r0, r0, #16
 800104e:	d007      	beq.n	8001060 <HAL_RCCEx_PeriphCLKConfig+0x90>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001050:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001052:	4a1d      	ldr	r2, [pc, #116]	; (80010c8 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8001054:	68e1      	ldr	r1, [r4, #12]
 8001056:	6853      	ldr	r3, [r2, #4]
 8001058:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800105c:	430b      	orrs	r3, r1
 800105e:	6053      	str	r3, [r2, #4]
}
 8001060:	b002      	add	sp, #8
 8001062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8001066:	69da      	ldr	r2, [r3, #28]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001068:	4d18      	ldr	r5, [pc, #96]	; (80010cc <HAL_RCCEx_PeriphCLKConfig+0xfc>)
      __HAL_RCC_PWR_CLK_ENABLE();
 800106a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800106e:	61da      	str	r2, [r3, #28]
 8001070:	69db      	ldr	r3, [r3, #28]
      pwrclkchanged = SET;
 8001072:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001078:	9301      	str	r3, [sp, #4]
 800107a:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800107c:	682b      	ldr	r3, [r5, #0]
 800107e:	05df      	lsls	r7, r3, #23
 8001080:	d4b6      	bmi.n	8000ff0 <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001082:	682b      	ldr	r3, [r5, #0]
 8001084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001088:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800108a:	f7ff f8a1 	bl	80001d0 <HAL_GetTick>
 800108e:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001090:	682b      	ldr	r3, [r5, #0]
 8001092:	05d8      	lsls	r0, r3, #23
 8001094:	d4ac      	bmi.n	8000ff0 <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001096:	f7ff f89b 	bl	80001d0 <HAL_GetTick>
 800109a:	1bc3      	subs	r3, r0, r7
 800109c:	2b64      	cmp	r3, #100	; 0x64
 800109e:	d9f7      	bls.n	8001090 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 80010a0:	2003      	movs	r0, #3
}
 80010a2:	b002      	add	sp, #8
 80010a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tickstart = HAL_GetTick();
 80010a8:	f7ff f892 	bl	80001d0 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ac:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80010b0:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010b2:	e004      	b.n	80010be <HAL_RCCEx_PeriphCLKConfig+0xee>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010b4:	f7ff f88c 	bl	80001d0 <HAL_GetTick>
 80010b8:	1bc0      	subs	r0, r0, r7
 80010ba:	4540      	cmp	r0, r8
 80010bc:	d8f0      	bhi.n	80010a0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010be:	6a2b      	ldr	r3, [r5, #32]
 80010c0:	079a      	lsls	r2, r3, #30
 80010c2:	d5f7      	bpl.n	80010b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 80010c4:	e7ab      	b.n	800101e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80010c6:	bf00      	nop
 80010c8:	40021000 	.word	0x40021000
 80010cc:	40007000 	.word	0x40007000
 80010d0:	42420000 	.word	0x42420000

080010d4 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80010d4:	2800      	cmp	r0, #0
 80010d6:	d058      	beq.n	800118a <HAL_SPI_Init+0xb6>
{
 80010d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80010da:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80010dc:	4604      	mov	r4, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d044      	beq.n	800116c <HAL_SPI_Init+0x98>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80010e2:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80010e4:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010e8:	2000      	movs	r0, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80010ea:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010ee:	62a0      	str	r0, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80010f0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d03f      	beq.n	8001178 <HAL_SPI_Init+0xa4>
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80010f8:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 80010fc:	2602      	movs	r6, #2
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 80010fe:	f04f 0c01 	mov.w	ip, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001102:	2500      	movs	r5, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001104:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8001108:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800110c:	4313      	orrs	r3, r2
 800110e:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001110:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001114:	6926      	ldr	r6, [r4, #16]
 8001116:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800111a:	4313      	orrs	r3, r2
 800111c:	f006 0602 	and.w	r6, r6, #2
 8001120:	4333      	orrs	r3, r6
 8001122:	6966      	ldr	r6, [r4, #20]
 8001124:	69a1      	ldr	r1, [r4, #24]
 8001126:	6a27      	ldr	r7, [r4, #32]
 8001128:	ea06 060c 	and.w	r6, r6, ip
 800112c:	4333      	orrs	r3, r6
 800112e:	69e6      	ldr	r6, [r4, #28]
 8001130:	f007 0e80 	and.w	lr, r7, #128	; 0x80
 8001134:	f401 7700 	and.w	r7, r1, #512	; 0x200
 8001138:	f006 0638 	and.w	r6, r6, #56	; 0x38
 800113c:	433b      	orrs	r3, r7
  __HAL_SPI_DISABLE(hspi);
 800113e:	6822      	ldr	r2, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001140:	4333      	orrs	r3, r6
 8001142:	ea43 030e 	orr.w	r3, r3, lr
 8001146:	4303      	orrs	r3, r0
  __HAL_SPI_DISABLE(hspi);
 8001148:	6810      	ldr	r0, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800114a:	0c09      	lsrs	r1, r1, #16
 800114c:	f001 0104 	and.w	r1, r1, #4
  __HAL_SPI_DISABLE(hspi);
 8001150:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8001154:	6010      	str	r0, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001156:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001158:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800115a:	69d3      	ldr	r3, [r2, #28]

  return HAL_OK;
 800115c:	4628      	mov	r0, r5
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800115e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001162:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001164:	6565      	str	r5, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001166:	f884 c051 	strb.w	ip, [r4, #81]	; 0x51
}
 800116a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800116c:	6842      	ldr	r2, [r0, #4]
 800116e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001172:	d0b9      	beq.n	80010e8 <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001174:	61c3      	str	r3, [r0, #28]
 8001176:	e7b7      	b.n	80010e8 <HAL_SPI_Init+0x14>
    HAL_SPI_MspInit(hspi);
 8001178:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800117a:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800117e:	f000 fb6d 	bl	800185c <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001182:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001184:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8001188:	e7b6      	b.n	80010f8 <HAL_SPI_Init+0x24>
    return HAL_ERROR;
 800118a:	2001      	movs	r0, #1
}
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop

08001190 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001190:	2800      	cmp	r0, #0
 8001192:	d066      	beq.n	8001262 <HAL_TIM_Base_Init+0xd2>
{
 8001194:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001196:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800119a:	4604      	mov	r4, r0
 800119c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d045      	beq.n	8001230 <HAL_TIM_Base_Init+0xa0>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80011a4:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80011a6:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80011a8:	492f      	ldr	r1, [pc, #188]	; (8001268 <HAL_TIM_Base_Init+0xd8>)
  htim->State = HAL_TIM_STATE_BUSY;
 80011aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80011ae:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80011b0:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80011b2:	d042      	beq.n	800123a <HAL_TIM_Base_Init+0xaa>
 80011b4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80011b8:	d011      	beq.n	80011de <HAL_TIM_Base_Init+0x4e>
 80011ba:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 80011be:	428a      	cmp	r2, r1
 80011c0:	d00d      	beq.n	80011de <HAL_TIM_Base_Init+0x4e>
 80011c2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80011c6:	428a      	cmp	r2, r1
 80011c8:	d009      	beq.n	80011de <HAL_TIM_Base_Init+0x4e>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80011ca:	69a0      	ldr	r0, [r4, #24]
 80011cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80011d0:	4303      	orrs	r3, r0

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80011d2:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 80011d4:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80011d6:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80011d8:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80011da:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80011dc:	e010      	b.n	8001200 <HAL_TIM_Base_Init+0x70>
    tmpcr1 |= Structure->CounterMode;
 80011de:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80011e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80011e4:	6920      	ldr	r0, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 80011e6:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80011e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80011ec:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80011ee:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80011f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80011f4:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80011f6:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80011f8:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80011fa:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80011fc:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80011fe:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001200:	2301      	movs	r3, #1
 8001202:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001204:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001208:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800120c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001210:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001214:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001218:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800121c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001220:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001224:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001228:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800122c:	2000      	movs	r0, #0
}
 800122e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001230:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001234:	f000 fb5e 	bl	80018f4 <HAL_TIM_Base_MspInit>
 8001238:	e7b4      	b.n	80011a4 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 800123a:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800123c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001240:	6921      	ldr	r1, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8001242:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8001244:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001248:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800124a:	69a1      	ldr	r1, [r4, #24]
 800124c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001250:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8001252:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001254:	68e3      	ldr	r3, [r4, #12]
 8001256:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001258:	6863      	ldr	r3, [r4, #4]
 800125a:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800125c:	6963      	ldr	r3, [r4, #20]
 800125e:	6313      	str	r3, [r2, #48]	; 0x30
 8001260:	e7ce      	b.n	8001200 <HAL_TIM_Base_Init+0x70>
    return HAL_ERROR;
 8001262:	2001      	movs	r0, #1
}
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40012c00 	.word	0x40012c00

0800126c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800126c:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8001270:	2a01      	cmp	r2, #1
 8001272:	d075      	beq.n	8001360 <HAL_TIM_ConfigClockSource+0xf4>
{
 8001274:	b430      	push	{r4, r5}
 8001276:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8001278:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800127a:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 800127c:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(htim);
 800127e:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001286:	6884      	ldr	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001288:	680a      	ldr	r2, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800128a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 800128e:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8001292:	2a60      	cmp	r2, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8001294:	6084      	str	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001296:	d065      	beq.n	8001364 <HAL_TIM_ConfigClockSource+0xf8>
 8001298:	d831      	bhi.n	80012fe <HAL_TIM_ConfigClockSource+0x92>
 800129a:	2a40      	cmp	r2, #64	; 0x40
 800129c:	d048      	beq.n	8001330 <HAL_TIM_ConfigClockSource+0xc4>
 800129e:	d921      	bls.n	80012e4 <HAL_TIM_ConfigClockSource+0x78>
 80012a0:	2a50      	cmp	r2, #80	; 0x50
 80012a2:	d116      	bne.n	80012d2 <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80012a4:	684a      	ldr	r2, [r1, #4]
 80012a6:	68cc      	ldr	r4, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80012a8:	6a01      	ldr	r1, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80012aa:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80012ae:	4311      	orrs	r1, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80012b0:	6a02      	ldr	r2, [r0, #32]
 80012b2:	f022 0201 	bic.w	r2, r2, #1
 80012b6:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80012b8:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80012ba:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80012be:	ea42 1204 	orr.w	r2, r2, r4, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80012c2:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80012c4:	6201      	str	r1, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80012c6:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80012c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80012cc:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80012d0:	6082      	str	r2, [r0, #8]
  __HAL_UNLOCK(htim);
 80012d2:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 80012d4:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80012d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 80012da:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
  return HAL_OK;
 80012de:	4610      	mov	r0, r2
}
 80012e0:	bc30      	pop	{r4, r5}
 80012e2:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80012e4:	2a20      	cmp	r2, #32
 80012e6:	d002      	beq.n	80012ee <HAL_TIM_ConfigClockSource+0x82>
 80012e8:	d91e      	bls.n	8001328 <HAL_TIM_ConfigClockSource+0xbc>
 80012ea:	2a30      	cmp	r2, #48	; 0x30
 80012ec:	d1f1      	bne.n	80012d2 <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr = TIMx->SMCR;
 80012ee:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80012f0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80012f4:	430a      	orrs	r2, r1
 80012f6:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 80012fa:	6082      	str	r2, [r0, #8]
}
 80012fc:	e7e9      	b.n	80012d2 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 80012fe:	2a70      	cmp	r2, #112	; 0x70
 8001300:	d049      	beq.n	8001396 <HAL_TIM_ConfigClockSource+0x12a>
 8001302:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001306:	d1e4      	bne.n	80012d2 <HAL_TIM_ConfigClockSource+0x66>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001308:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800130c:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800130e:	432a      	orrs	r2, r5
 8001310:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001312:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001316:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800131a:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800131c:	6082      	str	r2, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800131e:	6882      	ldr	r2, [r0, #8]
 8001320:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001324:	6082      	str	r2, [r0, #8]
      break;
 8001326:	e7d4      	b.n	80012d2 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8001328:	f032 0110 	bics.w	r1, r2, #16
 800132c:	d1d1      	bne.n	80012d2 <HAL_TIM_ConfigClockSource+0x66>
 800132e:	e7de      	b.n	80012ee <HAL_TIM_ConfigClockSource+0x82>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001330:	684a      	ldr	r2, [r1, #4]
 8001332:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 8001334:	6a01      	ldr	r1, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001336:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800133a:	4311      	orrs	r1, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800133c:	6a02      	ldr	r2, [r0, #32]
 800133e:	f022 0201 	bic.w	r2, r2, #1
 8001342:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001344:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001346:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800134a:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800134e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001350:	6201      	str	r1, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001352:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001354:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001358:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800135c:	6082      	str	r2, [r0, #8]
}
 800135e:	e7b8      	b.n	80012d2 <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 8001360:	2002      	movs	r0, #2
}
 8001362:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001364:	6a02      	ldr	r2, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001366:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001368:	f022 0210 	bic.w	r2, r2, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 800136c:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800136e:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001370:	6981      	ldr	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 8001372:	6a02      	ldr	r2, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001374:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001378:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800137c:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001380:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001384:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 8001386:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001388:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800138a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800138e:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8001392:	6082      	str	r2, [r0, #8]
}
 8001394:	e79d      	b.n	80012d2 <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001396:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800139a:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800139c:	432a      	orrs	r2, r5
 800139e:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80013a0:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80013a4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80013a8:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 80013aa:	6082      	str	r2, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 80013ac:	6882      	ldr	r2, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80013ae:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80013b2:	6082      	str	r2, [r0, #8]
      break;
 80013b4:	e78d      	b.n	80012d2 <HAL_TIM_ConfigClockSource+0x66>
 80013b6:	bf00      	nop

080013b8 <HAL_TIM_PeriodElapsedCallback>:
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop

080013bc <HAL_TIM_OC_DelayElapsedCallback>:
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop

080013c0 <HAL_TIM_IC_CaptureCallback>:
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop

080013c4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop

080013c8 <HAL_TIM_TriggerCallback>:
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop

080013cc <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80013cc:	6803      	ldr	r3, [r0, #0]
{
 80013ce:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80013d0:	691a      	ldr	r2, [r3, #16]
{
 80013d2:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80013d4:	0791      	lsls	r1, r2, #30
 80013d6:	d502      	bpl.n	80013de <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80013d8:	68da      	ldr	r2, [r3, #12]
 80013da:	0792      	lsls	r2, r2, #30
 80013dc:	d45f      	bmi.n	800149e <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80013de:	691a      	ldr	r2, [r3, #16]
 80013e0:	0750      	lsls	r0, r2, #29
 80013e2:	d502      	bpl.n	80013ea <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80013e4:	68da      	ldr	r2, [r3, #12]
 80013e6:	0751      	lsls	r1, r2, #29
 80013e8:	d446      	bmi.n	8001478 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80013ea:	691a      	ldr	r2, [r3, #16]
 80013ec:	0712      	lsls	r2, r2, #28
 80013ee:	d502      	bpl.n	80013f6 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80013f0:	68da      	ldr	r2, [r3, #12]
 80013f2:	0710      	lsls	r0, r2, #28
 80013f4:	d42e      	bmi.n	8001454 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80013f6:	691a      	ldr	r2, [r3, #16]
 80013f8:	06d2      	lsls	r2, r2, #27
 80013fa:	d502      	bpl.n	8001402 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80013fc:	68da      	ldr	r2, [r3, #12]
 80013fe:	06d0      	lsls	r0, r2, #27
 8001400:	d418      	bmi.n	8001434 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001402:	691a      	ldr	r2, [r3, #16]
 8001404:	07d1      	lsls	r1, r2, #31
 8001406:	d502      	bpl.n	800140e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001408:	68da      	ldr	r2, [r3, #12]
 800140a:	07d2      	lsls	r2, r2, #31
 800140c:	d45d      	bmi.n	80014ca <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800140e:	691a      	ldr	r2, [r3, #16]
 8001410:	0610      	lsls	r0, r2, #24
 8001412:	d502      	bpl.n	800141a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001414:	68da      	ldr	r2, [r3, #12]
 8001416:	0611      	lsls	r1, r2, #24
 8001418:	d45f      	bmi.n	80014da <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800141a:	691a      	ldr	r2, [r3, #16]
 800141c:	0652      	lsls	r2, r2, #25
 800141e:	d502      	bpl.n	8001426 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001420:	68da      	ldr	r2, [r3, #12]
 8001422:	0650      	lsls	r0, r2, #25
 8001424:	d461      	bmi.n	80014ea <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001426:	691a      	ldr	r2, [r3, #16]
 8001428:	0691      	lsls	r1, r2, #26
 800142a:	d502      	bpl.n	8001432 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800142c:	68da      	ldr	r2, [r3, #12]
 800142e:	0692      	lsls	r2, r2, #26
 8001430:	d443      	bmi.n	80014ba <HAL_TIM_IRQHandler+0xee>
}
 8001432:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001434:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001438:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800143a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800143c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800143e:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001440:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001442:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001446:	d064      	beq.n	8001512 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001448:	f7ff ffba 	bl	80013c0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800144c:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800144e:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001450:	7722      	strb	r2, [r4, #28]
 8001452:	e7d6      	b.n	8001402 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001454:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001458:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800145a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800145c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800145e:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001460:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001462:	0799      	lsls	r1, r3, #30
 8001464:	d152      	bne.n	800150c <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001466:	f7ff ffa9 	bl	80013bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800146a:	4620      	mov	r0, r4
 800146c:	f7ff ffaa 	bl	80013c4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001470:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001472:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001474:	7722      	strb	r2, [r4, #28]
 8001476:	e7be      	b.n	80013f6 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001478:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800147c:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800147e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001480:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001482:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001484:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001486:	f413 7f40 	tst.w	r3, #768	; 0x300
 800148a:	d13c      	bne.n	8001506 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800148c:	f7ff ff96 	bl	80013bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001490:	4620      	mov	r0, r4
 8001492:	f7ff ff97 	bl	80013c4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001496:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001498:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800149a:	7722      	strb	r2, [r4, #28]
 800149c:	e7a5      	b.n	80013ea <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800149e:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80014a2:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80014a4:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80014a6:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	079b      	lsls	r3, r3, #30
 80014ac:	d025      	beq.n	80014fa <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 80014ae:	f7ff ff87 	bl	80013c0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014b2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80014b4:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014b6:	7722      	strb	r2, [r4, #28]
 80014b8:	e791      	b.n	80013de <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80014ba:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80014be:	4620      	mov	r0, r4
}
 80014c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80014c4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80014c6:	f000 b85d 	b.w	8001584 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80014ca:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80014ce:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80014d0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80014d2:	f7ff ff71 	bl	80013b8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80014d6:	6823      	ldr	r3, [r4, #0]
 80014d8:	e799      	b.n	800140e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80014da:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80014de:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80014e0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80014e2:	f000 f851 	bl	8001588 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80014e6:	6823      	ldr	r3, [r4, #0]
 80014e8:	e797      	b.n	800141a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80014ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80014ee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80014f0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80014f2:	f7ff ff69 	bl	80013c8 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80014f6:	6823      	ldr	r3, [r4, #0]
 80014f8:	e795      	b.n	8001426 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80014fa:	f7ff ff5f 	bl	80013bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014fe:	4620      	mov	r0, r4
 8001500:	f7ff ff60 	bl	80013c4 <HAL_TIM_PWM_PulseFinishedCallback>
 8001504:	e7d5      	b.n	80014b2 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8001506:	f7ff ff5b 	bl	80013c0 <HAL_TIM_IC_CaptureCallback>
 800150a:	e7c4      	b.n	8001496 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 800150c:	f7ff ff58 	bl	80013c0 <HAL_TIM_IC_CaptureCallback>
 8001510:	e7ae      	b.n	8001470 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001512:	f7ff ff53 	bl	80013bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001516:	4620      	mov	r0, r4
 8001518:	f7ff ff54 	bl	80013c4 <HAL_TIM_PWM_PulseFinishedCallback>
 800151c:	e796      	b.n	800144c <HAL_TIM_IRQHandler+0x80>
 800151e:	bf00      	nop

08001520 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001520:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8001524:	2a01      	cmp	r2, #1
 8001526:	d027      	beq.n	8001578 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8001528:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800152a:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800152c:	681a      	ldr	r2, [r3, #0]
{
 800152e:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8001530:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8001534:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001536:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001538:	4d10      	ldr	r5, [pc, #64]	; (800157c <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 800153a:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800153e:	4320      	orrs	r0, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001540:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 8001542:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 8001544:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001546:	d009      	beq.n	800155c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8001548:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800154c:	d006      	beq.n	800155c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800154e:	480c      	ldr	r0, [pc, #48]	; (8001580 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8001550:	4282      	cmp	r2, r0
 8001552:	d003      	beq.n	800155c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8001554:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8001558:	4282      	cmp	r2, r0
 800155a:	d104      	bne.n	8001566 <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800155c:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800155e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001562:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001564:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8001566:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8001568:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800156a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 800156e:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d

  return HAL_OK;
 8001572:	4610      	mov	r0, r2
}
 8001574:	bc30      	pop	{r4, r5}
 8001576:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001578:	2002      	movs	r0, #2
}
 800157a:	4770      	bx	lr
 800157c:	40012c00 	.word	0x40012c00
 8001580:	40000400 	.word	0x40000400

08001584 <HAL_TIMEx_CommutCallback>:
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop

08001588 <HAL_TIMEx_BreakCallback>:
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop

0800158c <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800158c:	2300      	movs	r3, #0
{
 800158e:	b5d0      	push	{r4, r6, r7, lr}
 8001590:	b094      	sub	sp, #80	; 0x50
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001592:	2601      	movs	r6, #1
 8001594:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001598:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800159a:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800159c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015a0:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a4:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80015a8:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015ac:	e9cd 3302 	strd	r3, r3, [sp, #8]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015b0:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b2:	9305      	str	r3, [sp, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015b4:	9301      	str	r3, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015b6:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015b8:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015ba:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015be:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015c0:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015c4:	910e      	str	r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c6:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015c8:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015ca:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015cc:	f7ff fa40 	bl	8000a50 <HAL_RCC_OscConfig>
 80015d0:	b108      	cbz	r0, 80015d6 <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d2:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d6:	4603      	mov	r3, r0
 80015d8:	220f      	movs	r2, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015da:	e9cd 4306 	strd	r4, r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015de:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015e4:	4621      	mov	r1, r4
 80015e6:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015e8:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ea:	9205      	str	r2, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015ec:	f7ff fc20 	bl	8000e30 <HAL_RCC_ClockConfig>
 80015f0:	b108      	cbz	r0, 80015f6 <SystemClock_Config+0x6a>
 80015f2:	b672      	cpsid	i
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <SystemClock_Config+0x68>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80015f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015fa:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80015fc:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80015fe:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001600:	f7ff fce6 	bl	8000fd0 <HAL_RCCEx_PeriphCLKConfig>
 8001604:	b108      	cbz	r0, 800160a <SystemClock_Config+0x7e>
 8001606:	b672      	cpsid	i
  while (1)
 8001608:	e7fe      	b.n	8001608 <SystemClock_Config+0x7c>
}
 800160a:	b014      	add	sp, #80	; 0x50
 800160c:	bdd0      	pop	{r4, r6, r7, pc}
 800160e:	bf00      	nop

08001610 <main>:
{
 8001610:	b580      	push	{r7, lr}
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001612:	2501      	movs	r5, #1
{
 8001614:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 8001616:	f7fe fdbd 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 800161a:	f7ff ffb7 	bl	800158c <SystemClock_Config>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800161e:	4b4d      	ldr	r3, [pc, #308]	; (8001754 <main+0x144>)
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001620:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001622:	6999      	ldr	r1, [r3, #24]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001624:	200d      	movs	r0, #13
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001626:	f041 0120 	orr.w	r1, r1, #32
 800162a:	6199      	str	r1, [r3, #24]
 800162c:	6999      	ldr	r1, [r3, #24]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800162e:	f44f 7482 	mov.w	r4, #260	; 0x104
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001632:	f001 0120 	and.w	r1, r1, #32
 8001636:	9101      	str	r1, [sp, #4]
 8001638:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800163a:	6999      	ldr	r1, [r3, #24]
 800163c:	f041 0104 	orr.w	r1, r1, #4
 8001640:	6199      	str	r1, [r3, #24]
 8001642:	6999      	ldr	r1, [r3, #24]
 8001644:	f001 0104 	and.w	r1, r1, #4
 8001648:	9102      	str	r1, [sp, #8]
 800164a:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800164c:	6999      	ldr	r1, [r3, #24]
 800164e:	f041 0108 	orr.w	r1, r1, #8
 8001652:	6199      	str	r1, [r3, #24]
 8001654:	6999      	ldr	r1, [r3, #24]
 8001656:	f001 0108 	and.w	r1, r1, #8
 800165a:	9103      	str	r1, [sp, #12]
 800165c:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800165e:	6959      	ldr	r1, [r3, #20]
 8001660:	4329      	orrs	r1, r5
 8001662:	6159      	str	r1, [r3, #20]
 8001664:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001666:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001668:	402b      	ands	r3, r5
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800166e:	f7fe ffa3 	bl	80005b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001672:	200d      	movs	r0, #13
 8001674:	f7fe ffde 	bl	8000634 <HAL_NVIC_EnableIRQ>
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001678:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Instance = SPI1;
 800167c:	4836      	ldr	r0, [pc, #216]	; (8001758 <main+0x148>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800167e:	2300      	movs	r3, #0
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001680:	2120      	movs	r1, #32
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001682:	6182      	str	r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 8001684:	220a      	movs	r2, #10
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001686:	e9c0 4301 	strd	r4, r3, [r0, #4]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800168a:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800168e:	e9c0 1307 	strd	r1, r3, [r0, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001692:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi1.Instance = SPI1;
 8001696:	4b31      	ldr	r3, [pc, #196]	; (800175c <main+0x14c>)
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001698:	6145      	str	r5, [r0, #20]
  hspi1.Instance = SPI1;
 800169a:	6003      	str	r3, [r0, #0]
  hspi1.Init.CRCPolynomial = 10;
 800169c:	62c2      	str	r2, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800169e:	f7ff fd19 	bl	80010d4 <HAL_SPI_Init>
 80016a2:	b108      	cbz	r0, 80016a8 <main+0x98>
 80016a4:	b672      	cpsid	i
  while (1)
 80016a6:	e7fe      	b.n	80016a6 <main+0x96>
  htim4.Init.Prescaler = 71;
 80016a8:	2247      	movs	r2, #71	; 0x47
  htim4.Init.Period = 20000;
 80016aa:	f644 6320 	movw	r3, #20000	; 0x4e20
  htim4.Instance = TIM4;
 80016ae:	4c2c      	ldr	r4, [pc, #176]	; (8001760 <main+0x150>)
 80016b0:	492c      	ldr	r1, [pc, #176]	; (8001764 <main+0x154>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016b2:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80016b6:	9006      	str	r0, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b8:	9004      	str	r0, [sp, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ba:	60a0      	str	r0, [r4, #8]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016bc:	6120      	str	r0, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016be:	61a0      	str	r0, [r4, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016c0:	9009      	str	r0, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c2:	9005      	str	r0, [sp, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80016c4:	4620      	mov	r0, r4
  htim4.Instance = TIM4;
 80016c6:	6021      	str	r1, [r4, #0]
  htim4.Init.Prescaler = 71;
 80016c8:	6062      	str	r2, [r4, #4]
  htim4.Init.Period = 20000;
 80016ca:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80016cc:	f7ff fd60 	bl	8001190 <HAL_TIM_Base_Init>
 80016d0:	b108      	cbz	r0, 80016d6 <main+0xc6>
 80016d2:	b672      	cpsid	i
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <main+0xc4>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80016da:	4620      	mov	r0, r4
 80016dc:	a906      	add	r1, sp, #24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016de:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80016e0:	f7ff fdc4 	bl	800126c <HAL_TIM_ConfigClockSource>
 80016e4:	b108      	cbz	r0, 80016ea <main+0xda>
 80016e6:	b672      	cpsid	i
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <main+0xd8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ea:	2200      	movs	r2, #0
 80016ec:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016ee:	4620      	mov	r0, r4
 80016f0:	a904      	add	r1, sp, #16
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016f6:	f7ff ff13 	bl	8001520 <HAL_TIMEx_MasterConfigSynchronization>
 80016fa:	b9a0      	cbnz	r0, 8001726 <main+0x116>
  hadc1.Instance = ADC1;
 80016fc:	4c1a      	ldr	r4, [pc, #104]	; (8001768 <main+0x158>)
 80016fe:	4a1b      	ldr	r2, [pc, #108]	; (800176c <main+0x15c>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8001700:	e9cd 0006 	strd	r0, r0, [sp, #24]
  hadc1.Instance = ADC1;
 8001704:	6022      	str	r2, [r4, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001706:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 800170a:	9008      	str	r0, [sp, #32]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800170c:	60a0      	str	r0, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800170e:	7320      	strb	r0, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001710:	7520      	strb	r0, [r4, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001712:	6060      	str	r0, [r4, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001714:	4620      	mov	r0, r4
  hadc1.Init.NbrOfConversion = 1;
 8001716:	6125      	str	r5, [r4, #16]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001718:	61e2      	str	r2, [r4, #28]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800171a:	f7fe fd5f 	bl	80001dc <HAL_ADC_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	b118      	cbz	r0, 800172a <main+0x11a>
 8001722:	b672      	cpsid	i
  while (1)
 8001724:	e7fe      	b.n	8001724 <main+0x114>
 8001726:	b672      	cpsid	i
 8001728:	e7fe      	b.n	8001728 <main+0x118>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800172a:	2610      	movs	r6, #16
 800172c:	2701      	movs	r7, #1
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800172e:	4620      	mov	r0, r4
 8001730:	a906      	add	r1, sp, #24
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001732:	e9cd 6706 	strd	r6, r7, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001736:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001738:	f7fe fe90 	bl	800045c <HAL_ADC_ConfigChannel>
 800173c:	b108      	cbz	r0, 8001742 <main+0x132>
 800173e:	b672      	cpsid	i
  while (1)
 8001740:	e7fe      	b.n	8001740 <main+0x130>
  hcrc.Instance = CRC;
 8001742:	480b      	ldr	r0, [pc, #44]	; (8001770 <main+0x160>)
 8001744:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <main+0x164>)
 8001746:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001748:	f7fe ff9a 	bl	8000680 <HAL_CRC_Init>
 800174c:	b108      	cbz	r0, 8001752 <main+0x142>
 800174e:	b672      	cpsid	i
  while (1)
 8001750:	e7fe      	b.n	8001750 <main+0x140>
  while (1)
 8001752:	e7fe      	b.n	8001752 <main+0x142>
 8001754:	40021000 	.word	0x40021000
 8001758:	200000a8 	.word	0x200000a8
 800175c:	40013000 	.word	0x40013000
 8001760:	20000100 	.word	0x20000100
 8001764:	40000800 	.word	0x40000800
 8001768:	2000002c 	.word	0x2000002c
 800176c:	40012400 	.word	0x40012400
 8001770:	2000005c 	.word	0x2000005c
 8001774:	40023000 	.word	0x40023000

08001778 <Error_Handler>:
 8001778:	b672      	cpsid	i
  while (1)
 800177a:	e7fe      	b.n	800177a <Error_Handler+0x2>

0800177c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800177c:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <HAL_MspInit+0x3c>)
{
 800177e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001780:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001782:	490e      	ldr	r1, [pc, #56]	; (80017bc <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001784:	f042 0201 	orr.w	r2, r2, #1
 8001788:	619a      	str	r2, [r3, #24]
 800178a:	699a      	ldr	r2, [r3, #24]
 800178c:	f002 0201 	and.w	r2, r2, #1
 8001790:	9200      	str	r2, [sp, #0]
 8001792:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001794:	69da      	ldr	r2, [r3, #28]
 8001796:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800179a:	61da      	str	r2, [r3, #28]
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a2:	9301      	str	r3, [sp, #4]
 80017a4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017a6:	684b      	ldr	r3, [r1, #4]
 80017a8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017b0:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017b2:	b002      	add	sp, #8
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40010000 	.word	0x40010000

080017c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017c0:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c2:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 80017c4:	4b18      	ldr	r3, [pc, #96]	; (8001828 <HAL_ADC_MspInit+0x68>)
 80017c6:	6802      	ldr	r2, [r0, #0]
{
 80017c8:	b087      	sub	sp, #28
  if(hadc->Instance==ADC1)
 80017ca:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80017d0:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(hadc->Instance==ADC1)
 80017d4:	d001      	beq.n	80017da <HAL_ADC_MspInit+0x1a>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017d6:	b007      	add	sp, #28
 80017d8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017da:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 80017de:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e0:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017e6:	619a      	str	r2, [r3, #24]
 80017e8:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ea:	4810      	ldr	r0, [pc, #64]	; (800182c <HAL_ADC_MspInit+0x6c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017ec:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80017f0:	9200      	str	r2, [sp, #0]
 80017f2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f4:	699a      	ldr	r2, [r3, #24]
 80017f6:	f042 0208 	orr.w	r2, r2, #8
 80017fa:	619a      	str	r2, [r3, #24]
 80017fc:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017fe:	2202      	movs	r2, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001800:	f003 0308 	and.w	r3, r3, #8
 8001804:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001806:	2303      	movs	r3, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001808:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800180a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180e:	f7ff f811 	bl	8000834 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001812:	4622      	mov	r2, r4
 8001814:	4621      	mov	r1, r4
 8001816:	2012      	movs	r0, #18
 8001818:	f7fe fece 	bl	80005b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800181c:	2012      	movs	r0, #18
 800181e:	f7fe ff09 	bl	8000634 <HAL_NVIC_EnableIRQ>
}
 8001822:	b007      	add	sp, #28
 8001824:	bd30      	pop	{r4, r5, pc}
 8001826:	bf00      	nop
 8001828:	40012400 	.word	0x40012400
 800182c:	40010c00 	.word	0x40010c00

08001830 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001830:	4b09      	ldr	r3, [pc, #36]	; (8001858 <HAL_CRC_MspInit+0x28>)
 8001832:	6802      	ldr	r2, [r0, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d000      	beq.n	800183a <HAL_CRC_MspInit+0xa>
 8001838:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800183a:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 800183e:	695a      	ldr	r2, [r3, #20]
{
 8001840:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 8001842:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001846:	615a      	str	r2, [r3, #20]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800184e:	9301      	str	r3, [sp, #4]
 8001850:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001852:	b002      	add	sp, #8
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	40023000 	.word	0x40023000

0800185c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800185c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185e:	2400      	movs	r4, #0
  if(hspi->Instance==SPI1)
 8001860:	4b20      	ldr	r3, [pc, #128]	; (80018e4 <HAL_SPI_MspInit+0x88>)
 8001862:	6802      	ldr	r2, [r0, #0]
{
 8001864:	b086      	sub	sp, #24
  if(hspi->Instance==SPI1)
 8001866:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800186c:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(hspi->Instance==SPI1)
 8001870:	d001      	beq.n	8001876 <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001872:	b006      	add	sp, #24
 8001874:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001876:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 800187a:	699a      	ldr	r2, [r3, #24]
 800187c:	4605      	mov	r5, r0
 800187e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001882:	619a      	str	r2, [r3, #24]
 8001884:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001886:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001888:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800188c:	9200      	str	r2, [sp, #0]
 800188e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001890:	699a      	ldr	r2, [r3, #24]
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001892:	4e15      	ldr	r6, [pc, #84]	; (80018e8 <HAL_SPI_MspInit+0x8c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001894:	f042 0204 	orr.w	r2, r2, #4
 8001898:	619a      	str	r2, [r3, #24]
 800189a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800189c:	22a0      	movs	r2, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189e:	f003 0304 	and.w	r3, r3, #4
 80018a2:	9301      	str	r3, [sp, #4]
 80018a4:	9801      	ldr	r0, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018a6:	2003      	movs	r0, #3
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80018a8:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018aa:	9005      	str	r0, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ac:	480f      	ldr	r0, [pc, #60]	; (80018ec <HAL_SPI_MspInit+0x90>)
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80018ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b2:	f7fe ffbf 	bl	8000834 <HAL_GPIO_Init>
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018b6:	2380      	movs	r3, #128	; 0x80
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018b8:	2210      	movs	r2, #16
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018ba:	60f3      	str	r3, [r6, #12]
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <HAL_SPI_MspInit+0x94>)
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80018be:	4630      	mov	r0, r6
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018c0:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018c4:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018c8:	60b4      	str	r4, [r6, #8]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018ca:	6072      	str	r2, [r6, #4]
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80018cc:	6033      	str	r3, [r6, #0]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80018ce:	f7fe feeb 	bl	80006a8 <HAL_DMA_Init>
 80018d2:	b918      	cbnz	r0, 80018dc <HAL_SPI_MspInit+0x80>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80018d4:	64ae      	str	r6, [r5, #72]	; 0x48
 80018d6:	6275      	str	r5, [r6, #36]	; 0x24
}
 80018d8:	b006      	add	sp, #24
 80018da:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80018dc:	f7ff ff4c 	bl	8001778 <Error_Handler>
 80018e0:	e7f8      	b.n	80018d4 <HAL_SPI_MspInit+0x78>
 80018e2:	bf00      	nop
 80018e4:	40013000 	.word	0x40013000
 80018e8:	20000064 	.word	0x20000064
 80018ec:	40010800 	.word	0x40010800
 80018f0:	40020030 	.word	0x40020030

080018f4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM4)
 80018f4:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <HAL_TIM_Base_MspInit+0x3c>)
 80018f6:	6802      	ldr	r2, [r0, #0]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d000      	beq.n	80018fe <HAL_TIM_Base_MspInit+0xa>
 80018fc:	4770      	bx	lr

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80018fe:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001900:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001904:	69d9      	ldr	r1, [r3, #28]
{
 8001906:	b500      	push	{lr}
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001908:	f041 0104 	orr.w	r1, r1, #4
 800190c:	61d9      	str	r1, [r3, #28]
 800190e:	69db      	ldr	r3, [r3, #28]
{
 8001910:	b083      	sub	sp, #12
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001912:	f003 0304 	and.w	r3, r3, #4
 8001916:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001918:	201e      	movs	r0, #30
 800191a:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 800191c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800191e:	f7fe fe4b 	bl	80005b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001922:	201e      	movs	r0, #30
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001924:	b003      	add	sp, #12
 8001926:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800192a:	f7fe be83 	b.w	8000634 <HAL_NVIC_EnableIRQ>
 800192e:	bf00      	nop
 8001930:	40000800 	.word	0x40000800

08001934 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001934:	e7fe      	b.n	8001934 <NMI_Handler>
 8001936:	bf00      	nop

08001938 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001938:	e7fe      	b.n	8001938 <HardFault_Handler>
 800193a:	bf00      	nop

0800193c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800193c:	e7fe      	b.n	800193c <MemManage_Handler>
 800193e:	bf00      	nop

08001940 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001940:	e7fe      	b.n	8001940 <BusFault_Handler>
 8001942:	bf00      	nop

08001944 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <UsageFault_Handler>
 8001946:	bf00      	nop

08001948 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop

0800194c <DebugMon_Handler>:
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop

08001950 <PendSV_Handler>:
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop

08001954 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001954:	f7fe bc30 	b.w	80001b8 <HAL_IncTick>

08001958 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001958:	4801      	ldr	r0, [pc, #4]	; (8001960 <DMA1_Channel3_IRQHandler+0x8>)
 800195a:	f7fe bed7 	b.w	800070c <HAL_DMA_IRQHandler>
 800195e:	bf00      	nop
 8001960:	20000064 	.word	0x20000064

08001964 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001964:	4801      	ldr	r0, [pc, #4]	; (800196c <ADC1_2_IRQHandler+0x8>)
 8001966:	f7fe bcfd 	b.w	8000364 <HAL_ADC_IRQHandler>
 800196a:	bf00      	nop
 800196c:	2000002c 	.word	0x2000002c

08001970 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001970:	4801      	ldr	r0, [pc, #4]	; (8001978 <TIM4_IRQHandler+0x8>)
 8001972:	f7ff bd2b 	b.w	80013cc <HAL_TIM_IRQHandler>
 8001976:	bf00      	nop
 8001978:	20000100 	.word	0x20000100

0800197c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop

08001980 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001980:	480c      	ldr	r0, [pc, #48]	; (80019b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001982:	490d      	ldr	r1, [pc, #52]	; (80019b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001984:	4a0d      	ldr	r2, [pc, #52]	; (80019bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001988:	e002      	b.n	8001990 <LoopCopyDataInit>

0800198a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800198a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800198c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800198e:	3304      	adds	r3, #4

08001990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001994:	d3f9      	bcc.n	800198a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001996:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001998:	4c0a      	ldr	r4, [pc, #40]	; (80019c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800199a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800199c:	e001      	b.n	80019a2 <LoopFillZerobss>

0800199e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800199e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a0:	3204      	adds	r2, #4

080019a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a4:	d3fb      	bcc.n	800199e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019a6:	f7ff ffe9 	bl	800197c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019aa:	f000 f80f 	bl	80019cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019ae:	f7ff fe2f 	bl	8001610 <main>
  bx lr
 80019b2:	4770      	bx	lr
  ldr r0, =_sdata
 80019b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80019bc:	08001a58 	.word	0x08001a58
  ldr r2, =_sbss
 80019c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80019c4:	20000148 	.word	0x20000148

080019c8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019c8:	e7fe      	b.n	80019c8 <CAN1_RX1_IRQHandler>
	...

080019cc <__libc_init_array>:
 80019cc:	b570      	push	{r4, r5, r6, lr}
 80019ce:	2600      	movs	r6, #0
 80019d0:	4d0c      	ldr	r5, [pc, #48]	; (8001a04 <__libc_init_array+0x38>)
 80019d2:	4c0d      	ldr	r4, [pc, #52]	; (8001a08 <__libc_init_array+0x3c>)
 80019d4:	1b64      	subs	r4, r4, r5
 80019d6:	10a4      	asrs	r4, r4, #2
 80019d8:	42a6      	cmp	r6, r4
 80019da:	d109      	bne.n	80019f0 <__libc_init_array+0x24>
 80019dc:	f000 f81a 	bl	8001a14 <_init>
 80019e0:	2600      	movs	r6, #0
 80019e2:	4d0a      	ldr	r5, [pc, #40]	; (8001a0c <__libc_init_array+0x40>)
 80019e4:	4c0a      	ldr	r4, [pc, #40]	; (8001a10 <__libc_init_array+0x44>)
 80019e6:	1b64      	subs	r4, r4, r5
 80019e8:	10a4      	asrs	r4, r4, #2
 80019ea:	42a6      	cmp	r6, r4
 80019ec:	d105      	bne.n	80019fa <__libc_init_array+0x2e>
 80019ee:	bd70      	pop	{r4, r5, r6, pc}
 80019f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80019f4:	4798      	blx	r3
 80019f6:	3601      	adds	r6, #1
 80019f8:	e7ee      	b.n	80019d8 <__libc_init_array+0xc>
 80019fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80019fe:	4798      	blx	r3
 8001a00:	3601      	adds	r6, #1
 8001a02:	e7f2      	b.n	80019ea <__libc_init_array+0x1e>
 8001a04:	08001a50 	.word	0x08001a50
 8001a08:	08001a50 	.word	0x08001a50
 8001a0c:	08001a50 	.word	0x08001a50
 8001a10:	08001a54 	.word	0x08001a54

08001a14 <_init>:
 8001a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a16:	bf00      	nop
 8001a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a1a:	bc08      	pop	{r3}
 8001a1c:	469e      	mov	lr, r3
 8001a1e:	4770      	bx	lr

08001a20 <_fini>:
 8001a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a22:	bf00      	nop
 8001a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a26:	bc08      	pop	{r3}
 8001a28:	469e      	mov	lr, r3
 8001a2a:	4770      	bx	lr
