
Garland_C6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003660  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  0800376c  0800376c  0001376c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003890  08003890  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08003890  08003890  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003890  08003890  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003890  08003890  00013890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003894  08003894  00013894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08003898  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000210c  2000006c  08003904  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20002178  08003904  00022178  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   000126b1  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031f7  00000000  00000000  00032789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000a139  00000000  00000000  00035980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c48  00000000  00000000  0003fac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001256  00000000  00000000  00040708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013af9  00000000  00000000  0004195e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000430d  00000000  00000000  00055457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000033d4  00000000  00000000  00059764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0005cb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003754 	.word	0x08003754

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08003754 	.word	0x08003754

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000152:	4a0d      	ldr	r2, [pc, #52]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000154:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000156:	7811      	ldrb	r1, [r2, #0]
 8000158:	4a0c      	ldr	r2, [pc, #48]	; (800018c <HAL_InitTick+0x40>)
 800015a:	fbb3 f3f1 	udiv	r3, r3, r1
 800015e:	6812      	ldr	r2, [r2, #0]
 8000160:	fbb2 f0f3 	udiv	r0, r2, r3
 8000164:	f000 fb24 	bl	80007b0 <HAL_SYSTICK_Config>
 8000168:	b908      	cbnz	r0, 800016e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016a:	2d0f      	cmp	r5, #15
 800016c:	d901      	bls.n	8000172 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800016e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000170:	bd38      	pop	{r3, r4, r5, pc}
 8000172:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000174:	4602      	mov	r2, r0
 8000176:	4629      	mov	r1, r5
 8000178:	f04f 30ff 	mov.w	r0, #4294967295
 800017c:	f000 facc 	bl	8000718 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <HAL_InitTick+0x44>)
 8000182:	4620      	mov	r0, r4
 8000184:	601d      	str	r5, [r3, #0]
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	2000000c 	.word	0x2000000c
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 faa7 	bl	80006f4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	200f      	movs	r0, #15
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f002 f87e 	bl	80022ac <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
}
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000088 	.word	0x20000088
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000088 	.word	0x20000088

080001dc <HAL_ADC_Init>:
  uint32_t tmp_cr1 = 0U;
  uint32_t tmp_cr2 = 0U;
  uint32_t tmp_sqr1 = 0U;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80001dc:	2800      	cmp	r0, #0
 80001de:	f000 808b 	beq.w	80002f8 <HAL_ADC_Init+0x11c>
{
 80001e2:	b538      	push	{r3, r4, r5, lr}
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80001e4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80001e6:	4604      	mov	r4, r0
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d06d      	beq.n	80002c8 <HAL_ADC_Init+0xec>
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80001ec:	6823      	ldr	r3, [r4, #0]
 80001ee:	689a      	ldr	r2, [r3, #8]
 80001f0:	07d1      	lsls	r1, r2, #31
 80001f2:	d442      	bmi.n	800027a <HAL_ADC_Init+0x9e>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80001f4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80001f6:	06d2      	lsls	r2, r2, #27
 80001f8:	d460      	bmi.n	80002bc <HAL_ADC_Init+0xe0>
    ADC_STATE_CLR_SET(hadc->State,
 80001fa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80001fc:	6861      	ldr	r1, [r4, #4]
 80001fe:	69e0      	ldr	r0, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000200:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000204:	7b25      	ldrb	r5, [r4, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8000206:	f022 0202 	bic.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800020a:	4301      	orrs	r1, r0
    ADC_STATE_CLR_SET(hadc->State,
 800020c:	f042 0202 	orr.w	r2, r2, #2
 8000210:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000212:	ea41 0245 	orr.w	r2, r1, r5, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000216:	68a1      	ldr	r1, [r4, #8]
 8000218:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800021c:	d05a      	beq.n	80002d4 <HAL_ADC_Init+0xf8>
 800021e:	f1a1 0001 	sub.w	r0, r1, #1
 8000222:	fab0 f080 	clz	r0, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000226:	f894 c014 	ldrb.w	ip, [r4, #20]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800022a:	0940      	lsrs	r0, r0, #5
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800022c:	f1bc 0f01 	cmp.w	ip, #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000230:	ea4f 2000 	mov.w	r0, r0, lsl #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000234:	d06c      	beq.n	8000310 <HAL_ADC_Init+0x134>
      MODIFY_REG(hadc->Instance->CR1,
 8000236:	685d      	ldr	r5, [r3, #4]
 8000238:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 800023c:	4328      	orrs	r0, r5
 800023e:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000240:	689d      	ldr	r5, [r3, #8]
 8000242:	4844      	ldr	r0, [pc, #272]	; (8000354 <HAL_ADC_Init+0x178>)
 8000244:	4028      	ands	r0, r5
 8000246:	4310      	orrs	r0, r2
 8000248:	6098      	str	r0, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800024a:	2901      	cmp	r1, #1
 800024c:	d050      	beq.n	80002f0 <HAL_ADC_Init+0x114>
  uint32_t tmp_sqr1 = 0U;
 800024e:	2000      	movs	r0, #0
    MODIFY_REG(hadc->Instance->SQR1,
 8000250:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000252:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 8000256:	4301      	orrs	r1, r0
 8000258:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800025a:	6899      	ldr	r1, [r3, #8]
 800025c:	4b3e      	ldr	r3, [pc, #248]	; (8000358 <HAL_ADC_Init+0x17c>)
 800025e:	400b      	ands	r3, r1
 8000260:	429a      	cmp	r2, r3
 8000262:	d04b      	beq.n	80002fc <HAL_ADC_Init+0x120>
      tmp_hal_status = HAL_ERROR;
 8000264:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8000266:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000268:	f023 0312 	bic.w	r3, r3, #18
 800026c:	f043 0310 	orr.w	r3, r3, #16
 8000270:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000272:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000274:	4303      	orrs	r3, r0
 8000276:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8000278:	bd38      	pop	{r3, r4, r5, pc}
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800027a:	689a      	ldr	r2, [r3, #8]
 800027c:	f022 0201 	bic.w	r2, r2, #1
 8000280:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000282:	f7ff ffa5 	bl	80001d0 <HAL_GetTick>
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000286:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8000288:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800028a:	689a      	ldr	r2, [r3, #8]
 800028c:	07d2      	lsls	r2, r2, #31
 800028e:	d5b1      	bpl.n	80001f4 <HAL_ADC_Init+0x18>
 8000290:	e002      	b.n	8000298 <HAL_ADC_Init+0xbc>
 8000292:	689a      	ldr	r2, [r3, #8]
 8000294:	07d1      	lsls	r1, r2, #31
 8000296:	d5ad      	bpl.n	80001f4 <HAL_ADC_Init+0x18>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000298:	f7ff ff9a 	bl	80001d0 <HAL_GetTick>
 800029c:	1b40      	subs	r0, r0, r5
 800029e:	2802      	cmp	r0, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80002a0:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80002a2:	d9f6      	bls.n	8000292 <HAL_ADC_Init+0xb6>
        if(ADC_IS_ENABLE(hadc) != RESET)
 80002a4:	689a      	ldr	r2, [r3, #8]
 80002a6:	07d0      	lsls	r0, r2, #31
 80002a8:	d5f3      	bpl.n	8000292 <HAL_ADC_Init+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80002ac:	f043 0310 	orr.w	r3, r3, #16
 80002b0:	62a3      	str	r3, [r4, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80002b4:	f043 0301 	orr.w	r3, r3, #1
 80002b8:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80002ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 80002be:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002c0:	f043 0310 	orr.w	r3, r3, #16
 80002c4:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80002c6:	bd38      	pop	{r3, r4, r5, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 80002c8:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80002ca:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80002ce:	f002 f80f 	bl	80022f0 <HAL_ADC_MspInit>
 80002d2:	e78b      	b.n	80001ec <HAL_ADC_Init+0x10>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80002d4:	7d20      	ldrb	r0, [r4, #20]
 80002d6:	2801      	cmp	r0, #1
 80002d8:	d019      	beq.n	800030e <HAL_ADC_Init+0x132>
      MODIFY_REG(hadc->Instance->CR1,
 80002da:	6858      	ldr	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80002dc:	491d      	ldr	r1, [pc, #116]	; (8000354 <HAL_ADC_Init+0x178>)
      MODIFY_REG(hadc->Instance->CR1,
 80002de:	f420 4069 	bic.w	r0, r0, #59648	; 0xe900
 80002e2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80002e6:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80002e8:	6898      	ldr	r0, [r3, #8]
 80002ea:	4001      	ands	r1, r0
 80002ec:	4311      	orrs	r1, r2
 80002ee:	6099      	str	r1, [r3, #8]
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80002f0:	6920      	ldr	r0, [r4, #16]
 80002f2:	3801      	subs	r0, #1
 80002f4:	0500      	lsls	r0, r0, #20
 80002f6:	e7ab      	b.n	8000250 <HAL_ADC_Init+0x74>
    return HAL_ERROR;
 80002f8:	2001      	movs	r0, #1
}
 80002fa:	4770      	bx	lr
      ADC_CLEAR_ERRORCODE(hadc);
 80002fc:	2000      	movs	r0, #0
 80002fe:	62e0      	str	r0, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000300:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000302:	f023 0303 	bic.w	r3, r3, #3
 8000306:	f043 0301 	orr.w	r3, r3, #1
 800030a:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800030c:	bd38      	pop	{r3, r4, r5, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800030e:	4608      	mov	r0, r1
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000310:	b1c5      	cbz	r5, 8000344 <HAL_ADC_Init+0x168>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000312:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8000314:	f045 0520 	orr.w	r5, r5, #32
 8000318:	62a5      	str	r5, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800031a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800031c:	f045 0501 	orr.w	r5, r5, #1
 8000320:	62e5      	str	r5, [r4, #44]	; 0x2c
      MODIFY_REG(hadc->Instance->CR1,
 8000322:	685d      	ldr	r5, [r3, #4]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000324:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8000328:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 800032c:	ea40 0005 	orr.w	r0, r0, r5
 8000330:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000332:	689d      	ldr	r5, [r3, #8]
 8000334:	4807      	ldr	r0, [pc, #28]	; (8000354 <HAL_ADC_Init+0x178>)
 8000336:	ea00 0005 	and.w	r0, r0, r5
 800033a:	ea40 0002 	orr.w	r0, r0, r2
 800033e:	6098      	str	r0, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000340:	d183      	bne.n	800024a <HAL_ADC_Init+0x6e>
 8000342:	e7d5      	b.n	80002f0 <HAL_ADC_Init+0x114>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000344:	69a5      	ldr	r5, [r4, #24]
 8000346:	3d01      	subs	r5, #1
 8000348:	ea40 3045 	orr.w	r0, r0, r5, lsl #13
 800034c:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8000350:	e7e7      	b.n	8000322 <HAL_ADC_Init+0x146>
 8000352:	bf00      	nop
 8000354:	ffe1f7fd 	.word	0xffe1f7fd
 8000358:	ff1f0efe 	.word	0xff1f0efe

0800035c <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 800035c:	6803      	ldr	r3, [r0, #0]
 800035e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop

08000364 <HAL_ADC_LevelOutOfWindowCallback>:
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop

08000368 <HAL_ADC_IRQHandler>:
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000368:	6803      	ldr	r3, [r0, #0]
{
 800036a:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800036c:	685a      	ldr	r2, [r3, #4]
{
 800036e:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000370:	0690      	lsls	r0, r2, #26
 8000372:	d502      	bpl.n	800037a <HAL_ADC_IRQHandler+0x12>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000374:	681a      	ldr	r2, [r3, #0]
 8000376:	0791      	lsls	r1, r2, #30
 8000378:	d42a      	bmi.n	80003d0 <HAL_ADC_IRQHandler+0x68>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800037a:	685a      	ldr	r2, [r3, #4]
 800037c:	0610      	lsls	r0, r2, #24
 800037e:	d502      	bpl.n	8000386 <HAL_ADC_IRQHandler+0x1e>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000380:	681a      	ldr	r2, [r3, #0]
 8000382:	0751      	lsls	r1, r2, #29
 8000384:	d406      	bmi.n	8000394 <HAL_ADC_IRQHandler+0x2c>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000386:	685a      	ldr	r2, [r3, #4]
 8000388:	0652      	lsls	r2, r2, #25
 800038a:	d502      	bpl.n	8000392 <HAL_ADC_IRQHandler+0x2a>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	07db      	lsls	r3, r3, #31
 8000390:	d433      	bmi.n	80003fa <HAL_ADC_IRQHandler+0x92>
}
 8000392:	bd10      	pop	{r4, pc}
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000394:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000396:	06d2      	lsls	r2, r2, #27
 8000398:	d403      	bmi.n	80003a2 <HAL_ADC_IRQHandler+0x3a>
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800039a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800039c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80003a0:	62a2      	str	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80003a2:	689a      	ldr	r2, [r3, #8]
 80003a4:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 80003a8:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 80003ac:	d034      	beq.n	8000418 <HAL_ADC_IRQHandler+0xb0>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80003ae:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80003b0:	0550      	lsls	r0, r2, #21
 80003b2:	d405      	bmi.n	80003c0 <HAL_ADC_IRQHandler+0x58>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80003b4:	689a      	ldr	r2, [r3, #8]
 80003b6:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80003ba:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80003be:	d028      	beq.n	8000412 <HAL_ADC_IRQHandler+0xaa>
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80003c0:	4620      	mov	r0, r4
 80003c2:	f000 f995 	bl	80006f0 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80003c6:	f06f 020c 	mvn.w	r2, #12
 80003ca:	6823      	ldr	r3, [r4, #0]
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	e7da      	b.n	8000386 <HAL_ADC_IRQHandler+0x1e>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80003d0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80003d2:	06d2      	lsls	r2, r2, #27
 80003d4:	d403      	bmi.n	80003de <HAL_ADC_IRQHandler+0x76>
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80003d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80003d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80003dc:	62a2      	str	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80003de:	689a      	ldr	r2, [r3, #8]
 80003e0:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80003e4:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80003e8:	d026      	beq.n	8000438 <HAL_ADC_IRQHandler+0xd0>
      HAL_ADC_ConvCpltCallback(hadc);
 80003ea:	4620      	mov	r0, r4
 80003ec:	f001 faec 	bl	80019c8 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80003f0:	f06f 0212 	mvn.w	r2, #18
 80003f4:	6823      	ldr	r3, [r4, #0]
 80003f6:	601a      	str	r2, [r3, #0]
 80003f8:	e7bf      	b.n	800037a <HAL_ADC_IRQHandler+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80003fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80003fc:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80003fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000402:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000404:	f7ff ffae 	bl	8000364 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000408:	f06f 0201 	mvn.w	r2, #1
 800040c:	6823      	ldr	r3, [r4, #0]
 800040e:	601a      	str	r2, [r3, #0]
}
 8000410:	bd10      	pop	{r4, pc}
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000412:	7b22      	ldrb	r2, [r4, #12]
 8000414:	2a00      	cmp	r2, #0
 8000416:	d1d3      	bne.n	80003c0 <HAL_ADC_IRQHandler+0x58>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000418:	685a      	ldr	r2, [r3, #4]
 800041a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800041e:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000420:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000422:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000426:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000428:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800042a:	05d9      	lsls	r1, r3, #23
 800042c:	d4c8      	bmi.n	80003c0 <HAL_ADC_IRQHandler+0x58>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800042e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000430:	f043 0301 	orr.w	r3, r3, #1
 8000434:	62a3      	str	r3, [r4, #40]	; 0x28
 8000436:	e7c3      	b.n	80003c0 <HAL_ADC_IRQHandler+0x58>
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000438:	7b22      	ldrb	r2, [r4, #12]
 800043a:	2a00      	cmp	r2, #0
 800043c:	d1d5      	bne.n	80003ea <HAL_ADC_IRQHandler+0x82>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800043e:	685a      	ldr	r2, [r3, #4]
 8000440:	f022 0220 	bic.w	r2, r2, #32
 8000444:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000446:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000448:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800044c:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800044e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000450:	04db      	lsls	r3, r3, #19
 8000452:	d4ca      	bmi.n	80003ea <HAL_ADC_IRQHandler+0x82>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000454:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000456:	f043 0301 	orr.w	r3, r3, #1
 800045a:	62a3      	str	r3, [r4, #40]	; 0x28
 800045c:	e7c5      	b.n	80003ea <HAL_ADC_IRQHandler+0x82>
 800045e:	bf00      	nop

08000460 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8000460:	2300      	movs	r3, #0
{ 
 8000462:	b530      	push	{r4, r5, lr}
 8000464:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8000466:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000468:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800046c:	2b01      	cmp	r3, #1
 800046e:	d074      	beq.n	800055a <HAL_ADC_ConfigChannel+0xfa>
 8000470:	2301      	movs	r3, #1
 8000472:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000476:	684b      	ldr	r3, [r1, #4]
 8000478:	4602      	mov	r2, r0
 800047a:	2b06      	cmp	r3, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800047c:	6804      	ldr	r4, [r0, #0]
  if (sConfig->Rank < 7U)
 800047e:	d932      	bls.n	80004e6 <HAL_ADC_ConfigChannel+0x86>
  else if (sConfig->Rank < 13U)
 8000480:	2b0c      	cmp	r3, #12
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000482:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 13U)
 8000486:	d84e      	bhi.n	8000526 <HAL_ADC_ConfigChannel+0xc6>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000488:	f04f 0c1f 	mov.w	ip, #31
 800048c:	6808      	ldr	r0, [r1, #0]
 800048e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8000490:	3b23      	subs	r3, #35	; 0x23
 8000492:	fa00 fe03 	lsl.w	lr, r0, r3
 8000496:	fa0c f303 	lsl.w	r3, ip, r3
 800049a:	ea25 0303 	bic.w	r3, r5, r3
 800049e:	ea43 030e 	orr.w	r3, r3, lr
 80004a2:	6323      	str	r3, [r4, #48]	; 0x30
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80004a4:	2809      	cmp	r0, #9
 80004a6:	d930      	bls.n	800050a <HAL_ADC_ConfigChannel+0xaa>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80004a8:	f04f 0c07 	mov.w	ip, #7
 80004ac:	688d      	ldr	r5, [r1, #8]
 80004ae:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 80004b2:	68e3      	ldr	r3, [r4, #12]
 80004b4:	391e      	subs	r1, #30
 80004b6:	408d      	lsls	r5, r1
 80004b8:	fa0c f101 	lsl.w	r1, ip, r1
 80004bc:	ea23 0301 	bic.w	r3, r3, r1
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80004c0:	f1a0 0110 	sub.w	r1, r0, #16
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80004c4:	432b      	orrs	r3, r5
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80004c6:	2901      	cmp	r1, #1
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80004c8:	60e3      	str	r3, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80004ca:	d844      	bhi.n	8000556 <HAL_ADC_ConfigChannel+0xf6>
    if (hadc->Instance == ADC1)
 80004cc:	4b2e      	ldr	r3, [pc, #184]	; (8000588 <HAL_ADC_ConfigChannel+0x128>)
 80004ce:	429c      	cmp	r4, r3
 80004d0:	d038      	beq.n	8000544 <HAL_ADC_ConfigChannel+0xe4>
      tmp_hal_status = HAL_ERROR;
 80004d2:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80004d4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80004d6:	f043 0320 	orr.w	r3, r3, #32
 80004da:	6293      	str	r3, [r2, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 80004dc:	2300      	movs	r3, #0
 80004de:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
}
 80004e2:	b003      	add	sp, #12
 80004e4:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80004e6:	f04f 0c1f 	mov.w	ip, #31
 80004ea:	6808      	ldr	r0, [r1, #0]
 80004ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80004f0:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80004f2:	3b05      	subs	r3, #5
 80004f4:	fa00 fe03 	lsl.w	lr, r0, r3
 80004f8:	fa0c f303 	lsl.w	r3, ip, r3
 80004fc:	ea25 0303 	bic.w	r3, r5, r3
 8000500:	ea43 030e 	orr.w	r3, r3, lr
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000504:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000506:	6363      	str	r3, [r4, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000508:	d8ce      	bhi.n	80004a8 <HAL_ADC_ConfigChannel+0x48>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800050a:	2507      	movs	r5, #7
 800050c:	6889      	ldr	r1, [r1, #8]
 800050e:	6923      	ldr	r3, [r4, #16]
 8000510:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000514:	4081      	lsls	r1, r0
 8000516:	fa05 f000 	lsl.w	r0, r5, r0
 800051a:	ea23 0300 	bic.w	r3, r3, r0
 800051e:	430b      	orrs	r3, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000520:	2000      	movs	r0, #0
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000522:	6123      	str	r3, [r4, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000524:	e7da      	b.n	80004dc <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000526:	f04f 0c1f 	mov.w	ip, #31
 800052a:	6808      	ldr	r0, [r1, #0]
 800052c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800052e:	3b41      	subs	r3, #65	; 0x41
 8000530:	fa00 fe03 	lsl.w	lr, r0, r3
 8000534:	fa0c f303 	lsl.w	r3, ip, r3
 8000538:	ea25 0303 	bic.w	r3, r5, r3
 800053c:	ea43 030e 	orr.w	r3, r3, lr
 8000540:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000542:	e7af      	b.n	80004a4 <HAL_ADC_ConfigChannel+0x44>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000544:	68a3      	ldr	r3, [r4, #8]
 8000546:	021b      	lsls	r3, r3, #8
 8000548:	d405      	bmi.n	8000556 <HAL_ADC_ConfigChannel+0xf6>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800054a:	68a3      	ldr	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800054c:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800054e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000552:	60a3      	str	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000554:	d004      	beq.n	8000560 <HAL_ADC_ConfigChannel+0x100>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000556:	2000      	movs	r0, #0
 8000558:	e7c0      	b.n	80004dc <HAL_ADC_ConfigChannel+0x7c>
  __HAL_LOCK(hadc);
 800055a:	2002      	movs	r0, #2
}
 800055c:	b003      	add	sp, #12
 800055e:	bd30      	pop	{r4, r5, pc}
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000560:	4b0a      	ldr	r3, [pc, #40]	; (800058c <HAL_ADC_ConfigChannel+0x12c>)
 8000562:	490b      	ldr	r1, [pc, #44]	; (8000590 <HAL_ADC_ConfigChannel+0x130>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	fba1 1303 	umull	r1, r3, r1, r3
 800056a:	0c9b      	lsrs	r3, r3, #18
 800056c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000574:	9b01      	ldr	r3, [sp, #4]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d0ed      	beq.n	8000556 <HAL_ADC_ConfigChannel+0xf6>
            wait_loop_index--;
 800057a:	9b01      	ldr	r3, [sp, #4]
 800057c:	3b01      	subs	r3, #1
 800057e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000580:	9b01      	ldr	r3, [sp, #4]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d1f9      	bne.n	800057a <HAL_ADC_ConfigChannel+0x11a>
 8000586:	e7e6      	b.n	8000556 <HAL_ADC_ConfigChannel+0xf6>
 8000588:	40012400 	.word	0x40012400
 800058c:	2000000c 	.word	0x2000000c
 8000590:	431bde83 	.word	0x431bde83

08000594 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8000594:	2300      	movs	r3, #0
{
 8000596:	b530      	push	{r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000598:	6802      	ldr	r2, [r0, #0]
{
 800059a:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 800059c:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800059e:	6893      	ldr	r3, [r2, #8]
 80005a0:	07d9      	lsls	r1, r3, #31
 80005a2:	d427      	bmi.n	80005f4 <ADC_Enable+0x60>
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80005a4:	4b1b      	ldr	r3, [pc, #108]	; (8000614 <ADC_Enable+0x80>)
 80005a6:	4604      	mov	r4, r0
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	481b      	ldr	r0, [pc, #108]	; (8000618 <ADC_Enable+0x84>)
    __HAL_ADC_ENABLE(hadc);
 80005ac:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80005ae:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 80005b2:	f041 0101 	orr.w	r1, r1, #1
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80005b6:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 80005b8:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80005ba:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80005bc:	9b01      	ldr	r3, [sp, #4]
 80005be:	b12b      	cbz	r3, 80005cc <ADC_Enable+0x38>
      wait_loop_index--;
 80005c0:	9b01      	ldr	r3, [sp, #4]
 80005c2:	3b01      	subs	r3, #1
 80005c4:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80005c6:	9b01      	ldr	r3, [sp, #4]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d1f9      	bne.n	80005c0 <ADC_Enable+0x2c>
    tickstart = HAL_GetTick();
 80005cc:	f7ff fe00 	bl	80001d0 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80005d0:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80005d2:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80005d4:	689b      	ldr	r3, [r3, #8]
 80005d6:	07da      	lsls	r2, r3, #31
 80005d8:	d40c      	bmi.n	80005f4 <ADC_Enable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80005da:	f7ff fdf9 	bl	80001d0 <HAL_GetTick>
 80005de:	1b43      	subs	r3, r0, r5
 80005e0:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) == RESET)
 80005e2:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80005e4:	d903      	bls.n	80005ee <ADC_Enable+0x5a>
        if(ADC_IS_ENABLE(hadc) == RESET)
 80005e6:	689a      	ldr	r2, [r3, #8]
 80005e8:	f012 0201 	ands.w	r2, r2, #1
 80005ec:	d005      	beq.n	80005fa <ADC_Enable+0x66>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80005ee:	689b      	ldr	r3, [r3, #8]
 80005f0:	07db      	lsls	r3, r3, #31
 80005f2:	d5f2      	bpl.n	80005da <ADC_Enable+0x46>
  return HAL_OK;
 80005f4:	2000      	movs	r0, #0
}
 80005f6:	b003      	add	sp, #12
 80005f8:	bd30      	pop	{r4, r5, pc}
          __HAL_UNLOCK(hadc);
 80005fa:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80005fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 80005fe:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000602:	f043 0310 	orr.w	r3, r3, #16
 8000606:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000608:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800060a:	4303      	orrs	r3, r0
 800060c:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800060e:	b003      	add	sp, #12
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop
 8000614:	2000000c 	.word	0x2000000c
 8000618:	431bde83 	.word	0x431bde83

0800061c <HAL_ADC_Start_IT>:
  __HAL_LOCK(hadc);
 800061c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000620:	2b01      	cmp	r3, #1
 8000622:	d03d      	beq.n	80006a0 <HAL_ADC_Start_IT+0x84>
 8000624:	2301      	movs	r3, #1
{
 8000626:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8000628:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 800062c:	4604      	mov	r4, r0
 800062e:	f7ff ffb1 	bl	8000594 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8000632:	2800      	cmp	r0, #0
 8000634:	d130      	bne.n	8000698 <HAL_ADC_Start_IT+0x7c>
    ADC_STATE_CLR_SET(hadc->State,
 8000636:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000638:	6822      	ldr	r2, [r4, #0]
 800063a:	492b      	ldr	r1, [pc, #172]	; (80006e8 <HAL_ADC_Start_IT+0xcc>)
    ADC_STATE_CLR_SET(hadc->State,
 800063c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000640:	f023 0301 	bic.w	r3, r3, #1
 8000644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000648:	428a      	cmp	r2, r1
    ADC_STATE_CLR_SET(hadc->State,
 800064a:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800064c:	d02a      	beq.n	80006a4 <HAL_ADC_Start_IT+0x88>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800064e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000650:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000654:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000656:	6853      	ldr	r3, [r2, #4]
 8000658:	0559      	lsls	r1, r3, #21
 800065a:	d42f      	bmi.n	80006bc <HAL_ADC_Start_IT+0xa0>
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800065c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 800065e:	2100      	movs	r1, #0
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000660:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000664:	bf18      	it	ne
 8000666:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 8000668:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800066c:	bf18      	it	ne
 800066e:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000672:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000674:	f06f 0302 	mvn.w	r3, #2
 8000678:	6013      	str	r3, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800067a:	6853      	ldr	r3, [r2, #4]
 800067c:	f043 0320 	orr.w	r3, r3, #32
 8000680:	6053      	str	r3, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000682:	6893      	ldr	r3, [r2, #8]
 8000684:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000688:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800068c:	d01d      	beq.n	80006ca <HAL_ADC_Start_IT+0xae>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800068e:	6893      	ldr	r3, [r2, #8]
 8000690:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000694:	6093      	str	r3, [r2, #8]
}
 8000696:	bd10      	pop	{r4, pc}
    __HAL_UNLOCK(hadc);
 8000698:	2300      	movs	r3, #0
 800069a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 800069e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80006a0:	2002      	movs	r0, #2
}
 80006a2:	4770      	bx	lr
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <HAL_ADC_Start_IT+0xd0>)
 80006a6:	6859      	ldr	r1, [r3, #4]
 80006a8:	f411 2f70 	tst.w	r1, #983040	; 0xf0000
 80006ac:	d0cf      	beq.n	800064e <HAL_ADC_Start_IT+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80006ae:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80006b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b4:	62a1      	str	r1, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80006b6:	685b      	ldr	r3, [r3, #4]
 80006b8:	055b      	lsls	r3, r3, #21
 80006ba:	d5cf      	bpl.n	800065c <HAL_ADC_Start_IT+0x40>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80006bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80006be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80006c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006c6:	62a3      	str	r3, [r4, #40]	; 0x28
 80006c8:	e7c8      	b.n	800065c <HAL_ADC_Start_IT+0x40>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80006ca:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <HAL_ADC_Start_IT+0xcc>)
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d004      	beq.n	80006da <HAL_ADC_Start_IT+0xbe>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80006d0:	6893      	ldr	r3, [r2, #8]
 80006d2:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 80006d6:	6093      	str	r3, [r2, #8]
}
 80006d8:	bd10      	pop	{r4, pc}
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80006da:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80006de:	685b      	ldr	r3, [r3, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80006e0:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80006e4:	d1d3      	bne.n	800068e <HAL_ADC_Start_IT+0x72>
 80006e6:	e7f3      	b.n	80006d0 <HAL_ADC_Start_IT+0xb4>
 80006e8:	40012800 	.word	0x40012800
 80006ec:	40012400 	.word	0x40012400

080006f0 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop

080006f4 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006f4:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006f8:	4906      	ldr	r1, [pc, #24]	; (8000714 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006fa:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006fc:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000702:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000708:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800070c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000710:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000712:	4770      	bx	lr
 8000714:	e000ed00 	.word	0xe000ed00

08000718 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000718:	4b1c      	ldr	r3, [pc, #112]	; (800078c <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800071a:	b500      	push	{lr}
 800071c:	68db      	ldr	r3, [r3, #12]
 800071e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000722:	f1c3 0e07 	rsb	lr, r3, #7
 8000726:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800072a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800072e:	bf28      	it	cs
 8000730:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000734:	f1bc 0f06 	cmp.w	ip, #6
 8000738:	d91b      	bls.n	8000772 <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800073a:	f04f 3cff 	mov.w	ip, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800073e:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000740:	fa0c fc03 	lsl.w	ip, ip, r3
 8000744:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000748:	f04f 3cff 	mov.w	ip, #4294967295
 800074c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8000750:	ea21 010c 	bic.w	r1, r1, ip
 8000754:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000756:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000758:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800075c:	db0c      	blt.n	8000778 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075e:	0109      	lsls	r1, r1, #4
 8000760:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000764:	b2c9      	uxtb	r1, r1
 8000766:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800076a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800076e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000772:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000774:	4613      	mov	r3, r2
 8000776:	e7e7      	b.n	8000748 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <HAL_NVIC_SetPriority+0x78>)
 800077a:	f000 000f 	and.w	r0, r0, #15
 800077e:	0109      	lsls	r1, r1, #4
 8000780:	b2c9      	uxtb	r1, r1
 8000782:	4403      	add	r3, r0
 8000784:	7619      	strb	r1, [r3, #24]
 8000786:	f85d fb04 	ldr.w	pc, [sp], #4
 800078a:	bf00      	nop
 800078c:	e000ed00 	.word	0xe000ed00
 8000790:	e000ecfc 	.word	0xe000ecfc

08000794 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000794:	2800      	cmp	r0, #0
 8000796:	db07      	blt.n	80007a8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000798:	2301      	movs	r3, #1
 800079a:	f000 011f 	and.w	r1, r0, #31
 800079e:	4a03      	ldr	r2, [pc, #12]	; (80007ac <HAL_NVIC_EnableIRQ+0x18>)
 80007a0:	0940      	lsrs	r0, r0, #5
 80007a2:	408b      	lsls	r3, r1
 80007a4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	e000e100 	.word	0xe000e100

080007b0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007b0:	3801      	subs	r0, #1
 80007b2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80007b6:	d20f      	bcs.n	80007d8 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007b8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007bc:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007c0:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007c2:	2107      	movs	r1, #7
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007c4:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c6:	4c05      	ldr	r4, [pc, #20]	; (80007dc <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007c8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ca:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007ce:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007d0:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 80007d2:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007d4:	6119      	str	r1, [r3, #16]
 80007d6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80007d8:	2001      	movs	r0, #1
 80007da:	4770      	bx	lr
 80007dc:	e000ed00 	.word	0xe000ed00

080007e0 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80007e0:	b180      	cbz	r0, 8000804 <HAL_CRC_Init+0x24>
{
 80007e2:	b510      	push	{r4, lr}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80007e4:	7943      	ldrb	r3, [r0, #5]
 80007e6:	4604      	mov	r4, r0
 80007e8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80007ec:	b11b      	cbz	r3, 80007f6 <HAL_CRC_Init+0x16>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80007ee:	2301      	movs	r3, #1
 80007f0:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 80007f2:	2000      	movs	r0, #0
}
 80007f4:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 80007f6:	7102      	strb	r2, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 80007f8:	f001 fd9a 	bl	8002330 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_READY;
 80007fc:	2301      	movs	r3, #1
 80007fe:	7163      	strb	r3, [r4, #5]
  return HAL_OK;
 8000800:	2000      	movs	r0, #0
}
 8000802:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000804:	2001      	movs	r0, #1
}
 8000806:	4770      	bx	lr

08000808 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000808:	b340      	cbz	r0, 800085c <HAL_DMA_Init+0x54>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800080a:	4603      	mov	r3, r0
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800080c:	c805      	ldmia	r0, {r0, r2}
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800080e:	f44f 7c80 	mov.w	ip, #256	; 0x100
{
 8000812:	b430      	push	{r4, r5}
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000814:	2400      	movs	r4, #0
  tmp |=  hdma->Init.Direction        |
 8000816:	6899      	ldr	r1, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000818:	68dd      	ldr	r5, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800081a:	430a      	orrs	r2, r1
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800081c:	4910      	ldr	r1, [pc, #64]	; (8000860 <HAL_DMA_Init+0x58>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800081e:	432a      	orrs	r2, r5
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000820:	4d10      	ldr	r5, [pc, #64]	; (8000864 <HAL_DMA_Init+0x5c>)
 8000822:	4401      	add	r1, r0
 8000824:	fba5 5101 	umull	r5, r1, r5, r1
 8000828:	0909      	lsrs	r1, r1, #4
 800082a:	0089      	lsls	r1, r1, #2
 800082c:	6419      	str	r1, [r3, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800082e:	6919      	ldr	r1, [r3, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000830:	699d      	ldr	r5, [r3, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000832:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000834:	6959      	ldr	r1, [r3, #20]
 8000836:	430a      	orrs	r2, r1
  tmp = hdma->Instance->CCR;
 8000838:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800083a:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800083c:	69dd      	ldr	r5, [r3, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800083e:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
 8000842:	f021 0130 	bic.w	r1, r1, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 8000846:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Direction        |
 8000848:	430a      	orrs	r2, r1
  hdma->DmaBaseAddress = DMA1;
 800084a:	4907      	ldr	r1, [pc, #28]	; (8000868 <HAL_DMA_Init+0x60>)
 800084c:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 800084e:	6002      	str	r2, [r0, #0]
  hdma->Lock = HAL_UNLOCKED;
 8000850:	f8a3 c020 	strh.w	ip, [r3, #32]

  return HAL_OK;
 8000854:	4620      	mov	r0, r4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000856:	639c      	str	r4, [r3, #56]	; 0x38
}
 8000858:	bc30      	pop	{r4, r5}
 800085a:	4770      	bx	lr
    return HAL_ERROR;
 800085c:	2001      	movs	r0, #1
}
 800085e:	4770      	bx	lr
 8000860:	bffdfff8 	.word	0xbffdfff8
 8000864:	cccccccd 	.word	0xcccccccd
 8000868:	40020000 	.word	0x40020000

0800086c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800086c:	4684      	mov	ip, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800086e:	f890 0020 	ldrb.w	r0, [r0, #32]
 8000872:	2801      	cmp	r0, #1
 8000874:	d03f      	beq.n	80008f6 <HAL_DMA_Start_IT+0x8a>
{
 8000876:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma);
 8000878:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800087a:	f89c 0021 	ldrb.w	r0, [ip, #33]	; 0x21
  __HAL_LOCK(hdma);
 800087e:	f88c 4020 	strb.w	r4, [ip, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000882:	42a0      	cmp	r0, r4
 8000884:	d005      	beq.n	8000892 <HAL_DMA_Start_IT+0x26>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000886:	2300      	movs	r3, #0
 8000888:	f88c 3020 	strb.w	r3, [ip, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800088c:	2002      	movs	r0, #2
  }    
  return status;
}
 800088e:	bc30      	pop	{r4, r5}
 8000890:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8000892:	2402      	movs	r4, #2
 8000894:	f88c 4021 	strb.w	r4, [ip, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000898:	2400      	movs	r4, #0
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800089a:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800089e:	f8cc 4038 	str.w	r4, [ip, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 80008a2:	f8dc 4000 	ldr.w	r4, [ip]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80008a6:	40a8      	lsls	r0, r5
    __HAL_DMA_DISABLE(hdma);
 80008a8:	6825      	ldr	r5, [r4, #0]
 80008aa:	f025 0501 	bic.w	r5, r5, #1
 80008ae:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80008b0:	f8dc 503c 	ldr.w	r5, [ip, #60]	; 0x3c
 80008b4:	6068      	str	r0, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80008b6:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80008b8:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80008bc:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 80008be:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80008c2:	bf0b      	itete	eq
 80008c4:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80008c6:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80008c8:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80008ca:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 80008cc:	b153      	cbz	r3, 80008e4 <HAL_DMA_Start_IT+0x78>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80008ce:	6823      	ldr	r3, [r4, #0]
 80008d0:	f043 030e 	orr.w	r3, r3, #14
 80008d4:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80008d6:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80008d8:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80008da:	f043 0301 	orr.w	r3, r3, #1
 80008de:	6023      	str	r3, [r4, #0]
}
 80008e0:	bc30      	pop	{r4, r5}
 80008e2:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80008e4:	6823      	ldr	r3, [r4, #0]
 80008e6:	f023 0304 	bic.w	r3, r3, #4
 80008ea:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80008ec:	6823      	ldr	r3, [r4, #0]
 80008ee:	f043 030a 	orr.w	r3, r3, #10
 80008f2:	6023      	str	r3, [r4, #0]
 80008f4:	e7ef      	b.n	80008d6 <HAL_DMA_Start_IT+0x6a>
  __HAL_LOCK(hdma);
 80008f6:	2002      	movs	r0, #2
}
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop

080008fc <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80008fc:	2204      	movs	r2, #4
{
 80008fe:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000900:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000902:	6c01      	ldr	r1, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000904:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000906:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000908:	408a      	lsls	r2, r1
 800090a:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 800090c:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800090e:	d01f      	beq.n	8000950 <HAL_DMA_IRQHandler+0x54>
 8000910:	076a      	lsls	r2, r5, #29
 8000912:	d51d      	bpl.n	8000950 <HAL_DMA_IRQHandler+0x54>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	0691      	lsls	r1, r2, #26
 8000918:	d403      	bmi.n	8000922 <HAL_DMA_IRQHandler+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	f022 0204 	bic.w	r2, r2, #4
 8000920:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000922:	4a3e      	ldr	r2, [pc, #248]	; (8000a1c <HAL_DMA_IRQHandler+0x120>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d05a      	beq.n	80009de <HAL_DMA_IRQHandler+0xe2>
 8000928:	3214      	adds	r2, #20
 800092a:	4293      	cmp	r3, r2
 800092c:	d05f      	beq.n	80009ee <HAL_DMA_IRQHandler+0xf2>
 800092e:	3214      	adds	r2, #20
 8000930:	4293      	cmp	r3, r2
 8000932:	d066      	beq.n	8000a02 <HAL_DMA_IRQHandler+0x106>
 8000934:	3214      	adds	r2, #20
 8000936:	4293      	cmp	r3, r2
 8000938:	d069      	beq.n	8000a0e <HAL_DMA_IRQHandler+0x112>
 800093a:	3214      	adds	r2, #20
 800093c:	4293      	cmp	r3, r2
 800093e:	d05b      	beq.n	80009f8 <HAL_DMA_IRQHandler+0xfc>
 8000940:	3214      	adds	r2, #20
 8000942:	4293      	cmp	r3, r2
 8000944:	bf0c      	ite	eq
 8000946:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
 800094a:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 800094e:	e047      	b.n	80009e0 <HAL_DMA_IRQHandler+0xe4>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000950:	2202      	movs	r2, #2
 8000952:	408a      	lsls	r2, r1
 8000954:	4222      	tst	r2, r4
 8000956:	d022      	beq.n	800099e <HAL_DMA_IRQHandler+0xa2>
 8000958:	07aa      	lsls	r2, r5, #30
 800095a:	d520      	bpl.n	800099e <HAL_DMA_IRQHandler+0xa2>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	0691      	lsls	r1, r2, #26
 8000960:	d406      	bmi.n	8000970 <HAL_DMA_IRQHandler+0x74>
      hdma->State = HAL_DMA_STATE_READY;
 8000962:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	f022 020a 	bic.w	r2, r2, #10
 800096a:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800096c:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000970:	4a2a      	ldr	r2, [pc, #168]	; (8000a1c <HAL_DMA_IRQHandler+0x120>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d029      	beq.n	80009ca <HAL_DMA_IRQHandler+0xce>
 8000976:	3214      	adds	r2, #20
 8000978:	4293      	cmp	r3, r2
 800097a:	d040      	beq.n	80009fe <HAL_DMA_IRQHandler+0x102>
 800097c:	3214      	adds	r2, #20
 800097e:	4293      	cmp	r3, r2
 8000980:	d042      	beq.n	8000a08 <HAL_DMA_IRQHandler+0x10c>
 8000982:	3214      	adds	r2, #20
 8000984:	4293      	cmp	r3, r2
 8000986:	d034      	beq.n	80009f2 <HAL_DMA_IRQHandler+0xf6>
 8000988:	3214      	adds	r2, #20
 800098a:	4293      	cmp	r3, r2
 800098c:	d042      	beq.n	8000a14 <HAL_DMA_IRQHandler+0x118>
 800098e:	3214      	adds	r2, #20
 8000990:	4293      	cmp	r3, r2
 8000992:	bf0c      	ite	eq
 8000994:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8000998:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 800099c:	e016      	b.n	80009cc <HAL_DMA_IRQHandler+0xd0>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800099e:	2208      	movs	r2, #8
 80009a0:	408a      	lsls	r2, r1
 80009a2:	4222      	tst	r2, r4
 80009a4:	d019      	beq.n	80009da <HAL_DMA_IRQHandler+0xde>
 80009a6:	072a      	lsls	r2, r5, #28
 80009a8:	d517      	bpl.n	80009da <HAL_DMA_IRQHandler+0xde>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009aa:	681a      	ldr	r2, [r3, #0]
    __HAL_UNLOCK(hdma);
 80009ac:	f44f 7480 	mov.w	r4, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009b0:	f022 020e 	bic.w	r2, r2, #14
 80009b4:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80009b6:	2301      	movs	r3, #1
    if (hdma->XferErrorCallback != NULL)
 80009b8:	6b02      	ldr	r2, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80009ba:	fa03 f101 	lsl.w	r1, r3, r1
 80009be:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80009c0:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80009c2:	8404      	strh	r4, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80009c4:	b14a      	cbz	r2, 80009da <HAL_DMA_IRQHandler+0xde>
}
 80009c6:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80009c8:	4710      	bx	r2
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80009ca:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 80009cc:	2100      	movs	r1, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80009ce:	4c14      	ldr	r4, [pc, #80]	; (8000a20 <HAL_DMA_IRQHandler+0x124>)
    if(hdma->XferCpltCallback != NULL)
 80009d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80009d2:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 80009d4:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80009d8:	b93b      	cbnz	r3, 80009ea <HAL_DMA_IRQHandler+0xee>
}
 80009da:	bc70      	pop	{r4, r5, r6}
 80009dc:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80009de:	2204      	movs	r2, #4
 80009e0:	490f      	ldr	r1, [pc, #60]	; (8000a20 <HAL_DMA_IRQHandler+0x124>)
    if(hdma->XferHalfCpltCallback != NULL)
 80009e2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80009e4:	604a      	str	r2, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d0f7      	beq.n	80009da <HAL_DMA_IRQHandler+0xde>
}
 80009ea:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 80009ec:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80009ee:	2240      	movs	r2, #64	; 0x40
 80009f0:	e7f6      	b.n	80009e0 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80009f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009f6:	e7e9      	b.n	80009cc <HAL_DMA_IRQHandler+0xd0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80009f8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80009fc:	e7f0      	b.n	80009e0 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80009fe:	2220      	movs	r2, #32
 8000a00:	e7e4      	b.n	80009cc <HAL_DMA_IRQHandler+0xd0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000a02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a06:	e7eb      	b.n	80009e0 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000a08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a0c:	e7de      	b.n	80009cc <HAL_DMA_IRQHandler+0xd0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000a0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a12:	e7e5      	b.n	80009e0 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000a14:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a18:	e7d8      	b.n	80009cc <HAL_DMA_IRQHandler+0xd0>
 8000a1a:	bf00      	nop
 8000a1c:	40020008 	.word	0x40020008
 8000a20:	40020000 	.word	0x40020000

08000a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a28:	680e      	ldr	r6, [r1, #0]
{
 8000a2a:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a2c:	2e00      	cmp	r6, #0
 8000a2e:	f000 80b1 	beq.w	8000b94 <HAL_GPIO_Init+0x170>
 8000a32:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a34:	4f74      	ldr	r7, [pc, #464]	; (8000c08 <HAL_GPIO_Init+0x1e4>)
  uint32_t config = 0x00u;
 8000a36:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 8000a38:	4613      	mov	r3, r2
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a3a:	4d74      	ldr	r5, [pc, #464]	; (8000c0c <HAL_GPIO_Init+0x1e8>)
      switch (GPIO_Init->Mode)
 8000a3c:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8000c10 <HAL_GPIO_Init+0x1ec>
 8000a40:	e006      	b.n	8000a50 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 8000a42:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a44:	fa36 f403 	lsrs.w	r4, r6, r3
 8000a48:	f102 0204 	add.w	r2, r2, #4
 8000a4c:	f000 80a2 	beq.w	8000b94 <HAL_GPIO_Init+0x170>
    ioposition = (0x01uL << position);
 8000a50:	2401      	movs	r4, #1
 8000a52:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 8000a54:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a58:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 8000a5c:	d1f1      	bne.n	8000a42 <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 8000a5e:	684e      	ldr	r6, [r1, #4]
 8000a60:	2e12      	cmp	r6, #18
 8000a62:	f200 809a 	bhi.w	8000b9a <HAL_GPIO_Init+0x176>
 8000a66:	2e12      	cmp	r6, #18
 8000a68:	d81a      	bhi.n	8000aa0 <HAL_GPIO_Init+0x7c>
 8000a6a:	e8df f006 	tbb	[pc, r6]
 8000a6e:	b9a3      	.short	0xb9a3
 8000a70:	1919c3b5 	.word	0x1919c3b5
 8000a74:	19191919 	.word	0x19191919
 8000a78:	19191919 	.word	0x19191919
 8000a7c:	b1191919 	.word	0xb1191919
 8000a80:	ad          	.byte	0xad
 8000a81:	00          	.byte	0x00
 8000a82:	f8df e190 	ldr.w	lr, [pc, #400]	; 8000c14 <HAL_GPIO_Init+0x1f0>
 8000a86:	4576      	cmp	r6, lr
 8000a88:	f000 8094 	beq.w	8000bb4 <HAL_GPIO_Init+0x190>
 8000a8c:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 8000a90:	4576      	cmp	r6, lr
 8000a92:	f000 808f 	beq.w	8000bb4 <HAL_GPIO_Init+0x190>
 8000a96:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 8000a9a:	4576      	cmp	r6, lr
 8000a9c:	f000 808a 	beq.w	8000bb4 <HAL_GPIO_Init+0x190>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000aa0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8000aa4:	bf9c      	itt	ls
 8000aa6:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000aa8:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000aaa:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000aae:	bf84      	itt	hi
 8000ab0:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ab4:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ab8:	f8de 4000 	ldr.w	r4, [lr]
 8000abc:	fa0a f90b 	lsl.w	r9, sl, fp
 8000ac0:	fa06 fb0b 	lsl.w	fp, r6, fp
 8000ac4:	ea24 040b 	bic.w	r4, r4, fp
 8000ac8:	ea44 0409 	orr.w	r4, r4, r9
 8000acc:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ad0:	684c      	ldr	r4, [r1, #4]
 8000ad2:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8000ad6:	d075      	beq.n	8000bc4 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ad8:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000adc:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ae0:	f04e 0e01 	orr.w	lr, lr, #1
 8000ae4:	f8c7 e018 	str.w	lr, [r7, #24]
 8000ae8:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000aec:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000af0:	f00e 0e01 	and.w	lr, lr, #1
 8000af4:	f8cd e004 	str.w	lr, [sp, #4]
 8000af8:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000afc:	f023 0e03 	bic.w	lr, r3, #3
 8000b00:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8000b04:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8000b08:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b0c:	fa06 f609 	lsl.w	r6, r6, r9
 8000b10:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b14:	f8df b100 	ldr.w	fp, [pc, #256]	; 8000c18 <HAL_GPIO_Init+0x1f4>
 8000b18:	4558      	cmp	r0, fp
 8000b1a:	d00f      	beq.n	8000b3c <HAL_GPIO_Init+0x118>
 8000b1c:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 8000b20:	4558      	cmp	r0, fp
 8000b22:	d060      	beq.n	8000be6 <HAL_GPIO_Init+0x1c2>
 8000b24:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 8000c1c <HAL_GPIO_Init+0x1f8>
 8000b28:	4558      	cmp	r0, fp
 8000b2a:	bf0c      	ite	eq
 8000b2c:	f04f 0b02 	moveq.w	fp, #2
 8000b30:	f04f 0b03 	movne.w	fp, #3
 8000b34:	fa0b f909 	lsl.w	r9, fp, r9
 8000b38:	ea46 0609 	orr.w	r6, r6, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000b3c:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000b40:	682e      	ldr	r6, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b42:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000b46:	bf14      	ite	ne
 8000b48:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b4c:	ea26 060c 	biceq.w	r6, r6, ip
 8000b50:	602e      	str	r6, [r5, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000b52:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b54:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000b58:	bf14      	ite	ne
 8000b5a:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b5e:	ea26 060c 	biceq.w	r6, r6, ip
 8000b62:	606e      	str	r6, [r5, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b64:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b66:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b6a:	bf14      	ite	ne
 8000b6c:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b70:	ea26 060c 	biceq.w	r6, r6, ip
 8000b74:	60ae      	str	r6, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b76:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b7a:	68ec      	ldr	r4, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b7c:	d01f      	beq.n	8000bbe <HAL_GPIO_Init+0x19a>
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b7e:	ea44 040c 	orr.w	r4, r4, ip
 8000b82:	60ec      	str	r4, [r5, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b84:	680e      	ldr	r6, [r1, #0]
	position++;
 8000b86:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b88:	fa36 f403 	lsrs.w	r4, r6, r3
 8000b8c:	f102 0204 	add.w	r2, r2, #4
 8000b90:	f47f af5e 	bne.w	8000a50 <HAL_GPIO_Init+0x2c>
  }
}
 8000b94:	b003      	add	sp, #12
 8000b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000b9a:	4546      	cmp	r6, r8
 8000b9c:	d00a      	beq.n	8000bb4 <HAL_GPIO_Init+0x190>
 8000b9e:	f67f af70 	bls.w	8000a82 <HAL_GPIO_Init+0x5e>
 8000ba2:	f8df e07c 	ldr.w	lr, [pc, #124]	; 8000c20 <HAL_GPIO_Init+0x1fc>
 8000ba6:	4576      	cmp	r6, lr
 8000ba8:	d004      	beq.n	8000bb4 <HAL_GPIO_Init+0x190>
 8000baa:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8000bae:	4576      	cmp	r6, lr
 8000bb0:	f47f af76 	bne.w	8000aa0 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bb4:	688e      	ldr	r6, [r1, #8]
 8000bb6:	bb06      	cbnz	r6, 8000bfa <HAL_GPIO_Init+0x1d6>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bb8:	f04f 0a04 	mov.w	sl, #4
 8000bbc:	e770      	b.n	8000aa0 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bbe:	ea24 040c 	bic.w	r4, r4, ip
 8000bc2:	60ec      	str	r4, [r5, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bc4:	680e      	ldr	r6, [r1, #0]
 8000bc6:	e73c      	b.n	8000a42 <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bc8:	68cc      	ldr	r4, [r1, #12]
 8000bca:	f104 0a0c 	add.w	sl, r4, #12
          break;
 8000bce:	e767      	b.n	8000aa0 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bd0:	68cc      	ldr	r4, [r1, #12]
 8000bd2:	f104 0a04 	add.w	sl, r4, #4
          break;
 8000bd6:	e763      	b.n	8000aa0 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bd8:	68cc      	ldr	r4, [r1, #12]
 8000bda:	f104 0a08 	add.w	sl, r4, #8
          break;
 8000bde:	e75f      	b.n	8000aa0 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000be0:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 8000be4:	e75c      	b.n	8000aa0 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000be6:	f04f 0b01 	mov.w	fp, #1
 8000bea:	fa0b f909 	lsl.w	r9, fp, r9
 8000bee:	ea46 0609 	orr.w	r6, r6, r9
 8000bf2:	e7a3      	b.n	8000b3c <HAL_GPIO_Init+0x118>
      switch (GPIO_Init->Mode)
 8000bf4:	f04f 0a00 	mov.w	sl, #0
 8000bf8:	e752      	b.n	8000aa0 <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bfa:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bfc:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 8000c00:	bf0c      	ite	eq
 8000c02:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 8000c04:	6144      	strne	r4, [r0, #20]
 8000c06:	e74b      	b.n	8000aa0 <HAL_GPIO_Init+0x7c>
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	40010400 	.word	0x40010400
 8000c10:	10220000 	.word	0x10220000
 8000c14:	10120000 	.word	0x10120000
 8000c18:	40010800 	.word	0x40010800
 8000c1c:	40011000 	.word	0x40011000
 8000c20:	10310000 	.word	0x10310000

08000c24 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c24:	2800      	cmp	r0, #0
 8000c26:	f000 81b6 	beq.w	8000f96 <HAL_RCC_OscConfig+0x372>
{
 8000c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c2e:	6803      	ldr	r3, [r0, #0]
 8000c30:	4604      	mov	r4, r0
 8000c32:	07dd      	lsls	r5, r3, #31
{
 8000c34:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c36:	d535      	bpl.n	8000ca4 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c38:	499a      	ldr	r1, [pc, #616]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000c3a:	684a      	ldr	r2, [r1, #4]
 8000c3c:	f002 020c 	and.w	r2, r2, #12
 8000c40:	2a04      	cmp	r2, #4
 8000c42:	f000 80ef 	beq.w	8000e24 <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c46:	684a      	ldr	r2, [r1, #4]
 8000c48:	f002 020c 	and.w	r2, r2, #12
 8000c4c:	2a08      	cmp	r2, #8
 8000c4e:	f000 80e5 	beq.w	8000e1c <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c52:	6863      	ldr	r3, [r4, #4]
 8000c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c58:	d010      	beq.n	8000c7c <HAL_RCC_OscConfig+0x58>
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f000 810c 	beq.w	8000e78 <HAL_RCC_OscConfig+0x254>
 8000c60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c64:	f000 8182 	beq.w	8000f6c <HAL_RCC_OscConfig+0x348>
 8000c68:	4b8e      	ldr	r3, [pc, #568]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	e004      	b.n	8000c86 <HAL_RCC_OscConfig+0x62>
 8000c7c:	4a89      	ldr	r2, [pc, #548]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000c7e:	6813      	ldr	r3, [r2, #0]
 8000c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c84:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c86:	f7ff faa3 	bl	80001d0 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c8a:	4e86      	ldr	r6, [pc, #536]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 8000c8c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c8e:	e005      	b.n	8000c9c <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c90:	f7ff fa9e 	bl	80001d0 <HAL_GetTick>
 8000c94:	1b40      	subs	r0, r0, r5
 8000c96:	2864      	cmp	r0, #100	; 0x64
 8000c98:	f200 80ea 	bhi.w	8000e70 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c9c:	6833      	ldr	r3, [r6, #0]
 8000c9e:	039a      	lsls	r2, r3, #14
 8000ca0:	d5f6      	bpl.n	8000c90 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ca2:	6823      	ldr	r3, [r4, #0]
 8000ca4:	079f      	lsls	r7, r3, #30
 8000ca6:	d528      	bpl.n	8000cfa <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ca8:	4a7e      	ldr	r2, [pc, #504]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000caa:	6851      	ldr	r1, [r2, #4]
 8000cac:	f011 0f0c 	tst.w	r1, #12
 8000cb0:	f000 808d 	beq.w	8000dce <HAL_RCC_OscConfig+0x1aa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cb4:	6851      	ldr	r1, [r2, #4]
 8000cb6:	f001 010c 	and.w	r1, r1, #12
 8000cba:	2908      	cmp	r1, #8
 8000cbc:	f000 8083 	beq.w	8000dc6 <HAL_RCC_OscConfig+0x1a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cc0:	6923      	ldr	r3, [r4, #16]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f000 8118 	beq.w	8000ef8 <HAL_RCC_OscConfig+0x2d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cc8:	2201      	movs	r2, #1
 8000cca:	4b77      	ldr	r3, [pc, #476]	; (8000ea8 <HAL_RCC_OscConfig+0x284>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ccc:	4e75      	ldr	r6, [pc, #468]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_ENABLE();
 8000cce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000cd0:	f7ff fa7e 	bl	80001d0 <HAL_GetTick>
 8000cd4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cd6:	e005      	b.n	8000ce4 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cd8:	f7ff fa7a 	bl	80001d0 <HAL_GetTick>
 8000cdc:	1b40      	subs	r0, r0, r5
 8000cde:	2802      	cmp	r0, #2
 8000ce0:	f200 80c6 	bhi.w	8000e70 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ce4:	6833      	ldr	r3, [r6, #0]
 8000ce6:	0798      	lsls	r0, r3, #30
 8000ce8:	d5f6      	bpl.n	8000cd8 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cea:	6833      	ldr	r3, [r6, #0]
 8000cec:	6962      	ldr	r2, [r4, #20]
 8000cee:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000cf2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000cf6:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cf8:	6823      	ldr	r3, [r4, #0]
 8000cfa:	071a      	lsls	r2, r3, #28
 8000cfc:	d41f      	bmi.n	8000d3e <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000cfe:	075d      	lsls	r5, r3, #29
 8000d00:	d542      	bpl.n	8000d88 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d02:	4b68      	ldr	r3, [pc, #416]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000d04:	69da      	ldr	r2, [r3, #28]
 8000d06:	00d0      	lsls	r0, r2, #3
 8000d08:	d57d      	bpl.n	8000e06 <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 8000d0a:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d0c:	4e67      	ldr	r6, [pc, #412]	; (8000eac <HAL_RCC_OscConfig+0x288>)
 8000d0e:	6833      	ldr	r3, [r6, #0]
 8000d10:	05d9      	lsls	r1, r3, #23
 8000d12:	f140 809d 	bpl.w	8000e50 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d16:	68e3      	ldr	r3, [r4, #12]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	f000 80fe 	beq.w	8000f1a <HAL_RCC_OscConfig+0x2f6>
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	f000 80ca 	beq.w	8000eb8 <HAL_RCC_OscConfig+0x294>
 8000d24:	2b05      	cmp	r3, #5
 8000d26:	4b5f      	ldr	r3, [pc, #380]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000d28:	6a1a      	ldr	r2, [r3, #32]
 8000d2a:	f000 812c 	beq.w	8000f86 <HAL_RCC_OscConfig+0x362>
 8000d2e:	f022 0201 	bic.w	r2, r2, #1
 8000d32:	621a      	str	r2, [r3, #32]
 8000d34:	6a1a      	ldr	r2, [r3, #32]
 8000d36:	f022 0204 	bic.w	r2, r2, #4
 8000d3a:	621a      	str	r2, [r3, #32]
 8000d3c:	e0f2      	b.n	8000f24 <HAL_RCC_OscConfig+0x300>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d3e:	69a3      	ldr	r3, [r4, #24]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d04f      	beq.n	8000de4 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_LSI_ENABLE();
 8000d44:	2201      	movs	r2, #1
 8000d46:	4b58      	ldr	r3, [pc, #352]	; (8000ea8 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d48:	4e56      	ldr	r6, [pc, #344]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_ENABLE();
 8000d4a:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8000d4e:	f7ff fa3f 	bl	80001d0 <HAL_GetTick>
 8000d52:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d54:	e005      	b.n	8000d62 <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d56:	f7ff fa3b 	bl	80001d0 <HAL_GetTick>
 8000d5a:	1b40      	subs	r0, r0, r5
 8000d5c:	2802      	cmp	r0, #2
 8000d5e:	f200 8087 	bhi.w	8000e70 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d62:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000d64:	079b      	lsls	r3, r3, #30
 8000d66:	d5f6      	bpl.n	8000d56 <HAL_RCC_OscConfig+0x132>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000d68:	4b51      	ldr	r3, [pc, #324]	; (8000eb0 <HAL_RCC_OscConfig+0x28c>)
 8000d6a:	4a52      	ldr	r2, [pc, #328]	; (8000eb4 <HAL_RCC_OscConfig+0x290>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d72:	0a5b      	lsrs	r3, r3, #9
 8000d74:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000d76:	bf00      	nop
  }
  while (Delay --);
 8000d78:	9b01      	ldr	r3, [sp, #4]
 8000d7a:	1e5a      	subs	r2, r3, #1
 8000d7c:	9201      	str	r2, [sp, #4]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d1f9      	bne.n	8000d76 <HAL_RCC_OscConfig+0x152>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d82:	6823      	ldr	r3, [r4, #0]
 8000d84:	075d      	lsls	r5, r3, #29
 8000d86:	d4bc      	bmi.n	8000d02 <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d88:	69e0      	ldr	r0, [r4, #28]
 8000d8a:	b1c0      	cbz	r0, 8000dbe <HAL_RCC_OscConfig+0x19a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d8c:	4d45      	ldr	r5, [pc, #276]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000d8e:	686b      	ldr	r3, [r5, #4]
 8000d90:	f003 030c 	and.w	r3, r3, #12
 8000d94:	2b08      	cmp	r3, #8
 8000d96:	f000 80d8 	beq.w	8000f4a <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	4b42      	ldr	r3, [pc, #264]	; (8000ea8 <HAL_RCC_OscConfig+0x284>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d9e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000da0:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000da2:	f000 80fa 	beq.w	8000f9a <HAL_RCC_OscConfig+0x376>
        tickstart = HAL_GetTick();
 8000da6:	f7ff fa13 	bl	80001d0 <HAL_GetTick>
 8000daa:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dac:	e004      	b.n	8000db8 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000dae:	f7ff fa0f 	bl	80001d0 <HAL_GetTick>
 8000db2:	1b00      	subs	r0, r0, r4
 8000db4:	2802      	cmp	r0, #2
 8000db6:	d85b      	bhi.n	8000e70 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000db8:	682b      	ldr	r3, [r5, #0]
 8000dba:	019b      	lsls	r3, r3, #6
 8000dbc:	d4f7      	bmi.n	8000dae <HAL_RCC_OscConfig+0x18a>
  return HAL_OK;
 8000dbe:	2000      	movs	r0, #0
}
 8000dc0:	b002      	add	sp, #8
 8000dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000dc6:	6852      	ldr	r2, [r2, #4]
 8000dc8:	03d6      	lsls	r6, r2, #15
 8000dca:	f53f af79 	bmi.w	8000cc0 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dce:	4a35      	ldr	r2, [pc, #212]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000dd0:	6812      	ldr	r2, [r2, #0]
 8000dd2:	0795      	lsls	r5, r2, #30
 8000dd4:	d530      	bpl.n	8000e38 <HAL_RCC_OscConfig+0x214>
 8000dd6:	6922      	ldr	r2, [r4, #16]
 8000dd8:	2a01      	cmp	r2, #1
 8000dda:	d02d      	beq.n	8000e38 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 8000ddc:	2001      	movs	r0, #1
}
 8000dde:	b002      	add	sp, #8
 8000de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8000de4:	4a30      	ldr	r2, [pc, #192]	; (8000ea8 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000de6:	4e2f      	ldr	r6, [pc, #188]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_DISABLE();
 8000de8:	f8c2 3480 	str.w	r3, [r2, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8000dec:	f7ff f9f0 	bl	80001d0 <HAL_GetTick>
 8000df0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000df2:	e004      	b.n	8000dfe <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000df4:	f7ff f9ec 	bl	80001d0 <HAL_GetTick>
 8000df8:	1b40      	subs	r0, r0, r5
 8000dfa:	2802      	cmp	r0, #2
 8000dfc:	d838      	bhi.n	8000e70 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dfe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000e00:	079f      	lsls	r7, r3, #30
 8000e02:	d4f7      	bmi.n	8000df4 <HAL_RCC_OscConfig+0x1d0>
 8000e04:	e7bd      	b.n	8000d82 <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e06:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8000e08:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e0a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e0e:	61da      	str	r2, [r3, #28]
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8000e1a:	e777      	b.n	8000d0c <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e1c:	684a      	ldr	r2, [r1, #4]
 8000e1e:	03d0      	lsls	r0, r2, #15
 8000e20:	f57f af17 	bpl.w	8000c52 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e24:	4a1f      	ldr	r2, [pc, #124]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000e26:	6812      	ldr	r2, [r2, #0]
 8000e28:	0391      	lsls	r1, r2, #14
 8000e2a:	f57f af3b 	bpl.w	8000ca4 <HAL_RCC_OscConfig+0x80>
 8000e2e:	6862      	ldr	r2, [r4, #4]
 8000e30:	2a00      	cmp	r2, #0
 8000e32:	f47f af37 	bne.w	8000ca4 <HAL_RCC_OscConfig+0x80>
 8000e36:	e7d1      	b.n	8000ddc <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e38:	491a      	ldr	r1, [pc, #104]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000e3a:	6960      	ldr	r0, [r4, #20]
 8000e3c:	680a      	ldr	r2, [r1, #0]
 8000e3e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000e42:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8000e46:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e48:	071a      	lsls	r2, r3, #28
 8000e4a:	f57f af58 	bpl.w	8000cfe <HAL_RCC_OscConfig+0xda>
 8000e4e:	e776      	b.n	8000d3e <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e50:	6833      	ldr	r3, [r6, #0]
 8000e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e56:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000e58:	f7ff f9ba 	bl	80001d0 <HAL_GetTick>
 8000e5c:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e5e:	6833      	ldr	r3, [r6, #0]
 8000e60:	05da      	lsls	r2, r3, #23
 8000e62:	f53f af58 	bmi.w	8000d16 <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e66:	f7ff f9b3 	bl	80001d0 <HAL_GetTick>
 8000e6a:	1bc0      	subs	r0, r0, r7
 8000e6c:	2864      	cmp	r0, #100	; 0x64
 8000e6e:	d9f6      	bls.n	8000e5e <HAL_RCC_OscConfig+0x23a>
            return HAL_TIMEOUT;
 8000e70:	2003      	movs	r0, #3
}
 8000e72:	b002      	add	sp, #8
 8000e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e78:	4d0a      	ldr	r5, [pc, #40]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000e7a:	682b      	ldr	r3, [r5, #0]
 8000e7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e80:	602b      	str	r3, [r5, #0]
 8000e82:	682b      	ldr	r3, [r5, #0]
 8000e84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e88:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e8a:	f7ff f9a1 	bl	80001d0 <HAL_GetTick>
 8000e8e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e90:	e004      	b.n	8000e9c <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e92:	f7ff f99d 	bl	80001d0 <HAL_GetTick>
 8000e96:	1b80      	subs	r0, r0, r6
 8000e98:	2864      	cmp	r0, #100	; 0x64
 8000e9a:	d8e9      	bhi.n	8000e70 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e9c:	682b      	ldr	r3, [r5, #0]
 8000e9e:	039b      	lsls	r3, r3, #14
 8000ea0:	d4f7      	bmi.n	8000e92 <HAL_RCC_OscConfig+0x26e>
 8000ea2:	e6fe      	b.n	8000ca2 <HAL_RCC_OscConfig+0x7e>
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	42420000 	.word	0x42420000
 8000eac:	40007000 	.word	0x40007000
 8000eb0:	2000000c 	.word	0x2000000c
 8000eb4:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eb8:	4e50      	ldr	r6, [pc, #320]	; (8000ffc <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eba:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ebe:	6a33      	ldr	r3, [r6, #32]
 8000ec0:	f023 0301 	bic.w	r3, r3, #1
 8000ec4:	6233      	str	r3, [r6, #32]
 8000ec6:	6a33      	ldr	r3, [r6, #32]
 8000ec8:	f023 0304 	bic.w	r3, r3, #4
 8000ecc:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8000ece:	f7ff f97f 	bl	80001d0 <HAL_GetTick>
 8000ed2:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ed4:	e004      	b.n	8000ee0 <HAL_RCC_OscConfig+0x2bc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ed6:	f7ff f97b 	bl	80001d0 <HAL_GetTick>
 8000eda:	1bc0      	subs	r0, r0, r7
 8000edc:	4540      	cmp	r0, r8
 8000ede:	d8c7      	bhi.n	8000e70 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ee0:	6a33      	ldr	r3, [r6, #32]
 8000ee2:	0798      	lsls	r0, r3, #30
 8000ee4:	d4f7      	bmi.n	8000ed6 <HAL_RCC_OscConfig+0x2b2>
    if (pwrclkchanged == SET)
 8000ee6:	2d00      	cmp	r5, #0
 8000ee8:	f43f af4e 	beq.w	8000d88 <HAL_RCC_OscConfig+0x164>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000eec:	4a43      	ldr	r2, [pc, #268]	; (8000ffc <HAL_RCC_OscConfig+0x3d8>)
 8000eee:	69d3      	ldr	r3, [r2, #28]
 8000ef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ef4:	61d3      	str	r3, [r2, #28]
 8000ef6:	e747      	b.n	8000d88 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8000ef8:	4a41      	ldr	r2, [pc, #260]	; (8001000 <HAL_RCC_OscConfig+0x3dc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000efa:	4e40      	ldr	r6, [pc, #256]	; (8000ffc <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_HSI_DISABLE();
 8000efc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000efe:	f7ff f967 	bl	80001d0 <HAL_GetTick>
 8000f02:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f04:	e004      	b.n	8000f10 <HAL_RCC_OscConfig+0x2ec>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f06:	f7ff f963 	bl	80001d0 <HAL_GetTick>
 8000f0a:	1b40      	subs	r0, r0, r5
 8000f0c:	2802      	cmp	r0, #2
 8000f0e:	d8af      	bhi.n	8000e70 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f10:	6833      	ldr	r3, [r6, #0]
 8000f12:	0799      	lsls	r1, r3, #30
 8000f14:	d4f7      	bmi.n	8000f06 <HAL_RCC_OscConfig+0x2e2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f16:	6823      	ldr	r3, [r4, #0]
 8000f18:	e6ef      	b.n	8000cfa <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f1a:	4a38      	ldr	r2, [pc, #224]	; (8000ffc <HAL_RCC_OscConfig+0x3d8>)
 8000f1c:	6a13      	ldr	r3, [r2, #32]
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8000f24:	f7ff f954 	bl	80001d0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f28:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000f2c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f2e:	4f33      	ldr	r7, [pc, #204]	; (8000ffc <HAL_RCC_OscConfig+0x3d8>)
 8000f30:	e004      	b.n	8000f3c <HAL_RCC_OscConfig+0x318>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f32:	f7ff f94d 	bl	80001d0 <HAL_GetTick>
 8000f36:	1b80      	subs	r0, r0, r6
 8000f38:	4540      	cmp	r0, r8
 8000f3a:	d899      	bhi.n	8000e70 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f3c:	6a3b      	ldr	r3, [r7, #32]
 8000f3e:	079b      	lsls	r3, r3, #30
 8000f40:	d5f7      	bpl.n	8000f32 <HAL_RCC_OscConfig+0x30e>
    if (pwrclkchanged == SET)
 8000f42:	2d00      	cmp	r5, #0
 8000f44:	f43f af20 	beq.w	8000d88 <HAL_RCC_OscConfig+0x164>
 8000f48:	e7d0      	b.n	8000eec <HAL_RCC_OscConfig+0x2c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f4a:	2801      	cmp	r0, #1
 8000f4c:	f43f af38 	beq.w	8000dc0 <HAL_RCC_OscConfig+0x19c>
        pll_config = RCC->CFGR;
 8000f50:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f52:	6a22      	ldr	r2, [r4, #32]
 8000f54:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8000f58:	4291      	cmp	r1, r2
 8000f5a:	f47f af3f 	bne.w	8000ddc <HAL_RCC_OscConfig+0x1b8>
 8000f5e:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000f60:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    return HAL_ERROR;
 8000f64:	1a18      	subs	r0, r3, r0
 8000f66:	bf18      	it	ne
 8000f68:	2001      	movne	r0, #1
 8000f6a:	e729      	b.n	8000dc0 <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f70:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	e67f      	b.n	8000c86 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f86:	f042 0204 	orr.w	r2, r2, #4
 8000f8a:	621a      	str	r2, [r3, #32]
 8000f8c:	6a1a      	ldr	r2, [r3, #32]
 8000f8e:	f042 0201 	orr.w	r2, r2, #1
 8000f92:	621a      	str	r2, [r3, #32]
 8000f94:	e7c6      	b.n	8000f24 <HAL_RCC_OscConfig+0x300>
    return HAL_ERROR;
 8000f96:	2001      	movs	r0, #1
}
 8000f98:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8000f9a:	f7ff f919 	bl	80001d0 <HAL_GetTick>
 8000f9e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fa0:	e005      	b.n	8000fae <HAL_RCC_OscConfig+0x38a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fa2:	f7ff f915 	bl	80001d0 <HAL_GetTick>
 8000fa6:	1b80      	subs	r0, r0, r6
 8000fa8:	2802      	cmp	r0, #2
 8000faa:	f63f af61 	bhi.w	8000e70 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fae:	682b      	ldr	r3, [r5, #0]
 8000fb0:	0199      	lsls	r1, r3, #6
 8000fb2:	d4f6      	bmi.n	8000fa2 <HAL_RCC_OscConfig+0x37e>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fb4:	6a23      	ldr	r3, [r4, #32]
 8000fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fba:	d105      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x3a4>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fbc:	686a      	ldr	r2, [r5, #4]
 8000fbe:	68a1      	ldr	r1, [r4, #8]
 8000fc0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000fc8:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fca:	4d0c      	ldr	r5, [pc, #48]	; (8000ffc <HAL_RCC_OscConfig+0x3d8>)
 8000fcc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000fce:	686a      	ldr	r2, [r5, #4]
 8000fd0:	430b      	orrs	r3, r1
 8000fd2:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8000fd6:	490a      	ldr	r1, [pc, #40]	; (8001000 <HAL_RCC_OscConfig+0x3dc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000fdc:	6608      	str	r0, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8000fde:	f7ff f8f7 	bl	80001d0 <HAL_GetTick>
 8000fe2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fe4:	e005      	b.n	8000ff2 <HAL_RCC_OscConfig+0x3ce>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fe6:	f7ff f8f3 	bl	80001d0 <HAL_GetTick>
 8000fea:	1b00      	subs	r0, r0, r4
 8000fec:	2802      	cmp	r0, #2
 8000fee:	f63f af3f 	bhi.w	8000e70 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ff2:	682b      	ldr	r3, [r5, #0]
 8000ff4:	019a      	lsls	r2, r3, #6
 8000ff6:	d5f6      	bpl.n	8000fe6 <HAL_RCC_OscConfig+0x3c2>
 8000ff8:	e6e1      	b.n	8000dbe <HAL_RCC_OscConfig+0x19a>
 8000ffa:	bf00      	nop
 8000ffc:	40021000 	.word	0x40021000
 8001000:	42420000 	.word	0x42420000

08001004 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001004:	2800      	cmp	r0, #0
 8001006:	f000 80b1 	beq.w	800116c <HAL_RCC_ClockConfig+0x168>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800100a:	4a5e      	ldr	r2, [pc, #376]	; (8001184 <HAL_RCC_ClockConfig+0x180>)
{
 800100c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001010:	6813      	ldr	r3, [r2, #0]
 8001012:	4604      	mov	r4, r0
 8001014:	f003 0307 	and.w	r3, r3, #7
 8001018:	428b      	cmp	r3, r1
 800101a:	460d      	mov	r5, r1
{
 800101c:	b086      	sub	sp, #24
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800101e:	d20d      	bcs.n	800103c <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001020:	6813      	ldr	r3, [r2, #0]
 8001022:	f023 0307 	bic.w	r3, r3, #7
 8001026:	430b      	orrs	r3, r1
 8001028:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800102a:	6813      	ldr	r3, [r2, #0]
 800102c:	f003 0307 	and.w	r3, r3, #7
 8001030:	428b      	cmp	r3, r1
 8001032:	d003      	beq.n	800103c <HAL_RCC_ClockConfig+0x38>
    return HAL_ERROR;
 8001034:	2001      	movs	r0, #1
}
 8001036:	b006      	add	sp, #24
 8001038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800103c:	6823      	ldr	r3, [r4, #0]
 800103e:	079e      	lsls	r6, r3, #30
 8001040:	d514      	bpl.n	800106c <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001042:	0758      	lsls	r0, r3, #29
 8001044:	d504      	bpl.n	8001050 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001046:	4950      	ldr	r1, [pc, #320]	; (8001188 <HAL_RCC_ClockConfig+0x184>)
 8001048:	684a      	ldr	r2, [r1, #4]
 800104a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800104e:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001050:	0719      	lsls	r1, r3, #28
 8001052:	d504      	bpl.n	800105e <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001054:	494c      	ldr	r1, [pc, #304]	; (8001188 <HAL_RCC_ClockConfig+0x184>)
 8001056:	684a      	ldr	r2, [r1, #4]
 8001058:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 800105c:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800105e:	494a      	ldr	r1, [pc, #296]	; (8001188 <HAL_RCC_ClockConfig+0x184>)
 8001060:	68a0      	ldr	r0, [r4, #8]
 8001062:	684a      	ldr	r2, [r1, #4]
 8001064:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001068:	4302      	orrs	r2, r0
 800106a:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800106c:	07da      	lsls	r2, r3, #31
 800106e:	d520      	bpl.n	80010b2 <HAL_RCC_ClockConfig+0xae>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001070:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001072:	4b45      	ldr	r3, [pc, #276]	; (8001188 <HAL_RCC_ClockConfig+0x184>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001074:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001076:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001078:	d07a      	beq.n	8001170 <HAL_RCC_ClockConfig+0x16c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800107a:	2a02      	cmp	r2, #2
 800107c:	d073      	beq.n	8001166 <HAL_RCC_ClockConfig+0x162>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800107e:	079e      	lsls	r6, r3, #30
 8001080:	d5d8      	bpl.n	8001034 <HAL_RCC_ClockConfig+0x30>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001082:	4e41      	ldr	r6, [pc, #260]	; (8001188 <HAL_RCC_ClockConfig+0x184>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001084:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001088:	6873      	ldr	r3, [r6, #4]
 800108a:	f023 0303 	bic.w	r3, r3, #3
 800108e:	4313      	orrs	r3, r2
 8001090:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001092:	f7ff f89d 	bl	80001d0 <HAL_GetTick>
 8001096:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001098:	e004      	b.n	80010a4 <HAL_RCC_ClockConfig+0xa0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800109a:	f7ff f899 	bl	80001d0 <HAL_GetTick>
 800109e:	1bc0      	subs	r0, r0, r7
 80010a0:	4540      	cmp	r0, r8
 80010a2:	d868      	bhi.n	8001176 <HAL_RCC_ClockConfig+0x172>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010a4:	6873      	ldr	r3, [r6, #4]
 80010a6:	6862      	ldr	r2, [r4, #4]
 80010a8:	f003 030c 	and.w	r3, r3, #12
 80010ac:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80010b0:	d1f3      	bne.n	800109a <HAL_RCC_ClockConfig+0x96>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80010b2:	4a34      	ldr	r2, [pc, #208]	; (8001184 <HAL_RCC_ClockConfig+0x180>)
 80010b4:	6813      	ldr	r3, [r2, #0]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	42ab      	cmp	r3, r5
 80010bc:	d909      	bls.n	80010d2 <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010be:	6813      	ldr	r3, [r2, #0]
 80010c0:	f023 0307 	bic.w	r3, r3, #7
 80010c4:	432b      	orrs	r3, r5
 80010c6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010c8:	6813      	ldr	r3, [r2, #0]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	42ab      	cmp	r3, r5
 80010d0:	d1b0      	bne.n	8001034 <HAL_RCC_ClockConfig+0x30>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010d2:	6823      	ldr	r3, [r4, #0]
 80010d4:	0758      	lsls	r0, r3, #29
 80010d6:	d506      	bpl.n	80010e6 <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010d8:	492b      	ldr	r1, [pc, #172]	; (8001188 <HAL_RCC_ClockConfig+0x184>)
 80010da:	68e0      	ldr	r0, [r4, #12]
 80010dc:	684a      	ldr	r2, [r1, #4]
 80010de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80010e2:	4302      	orrs	r2, r0
 80010e4:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010e6:	0719      	lsls	r1, r3, #28
 80010e8:	d507      	bpl.n	80010fa <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80010ea:	4a27      	ldr	r2, [pc, #156]	; (8001188 <HAL_RCC_ClockConfig+0x184>)
 80010ec:	6921      	ldr	r1, [r4, #16]
 80010ee:	6853      	ldr	r3, [r2, #4]
 80010f0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80010f4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80010f8:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80010fa:	f240 2401 	movw	r4, #513	; 0x201
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80010fe:	4b23      	ldr	r3, [pc, #140]	; (800118c <HAL_RCC_ClockConfig+0x188>)
 8001100:	ad06      	add	r5, sp, #24
 8001102:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001104:	e905 000f 	stmdb	r5, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8001108:	491f      	ldr	r1, [pc, #124]	; (8001188 <HAL_RCC_ClockConfig+0x184>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800110a:	f8ad 4004 	strh.w	r4, [sp, #4]
  tmpreg = RCC->CFGR;
 800110e:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001110:	f002 030c 	and.w	r3, r2, #12
 8001114:	2b08      	cmp	r3, #8
 8001116:	d011      	beq.n	800113c <HAL_RCC_ClockConfig+0x138>
      sysclockfreq = HSE_VALUE;
 8001118:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <HAL_RCC_ClockConfig+0x18c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800111a:	4a1b      	ldr	r2, [pc, #108]	; (8001188 <HAL_RCC_ClockConfig+0x184>)
 800111c:	481d      	ldr	r0, [pc, #116]	; (8001194 <HAL_RCC_ClockConfig+0x190>)
 800111e:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8001120:	491d      	ldr	r1, [pc, #116]	; (8001198 <HAL_RCC_ClockConfig+0x194>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001122:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001126:	5c80      	ldrb	r0, [r0, r2]
 8001128:	4a1c      	ldr	r2, [pc, #112]	; (800119c <HAL_RCC_ClockConfig+0x198>)
 800112a:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 800112c:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800112e:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8001130:	f7ff f80c 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8001134:	2000      	movs	r0, #0
}
 8001136:	b006      	add	sp, #24
 8001138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800113c:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8001140:	3318      	adds	r3, #24
 8001142:	446b      	add	r3, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001144:	03d2      	lsls	r2, r2, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001146:	f813 3c10 	ldrb.w	r3, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800114a:	d516      	bpl.n	800117a <HAL_RCC_ClockConfig+0x176>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800114c:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800114e:	4910      	ldr	r1, [pc, #64]	; (8001190 <HAL_RCC_ClockConfig+0x18c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001150:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001154:	fb01 f303 	mul.w	r3, r1, r3
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001158:	3218      	adds	r2, #24
 800115a:	446a      	add	r2, sp
 800115c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001160:	fbb3 f3f2 	udiv	r3, r3, r2
 8001164:	e7d9      	b.n	800111a <HAL_RCC_ClockConfig+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001166:	019f      	lsls	r7, r3, #6
 8001168:	d48b      	bmi.n	8001082 <HAL_RCC_ClockConfig+0x7e>
 800116a:	e763      	b.n	8001034 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 800116c:	2001      	movs	r0, #1
}
 800116e:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001170:	039b      	lsls	r3, r3, #14
 8001172:	d486      	bmi.n	8001082 <HAL_RCC_ClockConfig+0x7e>
 8001174:	e75e      	b.n	8001034 <HAL_RCC_ClockConfig+0x30>
        return HAL_TIMEOUT;
 8001176:	2003      	movs	r0, #3
 8001178:	e75d      	b.n	8001036 <HAL_RCC_ClockConfig+0x32>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800117a:	4a09      	ldr	r2, [pc, #36]	; (80011a0 <HAL_RCC_ClockConfig+0x19c>)
 800117c:	fb02 f303 	mul.w	r3, r2, r3
 8001180:	e7cb      	b.n	800111a <HAL_RCC_ClockConfig+0x116>
 8001182:	bf00      	nop
 8001184:	40022000 	.word	0x40022000
 8001188:	40021000 	.word	0x40021000
 800118c:	0800376c 	.word	0x0800376c
 8001190:	007a1200 	.word	0x007a1200
 8001194:	080037a0 	.word	0x080037a0
 8001198:	20000004 	.word	0x20000004
 800119c:	2000000c 	.word	0x2000000c
 80011a0:	003d0900 	.word	0x003d0900

080011a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80011a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011a8:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80011aa:	6800      	ldr	r0, [r0, #0]
{
 80011ac:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80011ae:	07c1      	lsls	r1, r0, #31
 80011b0:	d52c      	bpl.n	800120c <HAL_RCCEx_PeriphCLKConfig+0x68>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011b2:	4b3a      	ldr	r3, [pc, #232]	; (800129c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80011b4:	69da      	ldr	r2, [r3, #28]
 80011b6:	00d2      	lsls	r2, r2, #3
 80011b8:	d53f      	bpl.n	800123a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ba:	4d39      	ldr	r5, [pc, #228]	; (80012a0 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    FlagStatus pwrclkchanged = RESET;
 80011bc:	2600      	movs	r6, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011be:	682b      	ldr	r3, [r5, #0]
 80011c0:	05df      	lsls	r7, r3, #23
 80011c2:	d548      	bpl.n	8001256 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80011c4:	4d35      	ldr	r5, [pc, #212]	; (800129c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80011c6:	6a2b      	ldr	r3, [r5, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80011c8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80011cc:	d011      	beq.n	80011f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80011ce:	6861      	ldr	r1, [r4, #4]
 80011d0:	f401 7240 	and.w	r2, r1, #768	; 0x300
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d00d      	beq.n	80011f4 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80011d8:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 80011da:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80011dc:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80011de:	4a31      	ldr	r2, [pc, #196]	; (80012a4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80011e0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80011e4:	f8c2 7440 	str.w	r7, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80011e8:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80011ec:	6229      	str	r1, [r5, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80011ee:	07d9      	lsls	r1, r3, #31
 80011f0:	d444      	bmi.n	800127c <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80011f2:	6861      	ldr	r1, [r4, #4]
 80011f4:	4a29      	ldr	r2, [pc, #164]	; (800129c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80011f6:	6a13      	ldr	r3, [r2, #32]
 80011f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011fc:	430b      	orrs	r3, r1
 80011fe:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001200:	b11e      	cbz	r6, 800120a <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001202:	69d3      	ldr	r3, [r2, #28]
 8001204:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001208:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800120a:	6820      	ldr	r0, [r4, #0]
 800120c:	0783      	lsls	r3, r0, #30
 800120e:	d506      	bpl.n	800121e <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001210:	4922      	ldr	r1, [pc, #136]	; (800129c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8001212:	68a3      	ldr	r3, [r4, #8]
 8001214:	684a      	ldr	r2, [r1, #4]
 8001216:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800121a:	431a      	orrs	r2, r3
 800121c:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800121e:	f010 0010 	ands.w	r0, r0, #16
 8001222:	d007      	beq.n	8001234 <HAL_RCCEx_PeriphCLKConfig+0x90>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001224:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001226:	4a1d      	ldr	r2, [pc, #116]	; (800129c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8001228:	68e1      	ldr	r1, [r4, #12]
 800122a:	6853      	ldr	r3, [r2, #4]
 800122c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001230:	430b      	orrs	r3, r1
 8001232:	6053      	str	r3, [r2, #4]
}
 8001234:	b002      	add	sp, #8
 8001236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 800123a:	69da      	ldr	r2, [r3, #28]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800123c:	4d18      	ldr	r5, [pc, #96]	; (80012a0 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
      __HAL_RCC_PWR_CLK_ENABLE();
 800123e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001242:	61da      	str	r2, [r3, #28]
 8001244:	69db      	ldr	r3, [r3, #28]
      pwrclkchanged = SET;
 8001246:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124c:	9301      	str	r3, [sp, #4]
 800124e:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001250:	682b      	ldr	r3, [r5, #0]
 8001252:	05df      	lsls	r7, r3, #23
 8001254:	d4b6      	bmi.n	80011c4 <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001256:	682b      	ldr	r3, [r5, #0]
 8001258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800125c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800125e:	f7fe ffb7 	bl	80001d0 <HAL_GetTick>
 8001262:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001264:	682b      	ldr	r3, [r5, #0]
 8001266:	05d8      	lsls	r0, r3, #23
 8001268:	d4ac      	bmi.n	80011c4 <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800126a:	f7fe ffb1 	bl	80001d0 <HAL_GetTick>
 800126e:	1bc3      	subs	r3, r0, r7
 8001270:	2b64      	cmp	r3, #100	; 0x64
 8001272:	d9f7      	bls.n	8001264 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8001274:	2003      	movs	r0, #3
}
 8001276:	b002      	add	sp, #8
 8001278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tickstart = HAL_GetTick();
 800127c:	f7fe ffa8 	bl	80001d0 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001280:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001284:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001286:	e004      	b.n	8001292 <HAL_RCCEx_PeriphCLKConfig+0xee>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001288:	f7fe ffa2 	bl	80001d0 <HAL_GetTick>
 800128c:	1bc0      	subs	r0, r0, r7
 800128e:	4540      	cmp	r0, r8
 8001290:	d8f0      	bhi.n	8001274 <HAL_RCCEx_PeriphCLKConfig+0xd0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001292:	6a2b      	ldr	r3, [r5, #32]
 8001294:	079a      	lsls	r2, r3, #30
 8001296:	d5f7      	bpl.n	8001288 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8001298:	e7ab      	b.n	80011f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800129a:	bf00      	nop
 800129c:	40021000 	.word	0x40021000
 80012a0:	40007000 	.word	0x40007000
 80012a4:	42420000 	.word	0x42420000

080012a8 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80012a8:	b570      	push	{r4, r5, r6, lr}
 80012aa:	460c      	mov	r4, r1
 80012ac:	b082      	sub	sp, #8
 80012ae:	4606      	mov	r6, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80012b0:	f7fe ff8e 	bl	80001d0 <HAL_GetTick>
 80012b4:	3464      	adds	r4, #100	; 0x64
 80012b6:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 80012b8:	f7fe ff8a 	bl	80001d0 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80012bc:	4b24      	ldr	r3, [pc, #144]	; (8001350 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa8>)

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80012be:	6832      	ldr	r2, [r6, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80012c6:	fb04 f303 	mul.w	r3, r4, r3
 80012ca:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80012cc:	6893      	ldr	r3, [r2, #8]
 80012ce:	061a      	lsls	r2, r3, #24
 80012d0:	d52f      	bpl.n	8001332 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8a>
 80012d2:	4605      	mov	r5, r0
 80012d4:	e00a      	b.n	80012ec <SPI_WaitFlagStateUntilTimeout.constprop.0+0x44>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80012d6:	9a01      	ldr	r2, [sp, #4]
      {
        tmp_timeout = 0U;
      }
      count--;
 80012d8:	9b01      	ldr	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80012da:	6831      	ldr	r1, [r6, #0]
      count--;
 80012dc:	3b01      	subs	r3, #1
 80012de:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80012e0:	688b      	ldr	r3, [r1, #8]
        tmp_timeout = 0U;
 80012e2:	2a00      	cmp	r2, #0
 80012e4:	bf08      	it	eq
 80012e6:	2400      	moveq	r4, #0
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80012e8:	061b      	lsls	r3, r3, #24
 80012ea:	d522      	bpl.n	8001332 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80012ec:	f7fe ff70 	bl	80001d0 <HAL_GetTick>
 80012f0:	1b40      	subs	r0, r0, r5
 80012f2:	42a0      	cmp	r0, r4
 80012f4:	d3ef      	bcc.n	80012d6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80012f6:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80012fa:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80012fc:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001300:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001304:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001306:	d017      	beq.n	8001338 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x90>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001308:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800130a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800130e:	d107      	bne.n	8001320 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x78>
          SPI_RESET_CRC(hspi);
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800131e:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001320:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8001322:	2300      	movs	r3, #0
 8001324:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 8001326:	f886 2051 	strb.w	r2, [r6, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800132a:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
    }
  }

  return HAL_OK;
}
 800132e:	b002      	add	sp, #8
 8001330:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001332:	2000      	movs	r0, #0
}
 8001334:	b002      	add	sp, #8
 8001336:	bd70      	pop	{r4, r5, r6, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001338:	68b2      	ldr	r2, [r6, #8]
 800133a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800133e:	d002      	beq.n	8001346 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001340:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001344:	d1e0      	bne.n	8001308 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x60>
          __HAL_SPI_DISABLE(hspi);
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	e7db      	b.n	8001308 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x60>
 8001350:	2000000c 	.word	0x2000000c

08001354 <HAL_SPI_Init>:
  if (hspi == NULL)
 8001354:	2800      	cmp	r0, #0
 8001356:	d058      	beq.n	800140a <HAL_SPI_Init+0xb6>
{
 8001358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800135a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800135c:	4604      	mov	r4, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d044      	beq.n	80013ec <HAL_SPI_Init+0x98>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001362:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001364:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001368:	2000      	movs	r0, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800136a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800136e:	62a0      	str	r0, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001370:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001374:	2b00      	cmp	r3, #0
 8001376:	d03f      	beq.n	80013f8 <HAL_SPI_Init+0xa4>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001378:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 800137c:	2602      	movs	r6, #2
  hspi->State     = HAL_SPI_STATE_READY;
 800137e:	f04f 0c01 	mov.w	ip, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001382:	2500      	movs	r5, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001384:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8001388:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800138c:	4313      	orrs	r3, r2
 800138e:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001390:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001394:	6926      	ldr	r6, [r4, #16]
 8001396:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800139a:	4313      	orrs	r3, r2
 800139c:	f006 0602 	and.w	r6, r6, #2
 80013a0:	4333      	orrs	r3, r6
 80013a2:	6966      	ldr	r6, [r4, #20]
 80013a4:	69a1      	ldr	r1, [r4, #24]
 80013a6:	6a27      	ldr	r7, [r4, #32]
 80013a8:	ea06 060c 	and.w	r6, r6, ip
 80013ac:	4333      	orrs	r3, r6
 80013ae:	69e6      	ldr	r6, [r4, #28]
 80013b0:	f007 0e80 	and.w	lr, r7, #128	; 0x80
 80013b4:	f401 7700 	and.w	r7, r1, #512	; 0x200
 80013b8:	f006 0638 	and.w	r6, r6, #56	; 0x38
 80013bc:	433b      	orrs	r3, r7
  __HAL_SPI_DISABLE(hspi);
 80013be:	6822      	ldr	r2, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80013c0:	4333      	orrs	r3, r6
 80013c2:	ea43 030e 	orr.w	r3, r3, lr
 80013c6:	4303      	orrs	r3, r0
  __HAL_SPI_DISABLE(hspi);
 80013c8:	6810      	ldr	r0, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80013ca:	0c09      	lsrs	r1, r1, #16
 80013cc:	f001 0104 	and.w	r1, r1, #4
  __HAL_SPI_DISABLE(hspi);
 80013d0:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 80013d4:	6010      	str	r0, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80013d6:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80013d8:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80013da:	69d3      	ldr	r3, [r2, #28]
  return HAL_OK;
 80013dc:	4628      	mov	r0, r5
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80013de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80013e2:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80013e4:	6565      	str	r5, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80013e6:	f884 c051 	strb.w	ip, [r4, #81]	; 0x51
}
 80013ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80013ec:	6842      	ldr	r2, [r0, #4]
 80013ee:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80013f2:	d0b9      	beq.n	8001368 <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013f4:	61c3      	str	r3, [r0, #28]
 80013f6:	e7b7      	b.n	8001368 <HAL_SPI_Init+0x14>
    HAL_SPI_MspInit(hspi);
 80013f8:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80013fa:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80013fe:	f000 ffad 	bl	800235c <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001402:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001404:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8001408:	e7b6      	b.n	8001378 <HAL_SPI_Init+0x24>
    return HAL_ERROR;
 800140a:	2001      	movs	r0, #1
}
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop

08001410 <HAL_SPI_Transmit_DMA>:
{
 8001410:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hspi);
 8001412:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8001416:	2b01      	cmp	r3, #1
 8001418:	d056      	beq.n	80014c8 <HAL_SPI_Transmit_DMA+0xb8>
 800141a:	4604      	mov	r4, r0
 800141c:	2001      	movs	r0, #1
  if (hspi->State != HAL_SPI_STATE_READY)
 800141e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  __HAL_LOCK(hspi);
 8001422:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  if (hspi->State != HAL_SPI_STATE_READY)
 8001426:	4283      	cmp	r3, r0
 8001428:	b2dd      	uxtb	r5, r3
 800142a:	d005      	beq.n	8001438 <HAL_SPI_Transmit_DMA+0x28>
    errorcode = HAL_BUSY;
 800142c:	2502      	movs	r5, #2
  __HAL_UNLOCK(hspi);
 800142e:	2300      	movs	r3, #0
 8001430:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001434:	4628      	mov	r0, r5
 8001436:	bd70      	pop	{r4, r5, r6, pc}
  if ((pData == NULL) || (Size == 0U))
 8001438:	2900      	cmp	r1, #0
 800143a:	d0f8      	beq.n	800142e <HAL_SPI_Transmit_DMA+0x1e>
 800143c:	2a00      	cmp	r2, #0
 800143e:	d0f6      	beq.n	800142e <HAL_SPI_Transmit_DMA+0x1e>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001440:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001442:	2603      	movs	r6, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001444:	68a0      	ldr	r0, [r4, #8]
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001446:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800144a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800144e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxXferSize  = Size;
 8001450:	86a2      	strh	r2, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001452:	86e2      	strh	r2, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001454:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
    __HAL_SPI_DISABLE(hspi);
 8001458:	6822      	ldr	r2, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800145a:	6321      	str	r1, [r4, #48]	; 0x30
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800145c:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800145e:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001460:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001462:	d028      	beq.n	80014b6 <HAL_SPI_Transmit_DMA+0xa6>
  hspi->hdmatx->XferAbortCallback = NULL;
 8001464:	2300      	movs	r3, #0
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8001466:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001468:	4e19      	ldr	r6, [pc, #100]	; (80014d0 <HAL_SPI_Transmit_DMA+0xc0>)
  hspi->hdmatx->XferAbortCallback = NULL;
 800146a:	6343      	str	r3, [r0, #52]	; 0x34
                                 hspi->TxXferCount))
 800146c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800146e:	62c6      	str	r6, [r0, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8001470:	4e18      	ldr	r6, [pc, #96]	; (80014d4 <HAL_SPI_Transmit_DMA+0xc4>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8001472:	320c      	adds	r2, #12
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8001474:	6286      	str	r6, [r0, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8001476:	4e18      	ldr	r6, [pc, #96]	; (80014d8 <HAL_SPI_Transmit_DMA+0xc8>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8001478:	b29b      	uxth	r3, r3
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800147a:	6306      	str	r6, [r0, #48]	; 0x30
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800147c:	f7ff f9f6 	bl	800086c <HAL_DMA_Start_IT>
 8001480:	b988      	cbnz	r0, 80014a6 <HAL_SPI_Transmit_DMA+0x96>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001482:	6823      	ldr	r3, [r4, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	0652      	lsls	r2, r2, #25
 8001488:	d403      	bmi.n	8001492 <HAL_SPI_Transmit_DMA+0x82>
    __HAL_SPI_ENABLE(hspi);
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001490:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8001492:	685a      	ldr	r2, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001494:	2500      	movs	r5, #0
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8001496:	f042 0220 	orr.w	r2, r2, #32
 800149a:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	f042 0202 	orr.w	r2, r2, #2
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	e7c3      	b.n	800142e <HAL_SPI_Transmit_DMA+0x1e>
    hspi->State = HAL_SPI_STATE_READY;
 80014a6:	2201      	movs	r2, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80014a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80014aa:	f043 0310 	orr.w	r3, r3, #16
 80014ae:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 80014b0:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
    goto error;
 80014b4:	e7bb      	b.n	800142e <HAL_SPI_Transmit_DMA+0x1e>
    __HAL_SPI_DISABLE(hspi);
 80014b6:	6813      	ldr	r3, [r2, #0]
 80014b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80014bc:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 80014be:	6813      	ldr	r3, [r2, #0]
 80014c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	e7cd      	b.n	8001464 <HAL_SPI_Transmit_DMA+0x54>
  __HAL_LOCK(hspi);
 80014c8:	2502      	movs	r5, #2
}
 80014ca:	4628      	mov	r0, r5
 80014cc:	bd70      	pop	{r4, r5, r6, pc}
 80014ce:	bf00      	nop
 80014d0:	080014e1 	.word	0x080014e1
 80014d4:	08001515 	.word	0x08001515
 80014d8:	080014f1 	.word	0x080014f1

080014dc <HAL_SPI_TxHalfCpltCallback>:
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop

080014e0 <SPI_DMAHalfTransmitCplt>:
{
 80014e0:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 80014e2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80014e4:	f7ff fffa 	bl	80014dc <HAL_SPI_TxHalfCpltCallback>
}
 80014e8:	bd08      	pop	{r3, pc}
 80014ea:	bf00      	nop

080014ec <HAL_SPI_ErrorCallback>:
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop

080014f0 <SPI_DMAError>:
  hspi->State = HAL_SPI_STATE_READY;
 80014f0:	2101      	movs	r1, #1
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80014f2:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 80014f4:	b508      	push	{r3, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80014f6:	6802      	ldr	r2, [r0, #0]
 80014f8:	6853      	ldr	r3, [r2, #4]
 80014fa:	f023 0303 	bic.w	r3, r3, #3
 80014fe:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001500:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001502:	f043 0310 	orr.w	r3, r3, #16
 8001506:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001508:	f880 1051 	strb.w	r1, [r0, #81]	; 0x51
  HAL_SPI_ErrorCallback(hspi);
 800150c:	f7ff ffee 	bl	80014ec <HAL_SPI_ErrorCallback>
}
 8001510:	bd08      	pop	{r3, pc}
 8001512:	bf00      	nop

08001514 <SPI_DMATransmitCplt>:
{
 8001514:	b530      	push	{r4, r5, lr}
 8001516:	4605      	mov	r5, r0
 8001518:	b083      	sub	sp, #12
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800151a:	6a44      	ldr	r4, [r0, #36]	; 0x24
  tickstart = HAL_GetTick();
 800151c:	f7fe fe58 	bl	80001d0 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8001520:	682b      	ldr	r3, [r5, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	069b      	lsls	r3, r3, #26
 8001526:	d41d      	bmi.n	8001564 <SPI_DMATransmitCplt+0x50>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001528:	6823      	ldr	r3, [r4, #0]
 800152a:	4601      	mov	r1, r0
 800152c:	685a      	ldr	r2, [r3, #4]
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800152e:	4620      	mov	r0, r4
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001530:	f022 0220 	bic.w	r2, r2, #32
 8001534:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	f022 0202 	bic.w	r2, r2, #2
 800153c:	605a      	str	r2, [r3, #4]
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800153e:	f7ff feb3 	bl	80012a8 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8001542:	b9a0      	cbnz	r0, 800156e <SPI_DMATransmitCplt+0x5a>
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001544:	68a3      	ldr	r3, [r4, #8]
 8001546:	b933      	cbnz	r3, 8001556 <SPI_DMATransmitCplt+0x42>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001548:	6822      	ldr	r2, [r4, #0]
 800154a:	9301      	str	r3, [sp, #4]
 800154c:	68d3      	ldr	r3, [r2, #12]
 800154e:	9301      	str	r3, [sp, #4]
 8001550:	6893      	ldr	r3, [r2, #8]
 8001552:	9301      	str	r3, [sp, #4]
 8001554:	9b01      	ldr	r3, [sp, #4]
    hspi->State = HAL_SPI_STATE_READY;
 8001556:	2301      	movs	r3, #1
    hspi->TxXferCount = 0U;
 8001558:	2200      	movs	r2, #0
 800155a:	86e2      	strh	r2, [r4, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800155c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001560:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001562:	b983      	cbnz	r3, 8001586 <SPI_DMATransmitCplt+0x72>
  HAL_SPI_TxCpltCallback(hspi);
 8001564:	4620      	mov	r0, r4
 8001566:	f000 fa51 	bl	8001a0c <HAL_SPI_TxCpltCallback>
}
 800156a:	b003      	add	sp, #12
 800156c:	bd30      	pop	{r4, r5, pc}
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800156e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001570:	f043 0320 	orr.w	r3, r3, #32
 8001574:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001576:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001578:	f043 0320 	orr.w	r3, r3, #32
 800157c:	6563      	str	r3, [r4, #84]	; 0x54
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800157e:	68a3      	ldr	r3, [r4, #8]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1e8      	bne.n	8001556 <SPI_DMATransmitCplt+0x42>
 8001584:	e7e0      	b.n	8001548 <SPI_DMATransmitCplt+0x34>
      HAL_SPI_ErrorCallback(hspi);
 8001586:	4620      	mov	r0, r4
 8001588:	f7ff ffb0 	bl	80014ec <HAL_SPI_ErrorCallback>
}
 800158c:	b003      	add	sp, #12
 800158e:	bd30      	pop	{r4, r5, pc}

08001590 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001590:	2800      	cmp	r0, #0
 8001592:	d062      	beq.n	800165a <HAL_TIM_Base_Init+0xca>
{
 8001594:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001596:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800159a:	4604      	mov	r4, r0
 800159c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d041      	beq.n	8001628 <HAL_TIM_Base_Init+0x98>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015a4:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015a6:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80015a8:	492d      	ldr	r1, [pc, #180]	; (8001660 <HAL_TIM_Base_Init+0xd0>)
  htim->State = HAL_TIM_STATE_BUSY;
 80015aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80015ae:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80015b0:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80015b2:	d03e      	beq.n	8001632 <HAL_TIM_Base_Init+0xa2>
 80015b4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80015b8:	d024      	beq.n	8001604 <HAL_TIM_Base_Init+0x74>
 80015ba:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 80015be:	428a      	cmp	r2, r1
 80015c0:	d020      	beq.n	8001604 <HAL_TIM_Base_Init+0x74>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80015c2:	69a0      	ldr	r0, [r4, #24]
 80015c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015c8:	4303      	orrs	r3, r0

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80015ca:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 80015cc:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80015ce:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80015d0:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80015d2:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80015d4:	2301      	movs	r3, #1
 80015d6:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015d8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015dc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80015e0:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80015e4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80015e8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80015f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80015f4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80015f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80015fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001600:	2000      	movs	r0, #0
}
 8001602:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8001604:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800160a:	6920      	ldr	r0, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 800160c:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800160e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001612:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001614:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001616:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800161a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800161c:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800161e:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8001620:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001622:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001624:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001626:	e7d5      	b.n	80015d4 <HAL_TIM_Base_Init+0x44>
    htim->Lock = HAL_UNLOCKED;
 8001628:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800162c:	f000 fee2 	bl	80023f4 <HAL_TIM_Base_MspInit>
 8001630:	e7b8      	b.n	80015a4 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8001632:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001638:	6921      	ldr	r1, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 800163a:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 800163c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001640:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001642:	69a1      	ldr	r1, [r4, #24]
 8001644:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001648:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800164a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800164c:	68e3      	ldr	r3, [r4, #12]
 800164e:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001650:	6863      	ldr	r3, [r4, #4]
 8001652:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001654:	6963      	ldr	r3, [r4, #20]
 8001656:	6313      	str	r3, [r2, #48]	; 0x30
 8001658:	e7bc      	b.n	80015d4 <HAL_TIM_Base_Init+0x44>
    return HAL_ERROR;
 800165a:	2001      	movs	r0, #1
}
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	40012c00 	.word	0x40012c00

08001664 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8001664:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001668:	2b01      	cmp	r3, #1
 800166a:	d116      	bne.n	800169a <HAL_TIM_Base_Start_IT+0x36>
  htim->State = HAL_TIM_STATE_BUSY;
 800166c:	2202      	movs	r2, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800166e:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001670:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001674:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001676:	490d      	ldr	r1, [pc, #52]	; (80016ac <HAL_TIM_Base_Start_IT+0x48>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001678:	f042 0201 	orr.w	r2, r2, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800167c:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800167e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001680:	d00d      	beq.n	800169e <HAL_TIM_Base_Start_IT+0x3a>
 8001682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001686:	d00a      	beq.n	800169e <HAL_TIM_Base_Start_IT+0x3a>
 8001688:	4a09      	ldr	r2, [pc, #36]	; (80016b0 <HAL_TIM_Base_Start_IT+0x4c>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d007      	beq.n	800169e <HAL_TIM_Base_Start_IT+0x3a>
    __HAL_TIM_ENABLE(htim);
 800168e:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8001690:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8001692:	f042 0201 	orr.w	r2, r2, #1
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	4770      	bx	lr
    return HAL_ERROR;
 800169a:	2001      	movs	r0, #1
 800169c:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016a4:	2a06      	cmp	r2, #6
 80016a6:	d1f2      	bne.n	800168e <HAL_TIM_Base_Start_IT+0x2a>
  return HAL_OK;
 80016a8:	2000      	movs	r0, #0
}
 80016aa:	4770      	bx	lr
 80016ac:	40012c00 	.word	0x40012c00
 80016b0:	40000400 	.word	0x40000400

080016b4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80016b4:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80016b8:	2a01      	cmp	r2, #1
 80016ba:	d075      	beq.n	80017a8 <HAL_TIM_ConfigClockSource+0xf4>
{
 80016bc:	b430      	push	{r4, r5}
 80016be:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80016c0:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80016c2:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 80016c4:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(htim);
 80016c6:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80016ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80016ce:	6884      	ldr	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80016d0:	680a      	ldr	r2, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80016d2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 80016d6:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 80016da:	2a60      	cmp	r2, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 80016dc:	6084      	str	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80016de:	d065      	beq.n	80017ac <HAL_TIM_ConfigClockSource+0xf8>
 80016e0:	d831      	bhi.n	8001746 <HAL_TIM_ConfigClockSource+0x92>
 80016e2:	2a40      	cmp	r2, #64	; 0x40
 80016e4:	d048      	beq.n	8001778 <HAL_TIM_ConfigClockSource+0xc4>
 80016e6:	d921      	bls.n	800172c <HAL_TIM_ConfigClockSource+0x78>
 80016e8:	2a50      	cmp	r2, #80	; 0x50
 80016ea:	d116      	bne.n	800171a <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80016ec:	684a      	ldr	r2, [r1, #4]
 80016ee:	68cc      	ldr	r4, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80016f0:	6a01      	ldr	r1, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80016f2:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80016f6:	4311      	orrs	r1, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80016f8:	6a02      	ldr	r2, [r0, #32]
 80016fa:	f022 0201 	bic.w	r2, r2, #1
 80016fe:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001700:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001702:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001706:	ea42 1204 	orr.w	r2, r2, r4, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800170a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800170c:	6201      	str	r1, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800170e:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001710:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001714:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001718:	6082      	str	r2, [r0, #8]
  __HAL_UNLOCK(htim);
 800171a:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 800171c:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800171e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8001722:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
  return HAL_OK;
 8001726:	4610      	mov	r0, r2
}
 8001728:	bc30      	pop	{r4, r5}
 800172a:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800172c:	2a20      	cmp	r2, #32
 800172e:	d002      	beq.n	8001736 <HAL_TIM_ConfigClockSource+0x82>
 8001730:	d91e      	bls.n	8001770 <HAL_TIM_ConfigClockSource+0xbc>
 8001732:	2a30      	cmp	r2, #48	; 0x30
 8001734:	d1f1      	bne.n	800171a <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr = TIMx->SMCR;
 8001736:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001738:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800173c:	430a      	orrs	r2, r1
 800173e:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 8001742:	6082      	str	r2, [r0, #8]
}
 8001744:	e7e9      	b.n	800171a <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8001746:	2a70      	cmp	r2, #112	; 0x70
 8001748:	d049      	beq.n	80017de <HAL_TIM_ConfigClockSource+0x12a>
 800174a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800174e:	d1e4      	bne.n	800171a <HAL_TIM_ConfigClockSource+0x66>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001750:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001754:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001756:	432a      	orrs	r2, r5
 8001758:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800175a:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800175e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8001762:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001764:	6082      	str	r2, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001766:	6882      	ldr	r2, [r0, #8]
 8001768:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800176c:	6082      	str	r2, [r0, #8]
      break;
 800176e:	e7d4      	b.n	800171a <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8001770:	f032 0110 	bics.w	r1, r2, #16
 8001774:	d1d1      	bne.n	800171a <HAL_TIM_ConfigClockSource+0x66>
 8001776:	e7de      	b.n	8001736 <HAL_TIM_ConfigClockSource+0x82>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001778:	684a      	ldr	r2, [r1, #4]
 800177a:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 800177c:	6a01      	ldr	r1, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800177e:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8001782:	4311      	orrs	r1, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001784:	6a02      	ldr	r2, [r0, #32]
 8001786:	f022 0201 	bic.w	r2, r2, #1
 800178a:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800178c:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800178e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001792:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001796:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001798:	6201      	str	r1, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800179a:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800179c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80017a0:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80017a4:	6082      	str	r2, [r0, #8]
}
 80017a6:	e7b8      	b.n	800171a <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 80017a8:	2002      	movs	r0, #2
}
 80017aa:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80017ac:	6a02      	ldr	r2, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80017ae:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80017b0:	f022 0210 	bic.w	r2, r2, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80017b4:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80017b6:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80017b8:	6981      	ldr	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 80017ba:	6a02      	ldr	r2, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80017bc:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80017c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80017c4:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80017c8:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80017cc:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 80017ce:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80017d0:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80017d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80017d6:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80017da:	6082      	str	r2, [r0, #8]
}
 80017dc:	e79d      	b.n	800171a <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80017de:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80017e2:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80017e4:	432a      	orrs	r2, r5
 80017e6:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80017e8:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80017ec:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80017f0:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 80017f2:	6082      	str	r2, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 80017f4:	6882      	ldr	r2, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80017f6:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80017fa:	6082      	str	r2, [r0, #8]
      break;
 80017fc:	e78d      	b.n	800171a <HAL_TIM_ConfigClockSource+0x66>
 80017fe:	bf00      	nop

08001800 <HAL_TIM_OC_DelayElapsedCallback>:
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop

08001804 <HAL_TIM_IC_CaptureCallback>:
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop

08001808 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop

0800180c <HAL_TIM_TriggerCallback>:
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop

08001810 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001810:	6803      	ldr	r3, [r0, #0]
{
 8001812:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001814:	691a      	ldr	r2, [r3, #16]
{
 8001816:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001818:	0791      	lsls	r1, r2, #30
 800181a:	d502      	bpl.n	8001822 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800181c:	68da      	ldr	r2, [r3, #12]
 800181e:	0792      	lsls	r2, r2, #30
 8001820:	d45f      	bmi.n	80018e2 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001822:	691a      	ldr	r2, [r3, #16]
 8001824:	0750      	lsls	r0, r2, #29
 8001826:	d502      	bpl.n	800182e <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001828:	68da      	ldr	r2, [r3, #12]
 800182a:	0751      	lsls	r1, r2, #29
 800182c:	d446      	bmi.n	80018bc <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800182e:	691a      	ldr	r2, [r3, #16]
 8001830:	0712      	lsls	r2, r2, #28
 8001832:	d502      	bpl.n	800183a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001834:	68da      	ldr	r2, [r3, #12]
 8001836:	0710      	lsls	r0, r2, #28
 8001838:	d42e      	bmi.n	8001898 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800183a:	691a      	ldr	r2, [r3, #16]
 800183c:	06d2      	lsls	r2, r2, #27
 800183e:	d502      	bpl.n	8001846 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	06d0      	lsls	r0, r2, #27
 8001844:	d418      	bmi.n	8001878 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001846:	691a      	ldr	r2, [r3, #16]
 8001848:	07d1      	lsls	r1, r2, #31
 800184a:	d502      	bpl.n	8001852 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800184c:	68da      	ldr	r2, [r3, #12]
 800184e:	07d2      	lsls	r2, r2, #31
 8001850:	d45d      	bmi.n	800190e <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001852:	691a      	ldr	r2, [r3, #16]
 8001854:	0610      	lsls	r0, r2, #24
 8001856:	d502      	bpl.n	800185e <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001858:	68da      	ldr	r2, [r3, #12]
 800185a:	0611      	lsls	r1, r2, #24
 800185c:	d45f      	bmi.n	800191e <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800185e:	691a      	ldr	r2, [r3, #16]
 8001860:	0652      	lsls	r2, r2, #25
 8001862:	d502      	bpl.n	800186a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001864:	68da      	ldr	r2, [r3, #12]
 8001866:	0650      	lsls	r0, r2, #25
 8001868:	d461      	bmi.n	800192e <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800186a:	691a      	ldr	r2, [r3, #16]
 800186c:	0691      	lsls	r1, r2, #26
 800186e:	d502      	bpl.n	8001876 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001870:	68da      	ldr	r2, [r3, #12]
 8001872:	0692      	lsls	r2, r2, #26
 8001874:	d443      	bmi.n	80018fe <HAL_TIM_IRQHandler+0xee>
}
 8001876:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001878:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800187c:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800187e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001880:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001882:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001884:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001886:	f413 7f40 	tst.w	r3, #768	; 0x300
 800188a:	d064      	beq.n	8001956 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800188c:	f7ff ffba 	bl	8001804 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001890:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001892:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001894:	7722      	strb	r2, [r4, #28]
 8001896:	e7d6      	b.n	8001846 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001898:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800189c:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800189e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018a0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018a2:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80018a4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018a6:	0799      	lsls	r1, r3, #30
 80018a8:	d152      	bne.n	8001950 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018aa:	f7ff ffa9 	bl	8001800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018ae:	4620      	mov	r0, r4
 80018b0:	f7ff ffaa 	bl	8001808 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018b4:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80018b6:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018b8:	7722      	strb	r2, [r4, #28]
 80018ba:	e7be      	b.n	800183a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018bc:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018c0:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018c2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018c4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018c6:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80018c8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018ca:	f413 7f40 	tst.w	r3, #768	; 0x300
 80018ce:	d13c      	bne.n	800194a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018d0:	f7ff ff96 	bl	8001800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018d4:	4620      	mov	r0, r4
 80018d6:	f7ff ff97 	bl	8001808 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018da:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80018dc:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018de:	7722      	strb	r2, [r4, #28]
 80018e0:	e7a5      	b.n	800182e <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80018e2:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018e6:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80018e8:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018ea:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	079b      	lsls	r3, r3, #30
 80018f0:	d025      	beq.n	800193e <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 80018f2:	f7ff ff87 	bl	8001804 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018f6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80018f8:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018fa:	7722      	strb	r2, [r4, #28]
 80018fc:	e791      	b.n	8001822 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018fe:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8001902:	4620      	mov	r0, r4
}
 8001904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001908:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800190a:	f000 b859 	b.w	80019c0 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800190e:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8001912:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001914:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001916:	f000 f86d 	bl	80019f4 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800191a:	6823      	ldr	r3, [r4, #0]
 800191c:	e799      	b.n	8001852 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800191e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001922:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001924:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001926:	f000 f84d 	bl	80019c4 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800192a:	6823      	ldr	r3, [r4, #0]
 800192c:	e797      	b.n	800185e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800192e:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8001932:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001934:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001936:	f7ff ff69 	bl	800180c <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800193a:	6823      	ldr	r3, [r4, #0]
 800193c:	e795      	b.n	800186a <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800193e:	f7ff ff5f 	bl	8001800 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001942:	4620      	mov	r0, r4
 8001944:	f7ff ff60 	bl	8001808 <HAL_TIM_PWM_PulseFinishedCallback>
 8001948:	e7d5      	b.n	80018f6 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 800194a:	f7ff ff5b 	bl	8001804 <HAL_TIM_IC_CaptureCallback>
 800194e:	e7c4      	b.n	80018da <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8001950:	f7ff ff58 	bl	8001804 <HAL_TIM_IC_CaptureCallback>
 8001954:	e7ae      	b.n	80018b4 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001956:	f7ff ff53 	bl	8001800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800195a:	4620      	mov	r0, r4
 800195c:	f7ff ff54 	bl	8001808 <HAL_TIM_PWM_PulseFinishedCallback>
 8001960:	e796      	b.n	8001890 <HAL_TIM_IRQHandler+0x80>
 8001962:	bf00      	nop

08001964 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001964:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8001968:	2a01      	cmp	r2, #1
 800196a:	d023      	beq.n	80019b4 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 800196c:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800196e:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001970:	681a      	ldr	r2, [r3, #0]
{
 8001972:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8001974:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8001978:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800197a:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800197c:	4d0e      	ldr	r5, [pc, #56]	; (80019b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  tmpcr2 &= ~TIM_CR2_MMS;
 800197e:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001982:	4320      	orrs	r0, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001984:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 8001986:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 8001988:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800198a:	d005      	beq.n	8001998 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 800198c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8001990:	d002      	beq.n	8001998 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8001992:	480a      	ldr	r0, [pc, #40]	; (80019bc <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8001994:	4282      	cmp	r2, r0
 8001996:	d104      	bne.n	80019a2 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001998:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800199a:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800199e:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80019a0:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80019a2:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 80019a4:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80019a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 80019aa:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d

  return HAL_OK;
 80019ae:	4610      	mov	r0, r2
}
 80019b0:	bc30      	pop	{r4, r5}
 80019b2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80019b4:	2002      	movs	r0, #2
}
 80019b6:	4770      	bx	lr
 80019b8:	40012c00 	.word	0x40012c00
 80019bc:	40000400 	.word	0x40000400

080019c0 <HAL_TIMEx_CommutCallback>:
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop

080019c4 <HAL_TIMEx_BreakCallback>:
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop

080019c8 <HAL_ADC_ConvCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
	static uint32_t count = 0;
	count++;
 80019c8:	4a08      	ldr	r2, [pc, #32]	; (80019ec <HAL_ADC_ConvCpltCallback+0x24>)
{
 80019ca:	b508      	push	{r3, lr}
	count++;
 80019cc:	6813      	ldr	r3, [r2, #0]
 80019ce:	3301      	adds	r3, #1
 80019d0:	6013      	str	r3, [r2, #0]
	uint32_t adc = HAL_ADC_GetValue(hadc);
 80019d2:	f7fe fcc3 	bl	800035c <HAL_ADC_GetValue>
	uint8_t ans = Random_AddBit(adc);
 80019d6:	f000 fc0f 	bl	80021f8 <Random_AddBit>
	if (ans != 0)
 80019da:	b908      	cbnz	r0, 80019e0 <HAL_ADC_ConvCpltCallback+0x18>
		HAL_ADC_Start_IT(&hadc1);
	else
		__NOP();
 80019dc:	bf00      	nop
}
 80019de:	bd08      	pop	{r3, pc}
		HAL_ADC_Start_IT(&hadc1);
 80019e0:	4803      	ldr	r0, [pc, #12]	; (80019f0 <HAL_ADC_ConvCpltCallback+0x28>)
}
 80019e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_ADC_Start_IT(&hadc1);
 80019e6:	f7fe be19 	b.w	800061c <HAL_ADC_Start_IT>
 80019ea:	bf00      	nop
 80019ec:	20000090 	.word	0x20000090
 80019f0:	200000a4 	.word	0x200000a4

080019f4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	timFlag = 1;
 80019f4:	2101      	movs	r1, #1
 80019f6:	4b03      	ldr	r3, [pc, #12]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x10>)
	timerCounter++;
 80019f8:	4a03      	ldr	r2, [pc, #12]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x14>)
	timFlag = 1;
 80019fa:	7019      	strb	r1, [r3, #0]
	timerCounter++;
 80019fc:	6813      	ldr	r3, [r2, #0]
 80019fe:	440b      	add	r3, r1
 8001a00:	6013      	str	r3, [r2, #0]
}
 8001a02:	4770      	bx	lr
 8001a04:	200006d4 	.word	0x200006d4
 8001a08:	200006e0 	.word	0x200006e0

08001a0c <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
	dmaFlag = 1 ;
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	4b01      	ldr	r3, [pc, #4]	; (8001a14 <HAL_SPI_TxCpltCallback+0x8>)
 8001a10:	701a      	strb	r2, [r3, #0]
}
 8001a12:	4770      	bx	lr
 8001a14:	20000009 	.word	0x20000009

08001a18 <Prog_0>:
	static uint32_t dest = 0;

	uint8_t* currP = (uint8_t*)&curr;
	uint8_t* destP = (uint8_t*)&dest;
	// Задаем цвет нулевому диоду
	if (!timer)
 8001a18:	4a3d      	ldr	r2, [pc, #244]	; (8001b10 <Prog_0+0xf8>)
{
 8001a1a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!timer)
 8001a1e:	f8d2 8000 	ldr.w	r8, [r2]
 8001a22:	f1b8 0f00 	cmp.w	r8, #0
 8001a26:	d14f      	bne.n	8001ac8 <Prog_0+0xb0>
	{
		timer = 0xFF;
 8001a28:	23ff      	movs	r3, #255	; 0xff
		curr = dest;
 8001a2a:	4e3a      	ldr	r6, [pc, #232]	; (8001b14 <Prog_0+0xfc>)
 8001a2c:	4d3a      	ldr	r5, [pc, #232]	; (8001b18 <Prog_0+0x100>)
 8001a2e:	6831      	ldr	r1, [r6, #0]
 8001a30:	4f3a      	ldr	r7, [pc, #232]	; (8001b1c <Prog_0+0x104>)
 8001a32:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8001b20 <Prog_0+0x108>
		HAL_ADC_Start_IT(&hadc1);
 8001a36:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 8001b24 <Prog_0+0x10c>
		curr = dest;
 8001a3a:	6029      	str	r1, [r5, #0]
		timer = 0xFF;
 8001a3c:	6013      	str	r3, [r2, #0]
		curr = dest;
 8001a3e:	e00a      	b.n	8001a56 <Prog_0+0x3e>
	rnd = rand();
 8001a40:	f000 fe80 	bl	8002744 <rand>
		do
		{
			dest = rgbConst[GetRandom(0)&7];
 8001a44:	f000 0007 	and.w	r0, r0, #7
 8001a48:	f859 3020 	ldr.w	r3, [r9, r0, lsl #2]
		}while (curr == dest);
 8001a4c:	f8d5 b000 	ldr.w	fp, [r5]
			dest = rgbConst[GetRandom(0)&7];
 8001a50:	6033      	str	r3, [r6, #0]
		}while (curr == dest);
 8001a52:	455b      	cmp	r3, fp
 8001a54:	d123      	bne.n	8001a9e <Prog_0+0x86>
	if (isFirst)
 8001a56:	783b      	ldrb	r3, [r7, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0f1      	beq.n	8001a40 <Prog_0+0x28>
		isFirst = 0;
 8001a5c:	f887 8000 	strb.w	r8, [r7]
		rnd = Random_GetRnd();
 8001a60:	f000 fc14 	bl	800228c <Random_GetRnd>
 8001a64:	4604      	mov	r4, r0
		HAL_ADC_Start_IT(&hadc1);
 8001a66:	4650      	mov	r0, sl
 8001a68:	f7fe fdd8 	bl	800061c <HAL_ADC_Start_IT>
		while (!rnd)
 8001a6c:	b924      	cbnz	r4, 8001a78 <Prog_0+0x60>
			rnd = Random_GetRnd();
 8001a6e:	f000 fc0d 	bl	800228c <Random_GetRnd>
		while (!rnd)
 8001a72:	4604      	mov	r4, r0
 8001a74:	2800      	cmp	r0, #0
 8001a76:	d0fa      	beq.n	8001a6e <Prog_0+0x56>
		srand(rnd);
 8001a78:	4620      	mov	r0, r4
 8001a7a:	f000 fe35 	bl	80026e8 <srand>
 8001a7e:	e7df      	b.n	8001a40 <Prog_0+0x28>
	{
		timer--;
		for(int i=0; i<3; i++)
			if (destP[i])
			{
				if (currP[i] < 0xFF)
 8001a80:	786b      	ldrb	r3, [r5, #1]
 8001a82:	2bff      	cmp	r3, #255	; 0xff
					currP[i]++;
 8001a84:	bf1c      	itt	ne
 8001a86:	3301      	addne	r3, #1
 8001a88:	706b      	strbne	r3, [r5, #1]
			if (destP[i])
 8001a8a:	78b3      	ldrb	r3, [r6, #2]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d032      	beq.n	8001af6 <Prog_0+0xde>
				if (currP[i] < 0xFF)
 8001a90:	78ab      	ldrb	r3, [r5, #2]
 8001a92:	2bff      	cmp	r3, #255	; 0xff
 8001a94:	d001      	beq.n	8001a9a <Prog_0+0x82>
					currP[i]++;
 8001a96:	3301      	adds	r3, #1
 8001a98:	70ab      	strb	r3, [r5, #2]

	// Передаем в массив
	for (int i = LED_NUM-1; i>0; i--)
		rgbArr[i] = rgbArr[i-1];

	rgbArr[0] = curr;
 8001a9a:	f8d5 b000 	ldr.w	fp, [r5]
		rgbArr[i] = rgbArr[i-1];
 8001a9e:	4922      	ldr	r1, [pc, #136]	; (8001b28 <Prog_0+0x110>)

	for(int i=0; i<LED_NUM; i++)
 8001aa0:	2400      	movs	r4, #0
	rgbArr[0] = curr;
 8001aa2:	460d      	mov	r5, r1
		rgbArr[i] = rgbArr[i-1];
 8001aa4:	f240 42ac 	movw	r2, #1196	; 0x4ac
 8001aa8:	1d08      	adds	r0, r1, #4
 8001aaa:	f000 ff8e 	bl	80029ca <memmove>
	rgbArr[0] = curr;
 8001aae:	f845 b904 	str.w	fp, [r5], #-4
		ws2813_AddRGB(rgbArr[i], i);
 8001ab2:	4621      	mov	r1, r4
 8001ab4:	f855 0f04 	ldr.w	r0, [r5, #4]!
	for(int i=0; i<LED_NUM; i++)
 8001ab8:	3401      	adds	r4, #1
		ws2813_AddRGB(rgbArr[i], i);
 8001aba:	f000 fd9b 	bl	80025f4 <ws2813_AddRGB>
	for(int i=0; i<LED_NUM; i++)
 8001abe:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
 8001ac2:	d1f6      	bne.n	8001ab2 <Prog_0+0x9a>
}
 8001ac4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (destP[i])
 8001ac8:	4e12      	ldr	r6, [pc, #72]	; (8001b14 <Prog_0+0xfc>)
				if (currP[i] < 0xFF)
 8001aca:	4d13      	ldr	r5, [pc, #76]	; (8001b18 <Prog_0+0x100>)
			if (destP[i])
 8001acc:	7831      	ldrb	r1, [r6, #0]
		timer--;
 8001ace:	f108 33ff 	add.w	r3, r8, #4294967295
 8001ad2:	6013      	str	r3, [r2, #0]
				if (currP[i] < 0xFF)
 8001ad4:	782b      	ldrb	r3, [r5, #0]
			if (destP[i])
 8001ad6:	b1b1      	cbz	r1, 8001b06 <Prog_0+0xee>
				if (currP[i] < 0xFF)
 8001ad8:	2bff      	cmp	r3, #255	; 0xff
					currP[i]++;
 8001ada:	bf1c      	itt	ne
 8001adc:	3301      	addne	r3, #1
 8001ade:	702b      	strbne	r3, [r5, #0]
			if (destP[i])
 8001ae0:	7873      	ldrb	r3, [r6, #1]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1cc      	bne.n	8001a80 <Prog_0+0x68>
				if (currP[i] > 0)
 8001ae6:	786b      	ldrb	r3, [r5, #1]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0ce      	beq.n	8001a8a <Prog_0+0x72>
					currP[i]--;
 8001aec:	3b01      	subs	r3, #1
 8001aee:	706b      	strb	r3, [r5, #1]
			if (destP[i])
 8001af0:	78b3      	ldrb	r3, [r6, #2]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1cc      	bne.n	8001a90 <Prog_0+0x78>
				if (currP[i] > 0)
 8001af6:	78ab      	ldrb	r3, [r5, #2]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0ce      	beq.n	8001a9a <Prog_0+0x82>
					currP[i]--;
 8001afc:	3b01      	subs	r3, #1
 8001afe:	70ab      	strb	r3, [r5, #2]
	rgbArr[0] = curr;
 8001b00:	f8d5 b000 	ldr.w	fp, [r5]
 8001b04:	e7cb      	b.n	8001a9e <Prog_0+0x86>
				if (currP[i] > 0)
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0ea      	beq.n	8001ae0 <Prog_0+0xc8>
					currP[i]--;
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	702b      	strb	r3, [r5, #0]
 8001b0e:	e7e7      	b.n	8001ae0 <Prog_0+0xc8>
 8001b10:	200006dc 	.word	0x200006dc
 8001b14:	200000a0 	.word	0x200000a0
 8001b18:	20000094 	.word	0x20000094
 8001b1c:	2000000a 	.word	0x2000000a
 8001b20:	08003780 	.word	0x08003780
 8001b24:	200000a4 	.word	0x200000a4
 8001b28:	20000220 	.word	0x20000220

08001b2c <Prog_1>:

// Случайная вспышка
void Prog_1()
{
 8001b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b30:	240a      	movs	r4, #10
		isFirst = 0;
 8001b32:	f04f 0b00 	mov.w	fp, #0
 8001b36:	4d2a      	ldr	r5, [pc, #168]	; (8001be0 <Prog_1+0xb4>)
 8001b38:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8001be4 <Prog_1+0xb8>
 8001b3c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8001be8 <Prog_1+0xbc>
		HAL_ADC_Start_IT(&hadc1);
 8001b40:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8001bec <Prog_1+0xc0>
	for (int i=0; i<10; i++)
	{
		uint32_t rnd = rgbConst[GetRandom(0)&7];
		uint16_t pos = GetRandom(0) % LED_NUM;
 8001b44:	4f2a      	ldr	r7, [pc, #168]	; (8001bf0 <Prog_1+0xc4>)
{
 8001b46:	b083      	sub	sp, #12
 8001b48:	e014      	b.n	8001b74 <Prog_1+0x48>
	rnd = rand();
 8001b4a:	f000 fdfb 	bl	8002744 <rand>
	if (isFirst)
 8001b4e:	782b      	ldrb	r3, [r5, #0]
		uint32_t rnd = rgbConst[GetRandom(0)&7];
 8001b50:	f000 0007 	and.w	r0, r0, #7
 8001b54:	f859 6020 	ldr.w	r6, [r9, r0, lsl #2]
	if (isFirst)
 8001b58:	bb0b      	cbnz	r3, 8001b9e <Prog_1+0x72>
	rnd = rand();
 8001b5a:	f000 fdf3 	bl	8002744 <rand>
		uint16_t pos = GetRandom(0) % LED_NUM;
 8001b5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b62:	fba7 1300 	umull	r1, r3, r7, r0
 8001b66:	095b      	lsrs	r3, r3, #5
 8001b68:	fb02 0013 	mls	r0, r2, r3, r0
	for (int i=0; i<10; i++)
 8001b6c:	3c01      	subs	r4, #1
		rgbArr[pos] = rnd;
 8001b6e:	f848 6020 	str.w	r6, [r8, r0, lsl #2]
	for (int i=0; i<10; i++)
 8001b72:	d028      	beq.n	8001bc6 <Prog_1+0x9a>
	if (isFirst)
 8001b74:	782b      	ldrb	r3, [r5, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0e7      	beq.n	8001b4a <Prog_1+0x1e>
		isFirst = 0;
 8001b7a:	f885 b000 	strb.w	fp, [r5]
		rnd = Random_GetRnd();
 8001b7e:	f000 fb85 	bl	800228c <Random_GetRnd>
 8001b82:	4606      	mov	r6, r0
		HAL_ADC_Start_IT(&hadc1);
 8001b84:	4650      	mov	r0, sl
 8001b86:	f7fe fd49 	bl	800061c <HAL_ADC_Start_IT>
		while (!rnd)
 8001b8a:	b926      	cbnz	r6, 8001b96 <Prog_1+0x6a>
			rnd = Random_GetRnd();
 8001b8c:	f000 fb7e 	bl	800228c <Random_GetRnd>
		while (!rnd)
 8001b90:	4606      	mov	r6, r0
 8001b92:	2800      	cmp	r0, #0
 8001b94:	d0fa      	beq.n	8001b8c <Prog_1+0x60>
		srand(rnd);
 8001b96:	4630      	mov	r0, r6
 8001b98:	f000 fda6 	bl	80026e8 <srand>
 8001b9c:	e7d5      	b.n	8001b4a <Prog_1+0x1e>
		isFirst = 0;
 8001b9e:	f885 b000 	strb.w	fp, [r5]
		rnd = Random_GetRnd();
 8001ba2:	f000 fb73 	bl	800228c <Random_GetRnd>
 8001ba6:	4603      	mov	r3, r0
		HAL_ADC_Start_IT(&hadc1);
 8001ba8:	4650      	mov	r0, sl
		rnd = Random_GetRnd();
 8001baa:	9301      	str	r3, [sp, #4]
		HAL_ADC_Start_IT(&hadc1);
 8001bac:	f7fe fd36 	bl	800061c <HAL_ADC_Start_IT>
		while (!rnd)
 8001bb0:	9b01      	ldr	r3, [sp, #4]
 8001bb2:	b923      	cbnz	r3, 8001bbe <Prog_1+0x92>
			rnd = Random_GetRnd();
 8001bb4:	f000 fb6a 	bl	800228c <Random_GetRnd>
		while (!rnd)
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2800      	cmp	r0, #0
 8001bbc:	d0fa      	beq.n	8001bb4 <Prog_1+0x88>
		srand(rnd);
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 fd92 	bl	80026e8 <srand>
 8001bc4:	e7c9      	b.n	8001b5a <Prog_1+0x2e>
 8001bc6:	4d0b      	ldr	r5, [pc, #44]	; (8001bf4 <Prog_1+0xc8>)
	}
	for (int i=0; i<LED_NUM; i++)
		ws2813_AddRGB(rgbArr[i], i);
 8001bc8:	4621      	mov	r1, r4
 8001bca:	f855 0f04 	ldr.w	r0, [r5, #4]!
	for (int i=0; i<LED_NUM; i++)
 8001bce:	3401      	adds	r4, #1
		ws2813_AddRGB(rgbArr[i], i);
 8001bd0:	f000 fd10 	bl	80025f4 <ws2813_AddRGB>
	for (int i=0; i<LED_NUM; i++)
 8001bd4:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
 8001bd8:	d1f6      	bne.n	8001bc8 <Prog_1+0x9c>
}
 8001bda:	b003      	add	sp, #12
 8001bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001be0:	2000000a 	.word	0x2000000a
 8001be4:	08003780 	.word	0x08003780
 8001be8:	20000220 	.word	0x20000220
 8001bec:	200000a4 	.word	0x200000a4
 8001bf0:	1b4e81b5 	.word	0x1b4e81b5
 8001bf4:	2000021c 	.word	0x2000021c

08001bf8 <Prog_2>:
	static uint32_t timer = 0;
	static uint32_t curr = 0;
	static uint16_t arrPos = 0; // указатель на начало массива

	// Задаем цвет нулевому диоду
	if (!timer)
 8001bf8:	4a2c      	ldr	r2, [pc, #176]	; (8001cac <Prog_2+0xb4>)
{
 8001bfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!timer)
 8001bfc:	6813      	ldr	r3, [r2, #0]
 8001bfe:	b373      	cbz	r3, 8001c5e <Prog_2+0x66>
	else
	{
		timer--;
	}

	rgbArr[arrPos] = curr;
 8001c00:	492b      	ldr	r1, [pc, #172]	; (8001cb0 <Prog_2+0xb8>)
		timer--;
 8001c02:	3b01      	subs	r3, #1
	rgbArr[arrPos] = curr;
 8001c04:	6809      	ldr	r1, [r1, #0]
		timer--;
 8001c06:	6013      	str	r3, [r2, #0]
	rgbArr[arrPos] = curr;
 8001c08:	4f2a      	ldr	r7, [pc, #168]	; (8001cb4 <Prog_2+0xbc>)
 8001c0a:	4e2b      	ldr	r6, [pc, #172]	; (8001cb8 <Prog_2+0xc0>)
 8001c0c:	883d      	ldrh	r5, [r7, #0]

	// Передаем в массив
	int pos = LED_NUM - 1;
	for (int i=arrPos; i<LED_NUM; i++)
 8001c0e:	f5b5 7f96 	cmp.w	r5, #300	; 0x12c
	rgbArr[arrPos] = curr;
 8001c12:	f846 1025 	str.w	r1, [r6, r5, lsl #2]
	for (int i=arrPos; i<LED_NUM; i++)
 8001c16:	da34      	bge.n	8001c82 <Prog_2+0x8a>
	int pos = LED_NUM - 1;
 8001c18:	f240 142b 	movw	r4, #299	; 0x12b
 8001c1c:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 8001c20:	3d01      	subs	r5, #1
		ws2813_AddRGB(rgbArr[i], pos--);
 8001c22:	4621      	mov	r1, r4
 8001c24:	f856 0b04 	ldr.w	r0, [r6], #4
 8001c28:	3c01      	subs	r4, #1
 8001c2a:	f000 fce3 	bl	80025f4 <ws2813_AddRGB>
	for (int i=arrPos; i<LED_NUM; i++)
 8001c2e:	42ac      	cmp	r4, r5
 8001c30:	d1f7      	bne.n	8001c22 <Prog_2+0x2a>
	for(int i=0; i<arrPos; i++)
 8001c32:	883b      	ldrh	r3, [r7, #0]
 8001c34:	b313      	cbz	r3, 8001c7c <Prog_2+0x84>
	int pos = LED_NUM - 1;
 8001c36:	462c      	mov	r4, r5
 8001c38:	4e1f      	ldr	r6, [pc, #124]	; (8001cb8 <Prog_2+0xc0>)
		ws2813_AddRGB(rgbArr[i], pos--);
 8001c3a:	4621      	mov	r1, r4
 8001c3c:	f856 0b04 	ldr.w	r0, [r6], #4
 8001c40:	f000 fcd8 	bl	80025f4 <ws2813_AddRGB>
 8001c44:	3c01      	subs	r4, #1
	for(int i=0; i<arrPos; i++)
 8001c46:	883b      	ldrh	r3, [r7, #0]
 8001c48:	1b2a      	subs	r2, r5, r4
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	dcf5      	bgt.n	8001c3a <Prog_2+0x42>

	arrPos++;
 8001c4e:	3301      	adds	r3, #1
 8001c50:	b29b      	uxth	r3, r3
	if (arrPos == LED_NUM)
 8001c52:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001c56:	d100      	bne.n	8001c5a <Prog_2+0x62>
		arrPos = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	803b      	strh	r3, [r7, #0]

}
 8001c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		timer = 25;//(TIME_MIN_TICK + GetRandom(0)) % TIME_MAX_TICK;
 8001c5e:	2419      	movs	r4, #25
	if (isFirst)
 8001c60:	4916      	ldr	r1, [pc, #88]	; (8001cbc <Prog_2+0xc4>)
		timer = 25;//(TIME_MIN_TICK + GetRandom(0)) % TIME_MAX_TICK;
 8001c62:	6014      	str	r4, [r2, #0]
	if (isFirst)
 8001c64:	7808      	ldrb	r0, [r1, #0]
 8001c66:	b978      	cbnz	r0, 8001c88 <Prog_2+0x90>
	rnd = rand();
 8001c68:	f000 fd6c 	bl	8002744 <rand>
		curr = rgbConst[GetRandom(0)&7];
 8001c6c:	4a14      	ldr	r2, [pc, #80]	; (8001cc0 <Prog_2+0xc8>)
 8001c6e:	f000 0007 	and.w	r0, r0, #7
 8001c72:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <Prog_2+0xb8>)
 8001c74:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
 8001c78:	6019      	str	r1, [r3, #0]
 8001c7a:	e7c5      	b.n	8001c08 <Prog_2+0x10>
	arrPos++;
 8001c7c:	2301      	movs	r3, #1
		arrPos = 0;
 8001c7e:	803b      	strh	r3, [r7, #0]
}
 8001c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int pos = LED_NUM - 1;
 8001c82:	f240 152b 	movw	r5, #299	; 0x12b
 8001c86:	e7d6      	b.n	8001c36 <Prog_2+0x3e>
		isFirst = 0;
 8001c88:	700b      	strb	r3, [r1, #0]
		rnd = Random_GetRnd();
 8001c8a:	f000 faff 	bl	800228c <Random_GetRnd>
 8001c8e:	4604      	mov	r4, r0
		HAL_ADC_Start_IT(&hadc1);
 8001c90:	480c      	ldr	r0, [pc, #48]	; (8001cc4 <Prog_2+0xcc>)
 8001c92:	f7fe fcc3 	bl	800061c <HAL_ADC_Start_IT>
		while (!rnd)
 8001c96:	b924      	cbnz	r4, 8001ca2 <Prog_2+0xaa>
			rnd = Random_GetRnd();
 8001c98:	f000 faf8 	bl	800228c <Random_GetRnd>
		while (!rnd)
 8001c9c:	4604      	mov	r4, r0
 8001c9e:	2800      	cmp	r0, #0
 8001ca0:	d0fa      	beq.n	8001c98 <Prog_2+0xa0>
		srand(rnd);
 8001ca2:	4620      	mov	r0, r4
 8001ca4:	f000 fd20 	bl	80026e8 <srand>
 8001ca8:	e7de      	b.n	8001c68 <Prog_2+0x70>
 8001caa:	bf00      	nop
 8001cac:	200006d8 	.word	0x200006d8
 8001cb0:	20000098 	.word	0x20000098
 8001cb4:	2000008c 	.word	0x2000008c
 8001cb8:	20000220 	.word	0x20000220
 8001cbc:	2000000a 	.word	0x2000000a
 8001cc0:	08003780 	.word	0x08003780
 8001cc4:	200000a4 	.word	0x200000a4

08001cc8 <Prog_3>:

// Бегущие огни
void Prog_3()
{
 8001cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	static int16_t pos[MAX_NUM];
	static uint32_t rgb[MAX_NUM];

	static uint8_t isFirst = 1;
	static int delay = 0;
	if (isFirst)
 8001ccc:	4b78      	ldr	r3, [pc, #480]	; (8001eb0 <Prog_3+0x1e8>)
{
 8001cce:	b083      	sub	sp, #12
	if (isFirst)
 8001cd0:	781a      	ldrb	r2, [r3, #0]
 8001cd2:	b392      	cbz	r2, 8001d3a <Prog_3+0x72>
	{
		isFirst = 0;
 8001cd4:	2400      	movs	r4, #0
 8001cd6:	4d77      	ldr	r5, [pc, #476]	; (8001eb4 <Prog_3+0x1ec>)
		isFirst = 0;
 8001cd8:	46a2      	mov	sl, r4
 8001cda:	4e77      	ldr	r6, [pc, #476]	; (8001eb8 <Prog_3+0x1f0>)
 8001cdc:	4f77      	ldr	r7, [pc, #476]	; (8001ebc <Prog_3+0x1f4>)
 8001cde:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8001ec0 <Prog_3+0x1f8>
		HAL_ADC_Start_IT(&hadc1);
 8001ce2:	f8df b1e0 	ldr.w	fp, [pc, #480]	; 8001ec4 <Prog_3+0x1fc>
 8001ce6:	f105 0920 	add.w	r9, r5, #32
		isFirst = 0;
 8001cea:	701c      	strb	r4, [r3, #0]
		for (int i=0; i<MAX_NUM; i++)
 8001cec:	e00b      	b.n	8001d06 <Prog_3+0x3e>
	rnd = rand();
 8001cee:	f000 fd29 	bl	8002744 <rand>
		{
			pos[i] = LED_NUM * i / MAX_NUM;
			rgb[i] = rgbConst[GetRandom(0)&7];
 8001cf2:	f000 0007 	and.w	r0, r0, #7
 8001cf6:	f858 3020 	ldr.w	r3, [r8, r0, lsl #2]
		for (int i=0; i<MAX_NUM; i++)
 8001cfa:	45a9      	cmp	r9, r5
 8001cfc:	f504 7496 	add.w	r4, r4, #300	; 0x12c
			rgb[i] = rgbConst[GetRandom(0)&7];
 8001d00:	f846 3f04 	str.w	r3, [r6, #4]!
		for (int i=0; i<MAX_NUM; i++)
 8001d04:	d019      	beq.n	8001d3a <Prog_3+0x72>
	if (isFirst)
 8001d06:	783b      	ldrb	r3, [r7, #0]
			pos[i] = LED_NUM * i / MAX_NUM;
 8001d08:	1122      	asrs	r2, r4, #4
 8001d0a:	f825 2f02 	strh.w	r2, [r5, #2]!
	if (isFirst)
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0ed      	beq.n	8001cee <Prog_3+0x26>
		isFirst = 0;
 8001d12:	f887 a000 	strb.w	sl, [r7]
		rnd = Random_GetRnd();
 8001d16:	f000 fab9 	bl	800228c <Random_GetRnd>
 8001d1a:	4603      	mov	r3, r0
		HAL_ADC_Start_IT(&hadc1);
 8001d1c:	4658      	mov	r0, fp
		rnd = Random_GetRnd();
 8001d1e:	9301      	str	r3, [sp, #4]
		HAL_ADC_Start_IT(&hadc1);
 8001d20:	f7fe fc7c 	bl	800061c <HAL_ADC_Start_IT>
		while (!rnd)
 8001d24:	9b01      	ldr	r3, [sp, #4]
 8001d26:	b923      	cbnz	r3, 8001d32 <Prog_3+0x6a>
			rnd = Random_GetRnd();
 8001d28:	f000 fab0 	bl	800228c <Random_GetRnd>
		while (!rnd)
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2800      	cmp	r0, #0
 8001d30:	d0fa      	beq.n	8001d28 <Prog_3+0x60>
		srand(rnd);
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 fcd8 	bl	80026e8 <srand>
 8001d38:	e7d9      	b.n	8001cee <Prog_3+0x26>
		}
	}

	if ((delay++ & 0x1F) == 0)
 8001d3a:	4a63      	ldr	r2, [pc, #396]	; (8001ec8 <Prog_3+0x200>)
 8001d3c:	6813      	ldr	r3, [r2, #0]
 8001d3e:	1c59      	adds	r1, r3, #1
 8001d40:	06db      	lsls	r3, r3, #27
 8001d42:	6011      	str	r1, [r2, #0]
 8001d44:	f040 8092 	bne.w	8001e6c <Prog_3+0x1a4>
 8001d48:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8001ecc <Prog_3+0x204>
 8001d4c:	4c59      	ldr	r4, [pc, #356]	; (8001eb4 <Prog_3+0x1ec>)
 8001d4e:	46ca      	mov	sl, r9
	if (isFirst)
 8001d50:	4e5a      	ldr	r6, [pc, #360]	; (8001ebc <Prog_3+0x1f4>)
	{
		for (int i=0; i<MAX_NUM; i++)
			if (++pos[i]==LED_NUM)
			{
				rgb[i] = rgbConst[GetRandom(0)&7];
 8001d52:	4f5b      	ldr	r7, [pc, #364]	; (8001ec0 <Prog_3+0x1f8>)
		HAL_ADC_Start_IT(&hadc1);
 8001d54:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8001ec4 <Prog_3+0x1fc>
 8001d58:	f104 0520 	add.w	r5, r4, #32
 8001d5c:	e003      	b.n	8001d66 <Prog_3+0x9e>
		for (int i=0; i<MAX_NUM; i++)
 8001d5e:	42ac      	cmp	r4, r5
 8001d60:	f10a 0a04 	add.w	sl, sl, #4
 8001d64:	d019      	beq.n	8001d9a <Prog_3+0xd2>
			if (++pos[i]==LED_NUM)
 8001d66:	f834 3f02 	ldrh.w	r3, [r4, #2]!
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	b21b      	sxth	r3, r3
 8001d6e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001d72:	8023      	strh	r3, [r4, #0]
 8001d74:	d1f3      	bne.n	8001d5e <Prog_3+0x96>
	if (isFirst)
 8001d76:	7833      	ldrb	r3, [r6, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f040 8085 	bne.w	8001e88 <Prog_3+0x1c0>
	rnd = rand();
 8001d7e:	f000 fce1 	bl	8002744 <rand>
				pos[i] = 0;
 8001d82:	2200      	movs	r2, #0
				rgb[i] = rgbConst[GetRandom(0)&7];
 8001d84:	f000 0007 	and.w	r0, r0, #7
 8001d88:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
		for (int i=0; i<MAX_NUM; i++)
 8001d8c:	42ac      	cmp	r4, r5
				rgb[i] = rgbConst[GetRandom(0)&7];
 8001d8e:	f8ca 3000 	str.w	r3, [sl]
				pos[i] = 0;
 8001d92:	8022      	strh	r2, [r4, #0]
		for (int i=0; i<MAX_NUM; i++)
 8001d94:	f10a 0a04 	add.w	sl, sl, #4
 8001d98:	d1e5      	bne.n	8001d66 <Prog_3+0x9e>
			}

		// Передаем в массив
		memset(rgbArr, 0, LED_NUM*4);
 8001d9a:	4b4d      	ldr	r3, [pc, #308]	; (8001ed0 <Prog_3+0x208>)
 8001d9c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001da0:	2100      	movs	r1, #0
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 fe2b 	bl	80029fe <memset>
 8001da8:	4603      	mov	r3, r0
		for (int i=0; i<MAX_NUM; i++)
			rgbArr[pos[i]] = rgb[i];
 8001daa:	4a4a      	ldr	r2, [pc, #296]	; (8001ed4 <Prog_3+0x20c>)
 8001dac:	f8d9 0000 	ldr.w	r0, [r9]
 8001db0:	f9b2 1000 	ldrsh.w	r1, [r2]
 8001db4:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
 8001db8:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 8001dbc:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8001dc0:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
 8001dc4:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8001dc8:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8001dcc:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
 8001dd0:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 8001dd4:	f8d9 000c 	ldr.w	r0, [r9, #12]
 8001dd8:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
 8001ddc:	f9b2 1008 	ldrsh.w	r1, [r2, #8]
 8001de0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8001de4:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
 8001de8:	f9b2 100a 	ldrsh.w	r1, [r2, #10]
 8001dec:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8001df0:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
 8001df4:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
 8001df8:	f8d9 0018 	ldr.w	r0, [r9, #24]
 8001dfc:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
 8001e00:	f9b2 100e 	ldrsh.w	r1, [r2, #14]
 8001e04:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8001e08:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
 8001e0c:	f9b2 1010 	ldrsh.w	r1, [r2, #16]
 8001e10:	f8d9 0020 	ldr.w	r0, [r9, #32]
 8001e14:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
 8001e18:	f9b2 1012 	ldrsh.w	r1, [r2, #18]
 8001e1c:	f8d9 0024 	ldr.w	r0, [r9, #36]	; 0x24
 8001e20:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
 8001e24:	f9b2 1014 	ldrsh.w	r1, [r2, #20]
 8001e28:	f8d9 0028 	ldr.w	r0, [r9, #40]	; 0x28
 8001e2c:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
 8001e30:	f9b2 1016 	ldrsh.w	r1, [r2, #22]
 8001e34:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 8001e38:	f8d9 4038 	ldr.w	r4, [r9, #56]	; 0x38
 8001e3c:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
 8001e40:	f9b2 1018 	ldrsh.w	r1, [r2, #24]
 8001e44:	f8d9 0030 	ldr.w	r0, [r9, #48]	; 0x30
 8001e48:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
 8001e4c:	f9b2 101a 	ldrsh.w	r1, [r2, #26]
 8001e50:	f8d9 0034 	ldr.w	r0, [r9, #52]	; 0x34
 8001e54:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
 8001e58:	f9b2 001c 	ldrsh.w	r0, [r2, #28]
 8001e5c:	f8d9 103c 	ldr.w	r1, [r9, #60]	; 0x3c
 8001e60:	f9b2 201e 	ldrsh.w	r2, [r2, #30]
 8001e64:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
 8001e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		isFirst = 0;
 8001e6c:	2400      	movs	r4, #0
 8001e6e:	4d1a      	ldr	r5, [pc, #104]	; (8001ed8 <Prog_3+0x210>)
	}
	for(int i=0; i<LED_NUM; i++)
		ws2813_AddRGB(rgbArr[i], i);
 8001e70:	4621      	mov	r1, r4
 8001e72:	f855 0f04 	ldr.w	r0, [r5, #4]!
	for(int i=0; i<LED_NUM; i++)
 8001e76:	3401      	adds	r4, #1
		ws2813_AddRGB(rgbArr[i], i);
 8001e78:	f000 fbbc 	bl	80025f4 <ws2813_AddRGB>
	for(int i=0; i<LED_NUM; i++)
 8001e7c:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
 8001e80:	d1f6      	bne.n	8001e70 <Prog_3+0x1a8>

}
 8001e82:	b003      	add	sp, #12
 8001e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		isFirst = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	7033      	strb	r3, [r6, #0]
		rnd = Random_GetRnd();
 8001e8c:	f000 f9fe 	bl	800228c <Random_GetRnd>
 8001e90:	4603      	mov	r3, r0
		HAL_ADC_Start_IT(&hadc1);
 8001e92:	4640      	mov	r0, r8
		rnd = Random_GetRnd();
 8001e94:	9301      	str	r3, [sp, #4]
		HAL_ADC_Start_IT(&hadc1);
 8001e96:	f7fe fbc1 	bl	800061c <HAL_ADC_Start_IT>
		while (!rnd)
 8001e9a:	9b01      	ldr	r3, [sp, #4]
 8001e9c:	b923      	cbnz	r3, 8001ea8 <Prog_3+0x1e0>
			rnd = Random_GetRnd();
 8001e9e:	f000 f9f5 	bl	800228c <Random_GetRnd>
		while (!rnd)
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2800      	cmp	r0, #0
 8001ea6:	d0fa      	beq.n	8001e9e <Prog_3+0x1d6>
		srand(rnd);
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f000 fc1d 	bl	80026e8 <srand>
 8001eae:	e766      	b.n	8001d7e <Prog_3+0xb6>
 8001eb0:	2000000b 	.word	0x2000000b
 8001eb4:	200001be 	.word	0x200001be
 8001eb8:	200001dc 	.word	0x200001dc
 8001ebc:	2000000a 	.word	0x2000000a
 8001ec0:	08003780 	.word	0x08003780
 8001ec4:	200000a4 	.word	0x200000a4
 8001ec8:	2000009c 	.word	0x2000009c
 8001ecc:	200001e0 	.word	0x200001e0
 8001ed0:	20000220 	.word	0x20000220
 8001ed4:	200001c0 	.word	0x200001c0
 8001ed8:	2000021c 	.word	0x2000021c

08001edc <Prog_4>:

void Prog_4()
{
 8001edc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	#define DIVIDER (50*5) // 5сек
	static uint32_t tim = 0;
	if (!tim)
 8001ee0:	f8df b080 	ldr.w	fp, [pc, #128]	; 8001f64 <Prog_4+0x88>
 8001ee4:	f8db 3000 	ldr.w	r3, [fp]
 8001ee8:	bb63      	cbnz	r3, 8001f44 <Prog_4+0x68>
	{
		tim = DIVIDER;
 8001eea:	22fa      	movs	r2, #250	; 0xfa
 8001eec:	4d1e      	ldr	r5, [pc, #120]	; (8001f68 <Prog_4+0x8c>)
		isFirst = 0;
 8001eee:	4699      	mov	r9, r3
 8001ef0:	4e1e      	ldr	r6, [pc, #120]	; (8001f6c <Prog_4+0x90>)
 8001ef2:	4f1f      	ldr	r7, [pc, #124]	; (8001f70 <Prog_4+0x94>)
		HAL_ADC_Start_IT(&hadc1);
 8001ef4:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8001f74 <Prog_4+0x98>
 8001ef8:	f505 6896 	add.w	r8, r5, #1200	; 0x4b0
		tim = DIVIDER;
 8001efc:	f8cb 2000 	str.w	r2, [fp]
		for( int i=0; i<LED_NUM; i++)
 8001f00:	e009      	b.n	8001f16 <Prog_4+0x3a>
	rnd = rand();
 8001f02:	f000 fc1f 	bl	8002744 <rand>
			rgbArr[i] = rgbConst[GetRandom(0)&7];
 8001f06:	f000 0007 	and.w	r0, r0, #7
 8001f0a:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
 8001f0e:	f845 3f04 	str.w	r3, [r5, #4]!
		for( int i=0; i<LED_NUM; i++)
 8001f12:	4545      	cmp	r5, r8
 8001f14:	d014      	beq.n	8001f40 <Prog_4+0x64>
	if (isFirst)
 8001f16:	7833      	ldrb	r3, [r6, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0f2      	beq.n	8001f02 <Prog_4+0x26>
		isFirst = 0;
 8001f1c:	f886 9000 	strb.w	r9, [r6]
		rnd = Random_GetRnd();
 8001f20:	f000 f9b4 	bl	800228c <Random_GetRnd>
 8001f24:	4604      	mov	r4, r0
		HAL_ADC_Start_IT(&hadc1);
 8001f26:	4650      	mov	r0, sl
 8001f28:	f7fe fb78 	bl	800061c <HAL_ADC_Start_IT>
		while (!rnd)
 8001f2c:	b924      	cbnz	r4, 8001f38 <Prog_4+0x5c>
			rnd = Random_GetRnd();
 8001f2e:	f000 f9ad 	bl	800228c <Random_GetRnd>
		while (!rnd)
 8001f32:	4604      	mov	r4, r0
 8001f34:	2800      	cmp	r0, #0
 8001f36:	d0fa      	beq.n	8001f2e <Prog_4+0x52>
		srand(rnd);
 8001f38:	4620      	mov	r0, r4
 8001f3a:	f000 fbd5 	bl	80026e8 <srand>
 8001f3e:	e7e0      	b.n	8001f02 <Prog_4+0x26>
	}
	tim--;
 8001f40:	f8db 3000 	ldr.w	r3, [fp]

	for(int i=0; i<LED_NUM; i++)
 8001f44:	2400      	movs	r4, #0
	tim--;
 8001f46:	3b01      	subs	r3, #1
 8001f48:	4d07      	ldr	r5, [pc, #28]	; (8001f68 <Prog_4+0x8c>)
 8001f4a:	f8cb 3000 	str.w	r3, [fp]
		ws2813_AddRGB(rgbArr[i], i);
 8001f4e:	4621      	mov	r1, r4
 8001f50:	f855 0f04 	ldr.w	r0, [r5, #4]!
	for(int i=0; i<LED_NUM; i++)
 8001f54:	3401      	adds	r4, #1
		ws2813_AddRGB(rgbArr[i], i);
 8001f56:	f000 fb4d 	bl	80025f4 <ws2813_AddRGB>
	for(int i=0; i<LED_NUM; i++)
 8001f5a:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
 8001f5e:	d1f6      	bne.n	8001f4e <Prog_4+0x72>
}
 8001f60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f64:	200006d0 	.word	0x200006d0
 8001f68:	2000021c 	.word	0x2000021c
 8001f6c:	2000000a 	.word	0x2000000a
 8001f70:	08003780 	.word	0x08003780
 8001f74:	200000a4 	.word	0x200000a4

08001f78 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f78:	2300      	movs	r3, #0
{
 8001f7a:	b5d0      	push	{r4, r6, r7, lr}
 8001f7c:	b094      	sub	sp, #80	; 0x50
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f7e:	2601      	movs	r6, #1
 8001f80:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f84:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f86:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f88:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f8c:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f90:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8001f94:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f98:	e9cd 3302 	strd	r3, r3, [sp, #8]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f9c:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f9e:	9305      	str	r3, [sp, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fa0:	9301      	str	r3, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fa2:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fa4:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001fa6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001faa:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fac:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fb0:	910e      	str	r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fb2:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fb4:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001fb6:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fb8:	f7fe fe34 	bl	8000c24 <HAL_RCC_OscConfig>
 8001fbc:	b108      	cbz	r0, 8001fc2 <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fbe:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fc0:	e7fe      	b.n	8001fc0 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	220f      	movs	r2, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fc6:	e9cd 4306 	strd	r4, r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fca:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fd0:	4621      	mov	r1, r4
 8001fd2:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fd4:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fd6:	9205      	str	r2, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fd8:	f7ff f814 	bl	8001004 <HAL_RCC_ClockConfig>
 8001fdc:	b108      	cbz	r0, 8001fe2 <SystemClock_Config+0x6a>
 8001fde:	b672      	cpsid	i
  while (1)
 8001fe0:	e7fe      	b.n	8001fe0 <SystemClock_Config+0x68>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fe6:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001fe8:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001fea:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fec:	f7ff f8da 	bl	80011a4 <HAL_RCCEx_PeriphCLKConfig>
 8001ff0:	b108      	cbz	r0, 8001ff6 <SystemClock_Config+0x7e>
 8001ff2:	b672      	cpsid	i
  while (1)
 8001ff4:	e7fe      	b.n	8001ff4 <SystemClock_Config+0x7c>
}
 8001ff6:	b014      	add	sp, #80	; 0x50
 8001ff8:	bdd0      	pop	{r4, r6, r7, pc}
 8001ffa:	bf00      	nop

08001ffc <main>:
{
 8001ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002000:	2601      	movs	r6, #1
{
 8002002:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 8002004:	f7fe f8c6 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 8002008:	f7ff ffb6 	bl	8001f78 <SystemClock_Config>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800200c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800200e:	4b6c      	ldr	r3, [pc, #432]	; (80021c0 <main+0x1c4>)
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002010:	200d      	movs	r0, #13
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002012:	6999      	ldr	r1, [r3, #24]
  hspi1.Instance = SPI1;
 8002014:	4c6b      	ldr	r4, [pc, #428]	; (80021c4 <main+0x1c8>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002016:	f041 0120 	orr.w	r1, r1, #32
 800201a:	6199      	str	r1, [r3, #24]
 800201c:	6999      	ldr	r1, [r3, #24]
 800201e:	f001 0120 	and.w	r1, r1, #32
 8002022:	9101      	str	r1, [sp, #4]
 8002024:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002026:	6999      	ldr	r1, [r3, #24]
 8002028:	f041 0104 	orr.w	r1, r1, #4
 800202c:	6199      	str	r1, [r3, #24]
 800202e:	6999      	ldr	r1, [r3, #24]
 8002030:	f001 0104 	and.w	r1, r1, #4
 8002034:	9102      	str	r1, [sp, #8]
 8002036:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002038:	6959      	ldr	r1, [r3, #20]
 800203a:	4331      	orrs	r1, r6
 800203c:	6159      	str	r1, [r3, #20]
 800203e:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002040:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002042:	4033      	ands	r3, r6
 8002044:	9303      	str	r3, [sp, #12]
 8002046:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002048:	f7fe fb66 	bl	8000718 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800204c:	200d      	movs	r0, #13
 800204e:	f7fe fba1 	bl	8000794 <HAL_NVIC_EnableIRQ>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002052:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi1.Instance = SPI1;
 8002056:	485c      	ldr	r0, [pc, #368]	; (80021c8 <main+0x1cc>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002058:	2300      	movs	r3, #0
  hspi1.Instance = SPI1;
 800205a:	6020      	str	r0, [r4, #0]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800205c:	2020      	movs	r0, #32
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800205e:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002062:	6062      	str	r2, [r4, #4]
  hspi1.Init.CRCPolynomial = 10;
 8002064:	220a      	movs	r2, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002066:	61e0      	str	r0, [r4, #28]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002068:	4620      	mov	r0, r4
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800206a:	e9c4 3302 	strd	r3, r3, [r4, #8]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800206e:	e9c4 3308 	strd	r3, r3, [r4, #32]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002072:	6166      	str	r6, [r4, #20]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002074:	6123      	str	r3, [r4, #16]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002076:	61a1      	str	r1, [r4, #24]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002078:	62a3      	str	r3, [r4, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800207a:	62e2      	str	r2, [r4, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800207c:	f7ff f96a 	bl	8001354 <HAL_SPI_Init>
 8002080:	b108      	cbz	r0, 8002086 <main+0x8a>
 8002082:	b672      	cpsid	i
  while (1)
 8002084:	e7fe      	b.n	8002084 <main+0x88>
  hadc1.Instance = ADC1;
 8002086:	4d51      	ldr	r5, [pc, #324]	; (80021cc <main+0x1d0>)
 8002088:	4a51      	ldr	r2, [pc, #324]	; (80021d0 <main+0x1d4>)
 800208a:	4603      	mov	r3, r0
 800208c:	602a      	str	r2, [r5, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800208e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 8002092:	9006      	str	r0, [sp, #24]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002094:	60a8      	str	r0, [r5, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002096:	7328      	strb	r0, [r5, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002098:	7528      	strb	r0, [r5, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800209a:	6068      	str	r0, [r5, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800209c:	4628      	mov	r0, r5
  ADC_ChannelConfTypeDef sConfig = {0};
 800209e:	e9cd 3307 	strd	r3, r3, [sp, #28]
  hadc1.Init.NbrOfConversion = 1;
 80020a2:	612e      	str	r6, [r5, #16]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020a4:	61ea      	str	r2, [r5, #28]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020a6:	f7fe f899 	bl	80001dc <HAL_ADC_Init>
 80020aa:	b108      	cbz	r0, 80020b0 <main+0xb4>
 80020ac:	b672      	cpsid	i
  while (1)
 80020ae:	e7fe      	b.n	80020ae <main+0xb2>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80020b0:	2210      	movs	r2, #16
 80020b2:	2301      	movs	r3, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80020b4:	9008      	str	r0, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020b6:	a906      	add	r1, sp, #24
 80020b8:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80020ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020be:	f7fe f9cf 	bl	8000460 <HAL_ADC_ConfigChannel>
 80020c2:	b108      	cbz	r0, 80020c8 <main+0xcc>
 80020c4:	b672      	cpsid	i
  while (1)
 80020c6:	e7fe      	b.n	80020c6 <main+0xca>
  hcrc.Instance = CRC;
 80020c8:	4842      	ldr	r0, [pc, #264]	; (80021d4 <main+0x1d8>)
 80020ca:	4b43      	ldr	r3, [pc, #268]	; (80021d8 <main+0x1dc>)
 80020cc:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80020ce:	f7fe fb87 	bl	80007e0 <HAL_CRC_Init>
 80020d2:	b9b8      	cbnz	r0, 8002104 <main+0x108>
  htim1.Init.Prescaler = 71;
 80020d4:	2147      	movs	r1, #71	; 0x47
  htim1.Init.Period = 20000;
 80020d6:	f644 6220 	movw	r2, #20000	; 0x4e20
  htim1.Instance = TIM1;
 80020da:	4f40      	ldr	r7, [pc, #256]	; (80021dc <main+0x1e0>)
 80020dc:	4b40      	ldr	r3, [pc, #256]	; (80021e0 <main+0x1e4>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020de:	e9cd 0006 	strd	r0, r0, [sp, #24]
 80020e2:	e9cd 0008 	strd	r0, r0, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e6:	e9cd 0004 	strd	r0, r0, [sp, #16]
  htim1.Init.RepetitionCounter = 0;
 80020ea:	e9c7 0004 	strd	r0, r0, [r7, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ee:	60b8      	str	r0, [r7, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f0:	61b8      	str	r0, [r7, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020f2:	4638      	mov	r0, r7
  htim1.Init.Prescaler = 71;
 80020f4:	6079      	str	r1, [r7, #4]
  htim1.Init.Period = 20000;
 80020f6:	60fa      	str	r2, [r7, #12]
  htim1.Instance = TIM1;
 80020f8:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020fa:	f7ff fa49 	bl	8001590 <HAL_TIM_Base_Init>
 80020fe:	b118      	cbz	r0, 8002108 <main+0x10c>
 8002100:	b672      	cpsid	i
  while (1)
 8002102:	e7fe      	b.n	8002102 <main+0x106>
 8002104:	b672      	cpsid	i
 8002106:	e7fe      	b.n	8002106 <main+0x10a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800210c:	4638      	mov	r0, r7
 800210e:	a906      	add	r1, sp, #24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002110:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002112:	f7ff facf 	bl	80016b4 <HAL_TIM_ConfigClockSource>
 8002116:	b108      	cbz	r0, 800211c <main+0x120>
 8002118:	b672      	cpsid	i
  while (1)
 800211a:	e7fe      	b.n	800211a <main+0x11e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800211c:	2200      	movs	r2, #0
 800211e:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002120:	4638      	mov	r0, r7
 8002122:	a904      	add	r1, sp, #16
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002124:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002128:	f7ff fc1c 	bl	8001964 <HAL_TIMEx_MasterConfigSynchronization>
 800212c:	4606      	mov	r6, r0
 800212e:	b108      	cbz	r0, 8002134 <main+0x138>
 8002130:	b672      	cpsid	i
  while (1)
 8002132:	e7fe      	b.n	8002132 <main+0x136>
  HAL_TIM_Base_Start_IT(&htim1);
 8002134:	4638      	mov	r0, r7
 8002136:	f7ff fa95 	bl	8001664 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_IT(&hadc1);
 800213a:	4628      	mov	r0, r5
 800213c:	f7fe fa6e 	bl	800061c <HAL_ADC_Start_IT>
		if (timerCounter == 50*60*3) // 3 минуты
 8002140:	f242 3928 	movw	r9, #9000	; 0x2328
  ws2813_FillConvertBuffer();
 8002144:	f000 fa26 	bl	8002594 <ws2813_FillConvertBuffer>
 8002148:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80021e4 <main+0x1e8>
 800214c:	4f26      	ldr	r7, [pc, #152]	; (80021e8 <main+0x1ec>)
 800214e:	4d27      	ldr	r5, [pc, #156]	; (80021ec <main+0x1f0>)
 8002150:	f8df a09c 	ldr.w	sl, [pc, #156]	; 80021f0 <main+0x1f4>
		if (timerCounter == 50*60*3) // 3 минуты
 8002154:	f8d8 3000 	ldr.w	r3, [r8]
 8002158:	454b      	cmp	r3, r9
 800215a:	d104      	bne.n	8002166 <main+0x16a>
				currentProg++;
 800215c:	783b      	ldrb	r3, [r7, #0]
				timerCounter = 0;
 800215e:	f8c8 6000 	str.w	r6, [r8]
				currentProg++;
 8002162:	3301      	adds	r3, #1
 8002164:	703b      	strb	r3, [r7, #0]
			switch(currentProg)
 8002166:	783b      	ldrb	r3, [r7, #0]
 8002168:	2b04      	cmp	r3, #4
 800216a:	d827      	bhi.n	80021bc <main+0x1c0>
 800216c:	e8df f003 	tbb	[pc, r3]
 8002170:	1a1d2023 	.word	0x1a1d2023
 8002174:	03          	.byte	0x03
 8002175:	00          	.byte	0x00
					Prog_4();
 8002176:	f7ff feb1 	bl	8001edc <Prog_4>
			while(!dmaFlag);
 800217a:	782b      	ldrb	r3, [r5, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0fc      	beq.n	800217a <main+0x17e>
			dmaFlag = 0;
 8002180:	702e      	strb	r6, [r5, #0]
			while(!timFlag);
 8002182:	f89a 3000 	ldrb.w	r3, [sl]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0fb      	beq.n	8002182 <main+0x186>
			timFlag = 0;
 800218a:	f88a 6000 	strb.w	r6, [sl]
			uint8_t *cdmaBuff = ws2813_GetDMAbuff();
 800218e:	f000 fa79 	bl	8002684 <ws2813_GetDMAbuff>
			HAL_SPI_Transmit_DMA(&hspi1, cdmaBuff, DMA_BUFF_SIZE);
 8002192:	f640 228c 	movw	r2, #2700	; 0xa8c
			uint8_t *cdmaBuff = ws2813_GetDMAbuff();
 8002196:	4601      	mov	r1, r0
			HAL_SPI_Transmit_DMA(&hspi1, cdmaBuff, DMA_BUFF_SIZE);
 8002198:	4620      	mov	r0, r4
 800219a:	f7ff f939 	bl	8001410 <HAL_SPI_Transmit_DMA>
			ws2813_ChangeCurrentBuff();
 800219e:	f000 fa67 	bl	8002670 <ws2813_ChangeCurrentBuff>
  {
 80021a2:	e7d7      	b.n	8002154 <main+0x158>
					Prog_3();
 80021a4:	f7ff fd90 	bl	8001cc8 <Prog_3>
					break;
 80021a8:	e7e7      	b.n	800217a <main+0x17e>
					Prog_2();
 80021aa:	f7ff fd25 	bl	8001bf8 <Prog_2>
					break;
 80021ae:	e7e4      	b.n	800217a <main+0x17e>
					Prog_1();
 80021b0:	f7ff fcbc 	bl	8001b2c <Prog_1>
					break;
 80021b4:	e7e1      	b.n	800217a <main+0x17e>
					Prog_0();
 80021b6:	f7ff fc2f 	bl	8001a18 <Prog_0>
					break;
 80021ba:	e7de      	b.n	800217a <main+0x17e>
					currentProg = 0;
 80021bc:	703e      	strb	r6, [r7, #0]
					break;
 80021be:	e7dc      	b.n	800217a <main+0x17e>
 80021c0:	40021000 	.word	0x40021000
 80021c4:	20000120 	.word	0x20000120
 80021c8:	40013000 	.word	0x40013000
 80021cc:	200000a4 	.word	0x200000a4
 80021d0:	40012400 	.word	0x40012400
 80021d4:	200000d4 	.word	0x200000d4
 80021d8:	40023000 	.word	0x40023000
 80021dc:	20000178 	.word	0x20000178
 80021e0:	40012c00 	.word	0x40012c00
 80021e4:	200006e0 	.word	0x200006e0
 80021e8:	20000008 	.word	0x20000008
 80021ec:	20000009 	.word	0x20000009
 80021f0:	200006d4 	.word	0x200006d4

080021f4 <Error_Handler>:
 80021f4:	b672      	cpsid	i
  while (1)
 80021f6:	e7fe      	b.n	80021f6 <Error_Handler+0x2>

080021f8 <Random_AddBit>:
//				1 - Первый бит пары
//				2 - 00 или 11. Отброшены
//				3 - Бит принят
//				4 - Слово сформировано
uint8_t Random_AddBit(uint32_t ext_bit)
{
 80021f8:	b430      	push	{r4, r5}
	static uint32_t word = 0;
	static uint8_t bit = 0; // текущий вычисляемый бит
	static uint8_t pairN = 0; // Номер принимаемого бита
	static uint8_t lastBit ; // Сохраняем бит с номером 0

	if (currentWord == RANDOM_BUFF_SIZE_WORDS) 
 80021fa:	4c1e      	ldr	r4, [pc, #120]	; (8002274 <Random_AddBit+0x7c>)
 80021fc:	f894 c000 	ldrb.w	ip, [r4]
 8002200:	f1bc 0f08 	cmp.w	ip, #8
 8002204:	d024      	beq.n	8002250 <Random_AddBit+0x58>
		return 0;
	ext_bit &= 1;
	if ((pairN++ & 1) == 0)
 8002206:	491c      	ldr	r1, [pc, #112]	; (8002278 <Random_AddBit+0x80>)
	ext_bit &= 1;
 8002208:	f000 0301 	and.w	r3, r0, #1
	if ((pairN++ & 1) == 0)
 800220c:	780a      	ldrb	r2, [r1, #0]
 800220e:	1c50      	adds	r0, r2, #1
 8002210:	f012 0f01 	tst.w	r2, #1
 8002214:	7008      	strb	r0, [r1, #0]
	{
		lastBit = ext_bit;
 8002216:	4a19      	ldr	r2, [pc, #100]	; (800227c <Random_AddBit+0x84>)
	if ((pairN++ & 1) == 0)
 8002218:	d00d      	beq.n	8002236 <Random_AddBit+0x3e>
		return 1;
	}
	if ((lastBit ^ ext_bit) == 0)	// 00 или 11 - отбрасываем
 800221a:	7812      	ldrb	r2, [r2, #0]
 800221c:	429a      	cmp	r2, r3
 800221e:	d01a      	beq.n	8002256 <Random_AddBit+0x5e>
	{
		return 2;
	}
	if (lastBit)
 8002220:	b96a      	cbnz	r2, 800223e <Random_AddBit+0x46>
	{
		word |= 1<<bit;
 8002222:	4a17      	ldr	r2, [pc, #92]	; (8002280 <Random_AddBit+0x88>)
 8002224:	7813      	ldrb	r3, [r2, #0]
	}
	bit++;
 8002226:	3301      	adds	r3, #1
 8002228:	b2db      	uxtb	r3, r3
	if (bit == 32)
 800222a:	2b20      	cmp	r3, #32
	bit++;
 800222c:	7013      	strb	r3, [r2, #0]
	if (bit == 32)
 800222e:	d014      	beq.n	800225a <Random_AddBit+0x62>
		word = 0;
		bit = 0;
		return 4;
	}

	return 3;
 8002230:	2003      	movs	r0, #3
}
 8002232:	bc30      	pop	{r4, r5}
 8002234:	4770      	bx	lr
		lastBit = ext_bit;
 8002236:	7013      	strb	r3, [r2, #0]
		return 1;
 8002238:	2001      	movs	r0, #1
}
 800223a:	bc30      	pop	{r4, r5}
 800223c:	4770      	bx	lr
		word |= 1<<bit;
 800223e:	2101      	movs	r1, #1
 8002240:	4a0f      	ldr	r2, [pc, #60]	; (8002280 <Random_AddBit+0x88>)
 8002242:	4810      	ldr	r0, [pc, #64]	; (8002284 <Random_AddBit+0x8c>)
 8002244:	7813      	ldrb	r3, [r2, #0]
 8002246:	6805      	ldr	r5, [r0, #0]
 8002248:	4099      	lsls	r1, r3
 800224a:	4329      	orrs	r1, r5
 800224c:	6001      	str	r1, [r0, #0]
 800224e:	e7ea      	b.n	8002226 <Random_AddBit+0x2e>
		return 0;
 8002250:	2000      	movs	r0, #0
}
 8002252:	bc30      	pop	{r4, r5}
 8002254:	4770      	bx	lr
		return 2;
 8002256:	2002      	movs	r0, #2
 8002258:	e7eb      	b.n	8002232 <Random_AddBit+0x3a>
		rndBuff[currentWord++] = word;
 800225a:	490a      	ldr	r1, [pc, #40]	; (8002284 <Random_AddBit+0x8c>)
 800225c:	f10c 0001 	add.w	r0, ip, #1
 8002260:	4b09      	ldr	r3, [pc, #36]	; (8002288 <Random_AddBit+0x90>)
 8002262:	7020      	strb	r0, [r4, #0]
 8002264:	6808      	ldr	r0, [r1, #0]
 8002266:	f843 002c 	str.w	r0, [r3, ip, lsl #2]
		word = 0;
 800226a:	2300      	movs	r3, #0
		return 4;
 800226c:	2004      	movs	r0, #4
		word = 0;
 800226e:	600b      	str	r3, [r1, #0]
		bit = 0;
 8002270:	7013      	strb	r3, [r2, #0]
		return 4;
 8002272:	e7de      	b.n	8002232 <Random_AddBit+0x3a>
 8002274:	200006e5 	.word	0x200006e5
 8002278:	200006e7 	.word	0x200006e7
 800227c:	200006e6 	.word	0x200006e6
 8002280:	200006e4 	.word	0x200006e4
 8002284:	20000708 	.word	0x20000708
 8002288:	200006e8 	.word	0x200006e8

0800228c <Random_GetRnd>:

// При ошибке возвращаем 0 - не хорошо, но и 0 - плохое случайное число, да и редкое
uint32_t Random_GetRnd()
{
	if (currentWord == 0) return 0; // нет готовых слов
 800228c:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <Random_GetRnd+0x18>)
 800228e:	7818      	ldrb	r0, [r3, #0]
 8002290:	b130      	cbz	r0, 80022a0 <Random_GetRnd+0x14>
	currentWord--;
 8002292:	3801      	subs	r0, #1
 8002294:	b2c2      	uxtb	r2, r0
	return rndBuff[currentWord - 1];
 8002296:	4904      	ldr	r1, [pc, #16]	; (80022a8 <Random_GetRnd+0x1c>)
 8002298:	1e50      	subs	r0, r2, #1
 800229a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
	currentWord--;
 800229e:	701a      	strb	r2, [r3, #0]
}
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	200006e5 	.word	0x200006e5
 80022a8:	200006e8 	.word	0x200006e8

080022ac <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80022ac:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <HAL_MspInit+0x3c>)
{
 80022ae:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80022b0:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80022b2:	490e      	ldr	r1, [pc, #56]	; (80022ec <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 80022b4:	f042 0201 	orr.w	r2, r2, #1
 80022b8:	619a      	str	r2, [r3, #24]
 80022ba:	699a      	ldr	r2, [r3, #24]
 80022bc:	f002 0201 	and.w	r2, r2, #1
 80022c0:	9200      	str	r2, [sp, #0]
 80022c2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022c4:	69da      	ldr	r2, [r3, #28]
 80022c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022ca:	61da      	str	r2, [r3, #28]
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d2:	9301      	str	r3, [sp, #4]
 80022d4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80022d6:	684b      	ldr	r3, [r1, #4]
 80022d8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80022dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022e0:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022e2:	b002      	add	sp, #8
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	40021000 	.word	0x40021000
 80022ec:	40010000 	.word	0x40010000

080022f0 <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance==ADC1)
 80022f0:	4b0e      	ldr	r3, [pc, #56]	; (800232c <HAL_ADC_MspInit+0x3c>)
 80022f2:	6802      	ldr	r2, [r0, #0]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d000      	beq.n	80022fa <HAL_ADC_MspInit+0xa>
 80022f8:	4770      	bx	lr

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80022fa:	2200      	movs	r2, #0
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022fc:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8002300:	6999      	ldr	r1, [r3, #24]
{
 8002302:	b500      	push	{lr}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002304:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8002308:	6199      	str	r1, [r3, #24]
 800230a:	699b      	ldr	r3, [r3, #24]
{
 800230c:	b083      	sub	sp, #12
    __HAL_RCC_ADC1_CLK_ENABLE();
 800230e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002312:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002314:	2012      	movs	r0, #18
 8002316:	4611      	mov	r1, r2
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002318:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800231a:	f7fe f9fd 	bl	8000718 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800231e:	2012      	movs	r0, #18
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002320:	b003      	add	sp, #12
 8002322:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002326:	f7fe ba35 	b.w	8000794 <HAL_NVIC_EnableIRQ>
 800232a:	bf00      	nop
 800232c:	40012400 	.word	0x40012400

08002330 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8002330:	4b09      	ldr	r3, [pc, #36]	; (8002358 <HAL_CRC_MspInit+0x28>)
 8002332:	6802      	ldr	r2, [r0, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d000      	beq.n	800233a <HAL_CRC_MspInit+0xa>
 8002338:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800233a:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 800233e:	695a      	ldr	r2, [r3, #20]
{
 8002340:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 8002342:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002346:	615a      	str	r2, [r3, #20]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234e:	9301      	str	r3, [sp, #4]
 8002350:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002352:	b002      	add	sp, #8
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	40023000 	.word	0x40023000

0800235c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800235c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235e:	2400      	movs	r4, #0
  if(hspi->Instance==SPI1)
 8002360:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <HAL_SPI_MspInit+0x88>)
 8002362:	6802      	ldr	r2, [r0, #0]
{
 8002364:	b086      	sub	sp, #24
  if(hspi->Instance==SPI1)
 8002366:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002368:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800236c:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(hspi->Instance==SPI1)
 8002370:	d001      	beq.n	8002376 <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002372:	b006      	add	sp, #24
 8002374:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002376:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 800237a:	699a      	ldr	r2, [r3, #24]
 800237c:	4605      	mov	r5, r0
 800237e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002382:	619a      	str	r2, [r3, #24]
 8002384:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002386:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002388:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800238c:	9200      	str	r2, [sp, #0]
 800238e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002390:	699a      	ldr	r2, [r3, #24]
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002392:	4e15      	ldr	r6, [pc, #84]	; (80023e8 <HAL_SPI_MspInit+0x8c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002394:	f042 0204 	orr.w	r2, r2, #4
 8002398:	619a      	str	r2, [r3, #24]
 800239a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800239c:	22a0      	movs	r2, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800239e:	f003 0304 	and.w	r3, r3, #4
 80023a2:	9301      	str	r3, [sp, #4]
 80023a4:	9801      	ldr	r0, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023a6:	2003      	movs	r0, #3
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80023a8:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023aa:	9005      	str	r0, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ac:	480f      	ldr	r0, [pc, #60]	; (80023ec <HAL_SPI_MspInit+0x90>)
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80023ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b2:	f7fe fb37 	bl	8000a24 <HAL_GPIO_Init>
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023b6:	2380      	movs	r3, #128	; 0x80
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023b8:	2210      	movs	r2, #16
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023ba:	60f3      	str	r3, [r6, #12]
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80023bc:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <HAL_SPI_MspInit+0x94>)
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80023be:	4630      	mov	r0, r6
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023c0:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023c4:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023c8:	60b4      	str	r4, [r6, #8]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023ca:	6072      	str	r2, [r6, #4]
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80023cc:	6033      	str	r3, [r6, #0]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80023ce:	f7fe fa1b 	bl	8000808 <HAL_DMA_Init>
 80023d2:	b918      	cbnz	r0, 80023dc <HAL_SPI_MspInit+0x80>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80023d4:	64ae      	str	r6, [r5, #72]	; 0x48
 80023d6:	6275      	str	r5, [r6, #36]	; 0x24
}
 80023d8:	b006      	add	sp, #24
 80023da:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80023dc:	f7ff ff0a 	bl	80021f4 <Error_Handler>
 80023e0:	e7f8      	b.n	80023d4 <HAL_SPI_MspInit+0x78>
 80023e2:	bf00      	nop
 80023e4:	40013000 	.word	0x40013000
 80023e8:	200000dc 	.word	0x200000dc
 80023ec:	40010800 	.word	0x40010800
 80023f0:	40020030 	.word	0x40020030

080023f4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 80023f4:	4b1a      	ldr	r3, [pc, #104]	; (8002460 <HAL_TIM_Base_MspInit+0x6c>)
 80023f6:	6802      	ldr	r2, [r0, #0]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d000      	beq.n	80023fe <HAL_TIM_Base_MspInit+0xa>
 80023fc:	4770      	bx	lr

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80023fe:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002400:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8002404:	6999      	ldr	r1, [r3, #24]
{
 8002406:	b500      	push	{lr}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002408:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800240c:	6199      	str	r1, [r3, #24]
 800240e:	699b      	ldr	r3, [r3, #24]
{
 8002410:	b083      	sub	sp, #12
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002412:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8002416:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002418:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800241a:	2018      	movs	r0, #24
    __HAL_RCC_TIM1_CLK_ENABLE();
 800241c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800241e:	f7fe f97b 	bl	8000718 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002422:	2018      	movs	r0, #24
 8002424:	f7fe f9b6 	bl	8000794 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002428:	2200      	movs	r2, #0
 800242a:	2019      	movs	r0, #25
 800242c:	4611      	mov	r1, r2
 800242e:	f7fe f973 	bl	8000718 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002432:	2019      	movs	r0, #25
 8002434:	f7fe f9ae 	bl	8000794 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8002438:	2200      	movs	r2, #0
 800243a:	201a      	movs	r0, #26
 800243c:	4611      	mov	r1, r2
 800243e:	f7fe f96b 	bl	8000718 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002442:	201a      	movs	r0, #26
 8002444:	f7fe f9a6 	bl	8000794 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002448:	2200      	movs	r2, #0
 800244a:	201b      	movs	r0, #27
 800244c:	4611      	mov	r1, r2
 800244e:	f7fe f963 	bl	8000718 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002452:	201b      	movs	r0, #27
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002454:	b003      	add	sp, #12
 8002456:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800245a:	f7fe b99b 	b.w	8000794 <HAL_NVIC_EnableIRQ>
 800245e:	bf00      	nop
 8002460:	40012c00 	.word	0x40012c00

08002464 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002464:	e7fe      	b.n	8002464 <NMI_Handler>
 8002466:	bf00      	nop

08002468 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002468:	e7fe      	b.n	8002468 <HardFault_Handler>
 800246a:	bf00      	nop

0800246c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800246c:	e7fe      	b.n	800246c <MemManage_Handler>
 800246e:	bf00      	nop

08002470 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002470:	e7fe      	b.n	8002470 <BusFault_Handler>
 8002472:	bf00      	nop

08002474 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002474:	e7fe      	b.n	8002474 <UsageFault_Handler>
 8002476:	bf00      	nop

08002478 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop

0800247c <DebugMon_Handler>:
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop

08002480 <PendSV_Handler>:
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop

08002484 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002484:	f7fd be98 	b.w	80001b8 <HAL_IncTick>

08002488 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002488:	4801      	ldr	r0, [pc, #4]	; (8002490 <DMA1_Channel3_IRQHandler+0x8>)
 800248a:	f7fe ba37 	b.w	80008fc <HAL_DMA_IRQHandler>
 800248e:	bf00      	nop
 8002490:	200000dc 	.word	0x200000dc

08002494 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002494:	4801      	ldr	r0, [pc, #4]	; (800249c <ADC1_2_IRQHandler+0x8>)
 8002496:	f7fd bf67 	b.w	8000368 <HAL_ADC_IRQHandler>
 800249a:	bf00      	nop
 800249c:	200000a4 	.word	0x200000a4

080024a0 <TIM1_BRK_IRQHandler>:
void TIM1_BRK_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024a0:	4801      	ldr	r0, [pc, #4]	; (80024a8 <TIM1_BRK_IRQHandler+0x8>)
 80024a2:	f7ff b9b5 	b.w	8001810 <HAL_TIM_IRQHandler>
 80024a6:	bf00      	nop
 80024a8:	20000178 	.word	0x20000178

080024ac <TIM1_UP_IRQHandler>:
 80024ac:	4801      	ldr	r0, [pc, #4]	; (80024b4 <TIM1_UP_IRQHandler+0x8>)
 80024ae:	f7ff b9af 	b.w	8001810 <HAL_TIM_IRQHandler>
 80024b2:	bf00      	nop
 80024b4:	20000178 	.word	0x20000178

080024b8 <TIM1_TRG_COM_IRQHandler>:
 80024b8:	4801      	ldr	r0, [pc, #4]	; (80024c0 <TIM1_TRG_COM_IRQHandler+0x8>)
 80024ba:	f7ff b9a9 	b.w	8001810 <HAL_TIM_IRQHandler>
 80024be:	bf00      	nop
 80024c0:	20000178 	.word	0x20000178

080024c4 <TIM1_CC_IRQHandler>:
 80024c4:	4801      	ldr	r0, [pc, #4]	; (80024cc <TIM1_CC_IRQHandler+0x8>)
 80024c6:	f7ff b9a3 	b.w	8001810 <HAL_TIM_IRQHandler>
 80024ca:	bf00      	nop
 80024cc:	20000178 	.word	0x20000178

080024d0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80024d0:	2001      	movs	r0, #1
 80024d2:	4770      	bx	lr

080024d4 <_kill>:

int _kill(int pid, int sig)
{
 80024d4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80024d6:	f000 fae1 	bl	8002a9c <__errno>
 80024da:	2216      	movs	r2, #22
 80024dc:	4603      	mov	r3, r0
	return -1;
}
 80024de:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 80024e2:	601a      	str	r2, [r3, #0]
}
 80024e4:	bd08      	pop	{r3, pc}
 80024e6:	bf00      	nop

080024e8 <_exit>:

void _exit (int status)
{
 80024e8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80024ea:	f000 fad7 	bl	8002a9c <__errno>
 80024ee:	2316      	movs	r3, #22
 80024f0:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80024f2:	e7fe      	b.n	80024f2 <_exit+0xa>

080024f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024f4:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024f6:	1e16      	subs	r6, r2, #0
 80024f8:	dd07      	ble.n	800250a <_read+0x16>
 80024fa:	460c      	mov	r4, r1
 80024fc:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80024fe:	f3af 8000 	nop.w
 8002502:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002506:	42a5      	cmp	r5, r4
 8002508:	d1f9      	bne.n	80024fe <_read+0xa>
	}

return len;
}
 800250a:	4630      	mov	r0, r6
 800250c:	bd70      	pop	{r4, r5, r6, pc}
 800250e:	bf00      	nop

08002510 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002510:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002512:	1e16      	subs	r6, r2, #0
 8002514:	dd07      	ble.n	8002526 <_write+0x16>
 8002516:	460c      	mov	r4, r1
 8002518:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 800251a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800251e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002522:	42ac      	cmp	r4, r5
 8002524:	d1f9      	bne.n	800251a <_write+0xa>
	}
	return len;
}
 8002526:	4630      	mov	r0, r6
 8002528:	bd70      	pop	{r4, r5, r6, pc}
 800252a:	bf00      	nop

0800252c <_close>:

int _close(int file)
{
	return -1;
}
 800252c:	f04f 30ff 	mov.w	r0, #4294967295
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop

08002534 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002534:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8002538:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800253a:	604b      	str	r3, [r1, #4]
}
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop

08002540 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002540:	2001      	movs	r0, #1
 8002542:	4770      	bx	lr

08002544 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002544:	2000      	movs	r0, #0
 8002546:	4770      	bx	lr

08002548 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002548:	490d      	ldr	r1, [pc, #52]	; (8002580 <_sbrk+0x38>)
{
 800254a:	4603      	mov	r3, r0
 800254c:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800254e:	4a0d      	ldr	r2, [pc, #52]	; (8002584 <_sbrk+0x3c>)
 8002550:	4c0d      	ldr	r4, [pc, #52]	; (8002588 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8002552:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002554:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8002556:	b120      	cbz	r0, 8002562 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002558:	4403      	add	r3, r0
 800255a:	4293      	cmp	r3, r2
 800255c:	d807      	bhi.n	800256e <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800255e:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8002560:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002562:	4c0a      	ldr	r4, [pc, #40]	; (800258c <_sbrk+0x44>)
 8002564:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 8002566:	4403      	add	r3, r0
 8002568:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 800256a:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800256c:	d9f7      	bls.n	800255e <_sbrk+0x16>
    errno = ENOMEM;
 800256e:	f000 fa95 	bl	8002a9c <__errno>
 8002572:	220c      	movs	r2, #12
 8002574:	4603      	mov	r3, r0
    return (void *)-1;
 8002576:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 800257a:	601a      	str	r2, [r3, #0]
}
 800257c:	bd10      	pop	{r4, pc}
 800257e:	bf00      	nop
 8002580:	2000070c 	.word	0x2000070c
 8002584:	20002800 	.word	0x20002800
 8002588:	00000400 	.word	0x00000400
 800258c:	20002178 	.word	0x20002178

08002590 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop

08002594 <ws2813_FillConvertBuffer>:
void ws2813_FillConvertBuffer(void)
{	
	uint8_t bit;
	uint8_t pos;
	uint32_t mask;	
	for (int i=0; i<0x100; i++) {
 8002594:	2200      	movs	r2, #0
{	
 8002596:	b510      	push	{r4, lr}
 8002598:	4914      	ldr	r1, [pc, #80]	; (80025ec <ws2813_FillConvertBuffer+0x58>)
		convertBuffer[i] = 0x924924;
		for (int b=0; b<8; b++) {
			bit = (i>>b)&1;
			pos = b*3+1;
			mask = bit<<pos;
			convertBuffer[i] |= mask;
 800259a:	4c15      	ldr	r4, [pc, #84]	; (80025f0 <ws2813_FillConvertBuffer+0x5c>)
			mask = bit<<pos;
 800259c:	f002 0301 	and.w	r3, r2, #1
 80025a0:	f3c2 0040 	ubfx	r0, r2, #1, #1
 80025a4:	005b      	lsls	r3, r3, #1
			bit = (i>>b)&1;
 80025a6:	ea4f 1ee2 	mov.w	lr, r2, asr #7
			convertBuffer[i] |= mask;
 80025aa:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80025ae:	ea43 538e 	orr.w	r3, r3, lr, lsl #22
			mask = bit<<pos;
 80025b2:	f3c2 0080 	ubfx	r0, r2, #2, #1
 80025b6:	f3c2 0ec0 	ubfx	lr, r2, #3, #1
			convertBuffer[i] |= mask;
 80025ba:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
 80025be:	ea43 238e 	orr.w	r3, r3, lr, lsl #10
			mask = bit<<pos;
 80025c2:	f3c2 1000 	ubfx	r0, r2, #4, #1
 80025c6:	f3c2 1e40 	ubfx	lr, r2, #5, #1
			convertBuffer[i] |= mask;
 80025ca:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
 80025ce:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
			mask = bit<<pos;
 80025d2:	f3c2 1080 	ubfx	r0, r2, #6, #1
			convertBuffer[i] |= mask;
 80025d6:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
	for (int i=0; i<0x100; i++) {
 80025da:	3201      	adds	r2, #1
			convertBuffer[i] |= mask;
 80025dc:	4323      	orrs	r3, r4
	for (int i=0; i<0x100; i++) {
 80025de:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
			convertBuffer[i] |= mask;
 80025e2:	f841 3f04 	str.w	r3, [r1, #4]!
	for (int i=0; i<0x100; i++) {
 80025e6:	d1d9      	bne.n	800259c <ws2813_FillConvertBuffer+0x8>
		}			
	}		
}
 80025e8:	bd10      	pop	{r4, pc}
 80025ea:	bf00      	nop
 80025ec:	2000070c 	.word	0x2000070c
 80025f0:	00924924 	.word	0x00924924

080025f4 <ws2813_AddRGB>:

*/

// Добавляем цвет диода в буфер DMA 
void ws2813_AddRGB(uint32_t rgb, int num)
{		
 80025f4:	b570      	push	{r4, r5, r6, lr}
	uint32_t val;
	uint8_t *dBuff = &dmaBuff[dmaCurrBuff][9*num];	
	val = convertBuffer[(uint8_t)(rgb>>8)];
	*dBuff++ = val>>16;
	*dBuff++ = val>>8;
 80025f6:	f04f 0e00 	mov.w	lr, #0
	uint8_t *dBuff = &dmaBuff[dmaCurrBuff][9*num];	
 80025fa:	f640 248c 	movw	r4, #2700	; 0xa8c
	*dBuff++ = val>>8;
 80025fe:	46f4      	mov	ip, lr
	uint8_t *dBuff = &dmaBuff[dmaCurrBuff][9*num];	
 8002600:	4b18      	ldr	r3, [pc, #96]	; (8002664 <ws2813_AddRGB+0x70>)
 8002602:	4d19      	ldr	r5, [pc, #100]	; (8002668 <ws2813_AddRGB+0x74>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800260a:	fb04 f303 	mul.w	r3, r4, r3
	val = convertBuffer[(uint8_t)(rgb>>8)];
 800260e:	4e17      	ldr	r6, [pc, #92]	; (800266c <ws2813_AddRGB+0x78>)
	uint8_t *dBuff = &dmaBuff[dmaCurrBuff][9*num];	
 8002610:	185c      	adds	r4, r3, r1
 8002612:	442c      	add	r4, r5
	*dBuff++ = val>>16;
 8002614:	441d      	add	r5, r3
	val = convertBuffer[(uint8_t)(rgb>>8)];
 8002616:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800261a:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
	*dBuff++ = val;
	val = convertBuffer[(uint8_t)(rgb>>16)];
 800261e:	f3c0 4307 	ubfx	r3, r0, #16, #8
	*dBuff++ = val>>16;
	*dBuff++ = val>>8;
	*dBuff++ = val;
	val = convertBuffer[(uint8_t)(rgb)];
 8002622:	b2c0      	uxtb	r0, r0
	val = convertBuffer[(uint8_t)(rgb>>16)];
 8002624:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
	val = convertBuffer[(uint8_t)(rgb)];
 8002628:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
	*dBuff++ = val>>8;
 800262c:	0a16      	lsrs	r6, r2, #8
 800262e:	f366 0e07 	bfi	lr, r6, #0, #8
 8002632:	f362 2e0f 	bfi	lr, r2, #8, #8
	*dBuff++ = val>>16;
 8002636:	0c12      	lsrs	r2, r2, #16
 8002638:	546a      	strb	r2, [r5, r1]
	*dBuff++ = val>>8;
 800263a:	f363 0c07 	bfi	ip, r3, #0, #8
	*dBuff++ = val>>16;
 800263e:	0c02      	lsrs	r2, r0, #16
	*dBuff++ = val>>8;
 8002640:	f362 2c0f 	bfi	ip, r2, #8, #8
	*dBuff++ = val>>16;
 8002644:	0c1a      	lsrs	r2, r3, #16
	*dBuff++ = val>>8;
 8002646:	f362 4e17 	bfi	lr, r2, #16, #8
	*dBuff++ = val>>8;
 800264a:	0a1b      	lsrs	r3, r3, #8
	*dBuff++ = val>>8;
 800264c:	f363 6e1f 	bfi	lr, r3, #24, #8
	*dBuff++ = val>>8;
 8002650:	0a03      	lsrs	r3, r0, #8
	*dBuff++ = val>>8;
 8002652:	f363 4c17 	bfi	ip, r3, #16, #8
 8002656:	f360 6c1f 	bfi	ip, r0, #24, #8
 800265a:	f8c4 e001 	str.w	lr, [r4, #1]
 800265e:	f8c4 c005 	str.w	ip, [r4, #5]
	*dBuff++ = val;	
}
 8002662:	bd70      	pop	{r4, r5, r6, pc}
 8002664:	20002028 	.word	0x20002028
 8002668:	20000b10 	.word	0x20000b10
 800266c:	20000710 	.word	0x20000710

08002670 <ws2813_ChangeCurrentBuff>:

void ws2813_ChangeCurrentBuff()
 {	
	dmaCurrBuff++;
	dmaCurrBuff&= 1;
 8002670:	4a03      	ldr	r2, [pc, #12]	; (8002680 <ws2813_ChangeCurrentBuff+0x10>)
	dmaCurrBuff++;
 8002672:	7813      	ldrb	r3, [r2, #0]
 8002674:	3301      	adds	r3, #1
	dmaCurrBuff&= 1;
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	7013      	strb	r3, [r2, #0]
}
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	20002028 	.word	0x20002028

08002684 <ws2813_GetDMAbuff>:

uint8_t * ws2813_GetDMAbuff()
{
	return &dmaBuff[dmaCurrBuff][0];
 8002684:	f640 208c 	movw	r0, #2700	; 0xa8c
 8002688:	4a02      	ldr	r2, [pc, #8]	; (8002694 <ws2813_GetDMAbuff+0x10>)
 800268a:	4b03      	ldr	r3, [pc, #12]	; (8002698 <ws2813_GetDMAbuff+0x14>)
 800268c:	7812      	ldrb	r2, [r2, #0]
}
 800268e:	fb00 3002 	mla	r0, r0, r2, r3
 8002692:	4770      	bx	lr
 8002694:	20002028 	.word	0x20002028
 8002698:	20000b10 	.word	0x20000b10

0800269c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800269c:	480c      	ldr	r0, [pc, #48]	; (80026d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800269e:	490d      	ldr	r1, [pc, #52]	; (80026d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026a0:	4a0d      	ldr	r2, [pc, #52]	; (80026d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026a4:	e002      	b.n	80026ac <LoopCopyDataInit>

080026a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026aa:	3304      	adds	r3, #4

080026ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026b0:	d3f9      	bcc.n	80026a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026b2:	4a0a      	ldr	r2, [pc, #40]	; (80026dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026b4:	4c0a      	ldr	r4, [pc, #40]	; (80026e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026b8:	e001      	b.n	80026be <LoopFillZerobss>

080026ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026bc:	3204      	adds	r2, #4

080026be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026c0:	d3fb      	bcc.n	80026ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80026c2:	f7ff ff65 	bl	8002590 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026c6:	f000 f9ef 	bl	8002aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026ca:	f7ff fc97 	bl	8001ffc <main>
  bx lr
 80026ce:	4770      	bx	lr
  ldr r0, =_sdata
 80026d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026d4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80026d8:	08003898 	.word	0x08003898
  ldr r2, =_sbss
 80026dc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80026e0:	20002178 	.word	0x20002178

080026e4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026e4:	e7fe      	b.n	80026e4 <CAN1_RX1_IRQHandler>
	...

080026e8 <srand>:
 80026e8:	b538      	push	{r3, r4, r5, lr}
 80026ea:	4b10      	ldr	r3, [pc, #64]	; (800272c <srand+0x44>)
 80026ec:	4604      	mov	r4, r0
 80026ee:	681d      	ldr	r5, [r3, #0]
 80026f0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80026f2:	b9b3      	cbnz	r3, 8002722 <srand+0x3a>
 80026f4:	2018      	movs	r0, #24
 80026f6:	f000 fa65 	bl	8002bc4 <malloc>
 80026fa:	4602      	mov	r2, r0
 80026fc:	6328      	str	r0, [r5, #48]	; 0x30
 80026fe:	b920      	cbnz	r0, 800270a <srand+0x22>
 8002700:	2146      	movs	r1, #70	; 0x46
 8002702:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <srand+0x48>)
 8002704:	480b      	ldr	r0, [pc, #44]	; (8002734 <srand+0x4c>)
 8002706:	f000 f9f7 	bl	8002af8 <__assert_func>
 800270a:	490b      	ldr	r1, [pc, #44]	; (8002738 <srand+0x50>)
 800270c:	4b0b      	ldr	r3, [pc, #44]	; (800273c <srand+0x54>)
 800270e:	e9c0 1300 	strd	r1, r3, [r0]
 8002712:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <srand+0x58>)
 8002714:	2100      	movs	r1, #0
 8002716:	6083      	str	r3, [r0, #8]
 8002718:	230b      	movs	r3, #11
 800271a:	8183      	strh	r3, [r0, #12]
 800271c:	2001      	movs	r0, #1
 800271e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002722:	2200      	movs	r2, #0
 8002724:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002726:	611c      	str	r4, [r3, #16]
 8002728:	615a      	str	r2, [r3, #20]
 800272a:	bd38      	pop	{r3, r4, r5, pc}
 800272c:	20000068 	.word	0x20000068
 8002730:	080037b0 	.word	0x080037b0
 8002734:	080037c7 	.word	0x080037c7
 8002738:	abcd330e 	.word	0xabcd330e
 800273c:	e66d1234 	.word	0xe66d1234
 8002740:	0005deec 	.word	0x0005deec

08002744 <rand>:
 8002744:	4b16      	ldr	r3, [pc, #88]	; (80027a0 <rand+0x5c>)
 8002746:	b510      	push	{r4, lr}
 8002748:	681c      	ldr	r4, [r3, #0]
 800274a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800274c:	b9b3      	cbnz	r3, 800277c <rand+0x38>
 800274e:	2018      	movs	r0, #24
 8002750:	f000 fa38 	bl	8002bc4 <malloc>
 8002754:	4602      	mov	r2, r0
 8002756:	6320      	str	r0, [r4, #48]	; 0x30
 8002758:	b920      	cbnz	r0, 8002764 <rand+0x20>
 800275a:	2152      	movs	r1, #82	; 0x52
 800275c:	4b11      	ldr	r3, [pc, #68]	; (80027a4 <rand+0x60>)
 800275e:	4812      	ldr	r0, [pc, #72]	; (80027a8 <rand+0x64>)
 8002760:	f000 f9ca 	bl	8002af8 <__assert_func>
 8002764:	4911      	ldr	r1, [pc, #68]	; (80027ac <rand+0x68>)
 8002766:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <rand+0x6c>)
 8002768:	e9c0 1300 	strd	r1, r3, [r0]
 800276c:	4b11      	ldr	r3, [pc, #68]	; (80027b4 <rand+0x70>)
 800276e:	2100      	movs	r1, #0
 8002770:	6083      	str	r3, [r0, #8]
 8002772:	230b      	movs	r3, #11
 8002774:	8183      	strh	r3, [r0, #12]
 8002776:	2001      	movs	r0, #1
 8002778:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800277c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800277e:	480e      	ldr	r0, [pc, #56]	; (80027b8 <rand+0x74>)
 8002780:	690b      	ldr	r3, [r1, #16]
 8002782:	694c      	ldr	r4, [r1, #20]
 8002784:	4358      	muls	r0, r3
 8002786:	4a0d      	ldr	r2, [pc, #52]	; (80027bc <rand+0x78>)
 8002788:	fb02 0004 	mla	r0, r2, r4, r0
 800278c:	fba3 3202 	umull	r3, r2, r3, r2
 8002790:	3301      	adds	r3, #1
 8002792:	eb40 0002 	adc.w	r0, r0, r2
 8002796:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800279a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800279e:	bd10      	pop	{r4, pc}
 80027a0:	20000068 	.word	0x20000068
 80027a4:	080037b0 	.word	0x080037b0
 80027a8:	080037c7 	.word	0x080037c7
 80027ac:	abcd330e 	.word	0xabcd330e
 80027b0:	e66d1234 	.word	0xe66d1234
 80027b4:	0005deec 	.word	0x0005deec
 80027b8:	5851f42d 	.word	0x5851f42d
 80027bc:	4c957f2d 	.word	0x4c957f2d

080027c0 <std>:
 80027c0:	2300      	movs	r3, #0
 80027c2:	b510      	push	{r4, lr}
 80027c4:	4604      	mov	r4, r0
 80027c6:	e9c0 3300 	strd	r3, r3, [r0]
 80027ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80027ce:	6083      	str	r3, [r0, #8]
 80027d0:	8181      	strh	r1, [r0, #12]
 80027d2:	6643      	str	r3, [r0, #100]	; 0x64
 80027d4:	81c2      	strh	r2, [r0, #14]
 80027d6:	6183      	str	r3, [r0, #24]
 80027d8:	4619      	mov	r1, r3
 80027da:	2208      	movs	r2, #8
 80027dc:	305c      	adds	r0, #92	; 0x5c
 80027de:	f000 f90e 	bl	80029fe <memset>
 80027e2:	4b0d      	ldr	r3, [pc, #52]	; (8002818 <std+0x58>)
 80027e4:	6224      	str	r4, [r4, #32]
 80027e6:	6263      	str	r3, [r4, #36]	; 0x24
 80027e8:	4b0c      	ldr	r3, [pc, #48]	; (800281c <std+0x5c>)
 80027ea:	62a3      	str	r3, [r4, #40]	; 0x28
 80027ec:	4b0c      	ldr	r3, [pc, #48]	; (8002820 <std+0x60>)
 80027ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 80027f0:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <std+0x64>)
 80027f2:	6323      	str	r3, [r4, #48]	; 0x30
 80027f4:	4b0c      	ldr	r3, [pc, #48]	; (8002828 <std+0x68>)
 80027f6:	429c      	cmp	r4, r3
 80027f8:	d006      	beq.n	8002808 <std+0x48>
 80027fa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80027fe:	4294      	cmp	r4, r2
 8002800:	d002      	beq.n	8002808 <std+0x48>
 8002802:	33d0      	adds	r3, #208	; 0xd0
 8002804:	429c      	cmp	r4, r3
 8002806:	d105      	bne.n	8002814 <std+0x54>
 8002808:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800280c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002810:	f000 b96e 	b.w	8002af0 <__retarget_lock_init_recursive>
 8002814:	bd10      	pop	{r4, pc}
 8002816:	bf00      	nop
 8002818:	08002945 	.word	0x08002945
 800281c:	08002967 	.word	0x08002967
 8002820:	0800299f 	.word	0x0800299f
 8002824:	080029c3 	.word	0x080029c3
 8002828:	2000202c 	.word	0x2000202c

0800282c <stdio_exit_handler>:
 800282c:	4a02      	ldr	r2, [pc, #8]	; (8002838 <stdio_exit_handler+0xc>)
 800282e:	4903      	ldr	r1, [pc, #12]	; (800283c <stdio_exit_handler+0x10>)
 8002830:	4803      	ldr	r0, [pc, #12]	; (8002840 <stdio_exit_handler+0x14>)
 8002832:	f000 b869 	b.w	8002908 <_fwalk_sglue>
 8002836:	bf00      	nop
 8002838:	20000010 	.word	0x20000010
 800283c:	08002e31 	.word	0x08002e31
 8002840:	2000001c 	.word	0x2000001c

08002844 <cleanup_stdio>:
 8002844:	6841      	ldr	r1, [r0, #4]
 8002846:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <cleanup_stdio+0x34>)
 8002848:	b510      	push	{r4, lr}
 800284a:	4299      	cmp	r1, r3
 800284c:	4604      	mov	r4, r0
 800284e:	d001      	beq.n	8002854 <cleanup_stdio+0x10>
 8002850:	f000 faee 	bl	8002e30 <_fflush_r>
 8002854:	68a1      	ldr	r1, [r4, #8]
 8002856:	4b09      	ldr	r3, [pc, #36]	; (800287c <cleanup_stdio+0x38>)
 8002858:	4299      	cmp	r1, r3
 800285a:	d002      	beq.n	8002862 <cleanup_stdio+0x1e>
 800285c:	4620      	mov	r0, r4
 800285e:	f000 fae7 	bl	8002e30 <_fflush_r>
 8002862:	68e1      	ldr	r1, [r4, #12]
 8002864:	4b06      	ldr	r3, [pc, #24]	; (8002880 <cleanup_stdio+0x3c>)
 8002866:	4299      	cmp	r1, r3
 8002868:	d004      	beq.n	8002874 <cleanup_stdio+0x30>
 800286a:	4620      	mov	r0, r4
 800286c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002870:	f000 bade 	b.w	8002e30 <_fflush_r>
 8002874:	bd10      	pop	{r4, pc}
 8002876:	bf00      	nop
 8002878:	2000202c 	.word	0x2000202c
 800287c:	20002094 	.word	0x20002094
 8002880:	200020fc 	.word	0x200020fc

08002884 <global_stdio_init.part.0>:
 8002884:	b510      	push	{r4, lr}
 8002886:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <global_stdio_init.part.0+0x30>)
 8002888:	4c0b      	ldr	r4, [pc, #44]	; (80028b8 <global_stdio_init.part.0+0x34>)
 800288a:	4a0c      	ldr	r2, [pc, #48]	; (80028bc <global_stdio_init.part.0+0x38>)
 800288c:	4620      	mov	r0, r4
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	2104      	movs	r1, #4
 8002892:	2200      	movs	r2, #0
 8002894:	f7ff ff94 	bl	80027c0 <std>
 8002898:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800289c:	2201      	movs	r2, #1
 800289e:	2109      	movs	r1, #9
 80028a0:	f7ff ff8e 	bl	80027c0 <std>
 80028a4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80028a8:	2202      	movs	r2, #2
 80028aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028ae:	2112      	movs	r1, #18
 80028b0:	f7ff bf86 	b.w	80027c0 <std>
 80028b4:	20002164 	.word	0x20002164
 80028b8:	2000202c 	.word	0x2000202c
 80028bc:	0800282d 	.word	0x0800282d

080028c0 <__sfp_lock_acquire>:
 80028c0:	4801      	ldr	r0, [pc, #4]	; (80028c8 <__sfp_lock_acquire+0x8>)
 80028c2:	f000 b916 	b.w	8002af2 <__retarget_lock_acquire_recursive>
 80028c6:	bf00      	nop
 80028c8:	2000216d 	.word	0x2000216d

080028cc <__sfp_lock_release>:
 80028cc:	4801      	ldr	r0, [pc, #4]	; (80028d4 <__sfp_lock_release+0x8>)
 80028ce:	f000 b911 	b.w	8002af4 <__retarget_lock_release_recursive>
 80028d2:	bf00      	nop
 80028d4:	2000216d 	.word	0x2000216d

080028d8 <__sinit>:
 80028d8:	b510      	push	{r4, lr}
 80028da:	4604      	mov	r4, r0
 80028dc:	f7ff fff0 	bl	80028c0 <__sfp_lock_acquire>
 80028e0:	6a23      	ldr	r3, [r4, #32]
 80028e2:	b11b      	cbz	r3, 80028ec <__sinit+0x14>
 80028e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028e8:	f7ff bff0 	b.w	80028cc <__sfp_lock_release>
 80028ec:	4b04      	ldr	r3, [pc, #16]	; (8002900 <__sinit+0x28>)
 80028ee:	6223      	str	r3, [r4, #32]
 80028f0:	4b04      	ldr	r3, [pc, #16]	; (8002904 <__sinit+0x2c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1f5      	bne.n	80028e4 <__sinit+0xc>
 80028f8:	f7ff ffc4 	bl	8002884 <global_stdio_init.part.0>
 80028fc:	e7f2      	b.n	80028e4 <__sinit+0xc>
 80028fe:	bf00      	nop
 8002900:	08002845 	.word	0x08002845
 8002904:	20002164 	.word	0x20002164

08002908 <_fwalk_sglue>:
 8002908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800290c:	4607      	mov	r7, r0
 800290e:	4688      	mov	r8, r1
 8002910:	4614      	mov	r4, r2
 8002912:	2600      	movs	r6, #0
 8002914:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002918:	f1b9 0901 	subs.w	r9, r9, #1
 800291c:	d505      	bpl.n	800292a <_fwalk_sglue+0x22>
 800291e:	6824      	ldr	r4, [r4, #0]
 8002920:	2c00      	cmp	r4, #0
 8002922:	d1f7      	bne.n	8002914 <_fwalk_sglue+0xc>
 8002924:	4630      	mov	r0, r6
 8002926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800292a:	89ab      	ldrh	r3, [r5, #12]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d907      	bls.n	8002940 <_fwalk_sglue+0x38>
 8002930:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002934:	3301      	adds	r3, #1
 8002936:	d003      	beq.n	8002940 <_fwalk_sglue+0x38>
 8002938:	4629      	mov	r1, r5
 800293a:	4638      	mov	r0, r7
 800293c:	47c0      	blx	r8
 800293e:	4306      	orrs	r6, r0
 8002940:	3568      	adds	r5, #104	; 0x68
 8002942:	e7e9      	b.n	8002918 <_fwalk_sglue+0x10>

08002944 <__sread>:
 8002944:	b510      	push	{r4, lr}
 8002946:	460c      	mov	r4, r1
 8002948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800294c:	f000 f882 	bl	8002a54 <_read_r>
 8002950:	2800      	cmp	r0, #0
 8002952:	bfab      	itete	ge
 8002954:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002956:	89a3      	ldrhlt	r3, [r4, #12]
 8002958:	181b      	addge	r3, r3, r0
 800295a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800295e:	bfac      	ite	ge
 8002960:	6563      	strge	r3, [r4, #84]	; 0x54
 8002962:	81a3      	strhlt	r3, [r4, #12]
 8002964:	bd10      	pop	{r4, pc}

08002966 <__swrite>:
 8002966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800296a:	461f      	mov	r7, r3
 800296c:	898b      	ldrh	r3, [r1, #12]
 800296e:	4605      	mov	r5, r0
 8002970:	05db      	lsls	r3, r3, #23
 8002972:	460c      	mov	r4, r1
 8002974:	4616      	mov	r6, r2
 8002976:	d505      	bpl.n	8002984 <__swrite+0x1e>
 8002978:	2302      	movs	r3, #2
 800297a:	2200      	movs	r2, #0
 800297c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002980:	f000 f856 	bl	8002a30 <_lseek_r>
 8002984:	89a3      	ldrh	r3, [r4, #12]
 8002986:	4632      	mov	r2, r6
 8002988:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800298c:	81a3      	strh	r3, [r4, #12]
 800298e:	4628      	mov	r0, r5
 8002990:	463b      	mov	r3, r7
 8002992:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002996:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800299a:	f000 b86d 	b.w	8002a78 <_write_r>

0800299e <__sseek>:
 800299e:	b510      	push	{r4, lr}
 80029a0:	460c      	mov	r4, r1
 80029a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029a6:	f000 f843 	bl	8002a30 <_lseek_r>
 80029aa:	1c43      	adds	r3, r0, #1
 80029ac:	89a3      	ldrh	r3, [r4, #12]
 80029ae:	bf15      	itete	ne
 80029b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80029b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80029b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80029ba:	81a3      	strheq	r3, [r4, #12]
 80029bc:	bf18      	it	ne
 80029be:	81a3      	strhne	r3, [r4, #12]
 80029c0:	bd10      	pop	{r4, pc}

080029c2 <__sclose>:
 80029c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029c6:	f000 b823 	b.w	8002a10 <_close_r>

080029ca <memmove>:
 80029ca:	4288      	cmp	r0, r1
 80029cc:	b510      	push	{r4, lr}
 80029ce:	eb01 0402 	add.w	r4, r1, r2
 80029d2:	d902      	bls.n	80029da <memmove+0x10>
 80029d4:	4284      	cmp	r4, r0
 80029d6:	4623      	mov	r3, r4
 80029d8:	d807      	bhi.n	80029ea <memmove+0x20>
 80029da:	1e43      	subs	r3, r0, #1
 80029dc:	42a1      	cmp	r1, r4
 80029de:	d008      	beq.n	80029f2 <memmove+0x28>
 80029e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80029e4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80029e8:	e7f8      	b.n	80029dc <memmove+0x12>
 80029ea:	4601      	mov	r1, r0
 80029ec:	4402      	add	r2, r0
 80029ee:	428a      	cmp	r2, r1
 80029f0:	d100      	bne.n	80029f4 <memmove+0x2a>
 80029f2:	bd10      	pop	{r4, pc}
 80029f4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80029f8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80029fc:	e7f7      	b.n	80029ee <memmove+0x24>

080029fe <memset>:
 80029fe:	4603      	mov	r3, r0
 8002a00:	4402      	add	r2, r0
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d100      	bne.n	8002a08 <memset+0xa>
 8002a06:	4770      	bx	lr
 8002a08:	f803 1b01 	strb.w	r1, [r3], #1
 8002a0c:	e7f9      	b.n	8002a02 <memset+0x4>
	...

08002a10 <_close_r>:
 8002a10:	b538      	push	{r3, r4, r5, lr}
 8002a12:	2300      	movs	r3, #0
 8002a14:	4d05      	ldr	r5, [pc, #20]	; (8002a2c <_close_r+0x1c>)
 8002a16:	4604      	mov	r4, r0
 8002a18:	4608      	mov	r0, r1
 8002a1a:	602b      	str	r3, [r5, #0]
 8002a1c:	f7ff fd86 	bl	800252c <_close>
 8002a20:	1c43      	adds	r3, r0, #1
 8002a22:	d102      	bne.n	8002a2a <_close_r+0x1a>
 8002a24:	682b      	ldr	r3, [r5, #0]
 8002a26:	b103      	cbz	r3, 8002a2a <_close_r+0x1a>
 8002a28:	6023      	str	r3, [r4, #0]
 8002a2a:	bd38      	pop	{r3, r4, r5, pc}
 8002a2c:	20002168 	.word	0x20002168

08002a30 <_lseek_r>:
 8002a30:	b538      	push	{r3, r4, r5, lr}
 8002a32:	4604      	mov	r4, r0
 8002a34:	4608      	mov	r0, r1
 8002a36:	4611      	mov	r1, r2
 8002a38:	2200      	movs	r2, #0
 8002a3a:	4d05      	ldr	r5, [pc, #20]	; (8002a50 <_lseek_r+0x20>)
 8002a3c:	602a      	str	r2, [r5, #0]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	f7ff fd80 	bl	8002544 <_lseek>
 8002a44:	1c43      	adds	r3, r0, #1
 8002a46:	d102      	bne.n	8002a4e <_lseek_r+0x1e>
 8002a48:	682b      	ldr	r3, [r5, #0]
 8002a4a:	b103      	cbz	r3, 8002a4e <_lseek_r+0x1e>
 8002a4c:	6023      	str	r3, [r4, #0]
 8002a4e:	bd38      	pop	{r3, r4, r5, pc}
 8002a50:	20002168 	.word	0x20002168

08002a54 <_read_r>:
 8002a54:	b538      	push	{r3, r4, r5, lr}
 8002a56:	4604      	mov	r4, r0
 8002a58:	4608      	mov	r0, r1
 8002a5a:	4611      	mov	r1, r2
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	4d05      	ldr	r5, [pc, #20]	; (8002a74 <_read_r+0x20>)
 8002a60:	602a      	str	r2, [r5, #0]
 8002a62:	461a      	mov	r2, r3
 8002a64:	f7ff fd46 	bl	80024f4 <_read>
 8002a68:	1c43      	adds	r3, r0, #1
 8002a6a:	d102      	bne.n	8002a72 <_read_r+0x1e>
 8002a6c:	682b      	ldr	r3, [r5, #0]
 8002a6e:	b103      	cbz	r3, 8002a72 <_read_r+0x1e>
 8002a70:	6023      	str	r3, [r4, #0]
 8002a72:	bd38      	pop	{r3, r4, r5, pc}
 8002a74:	20002168 	.word	0x20002168

08002a78 <_write_r>:
 8002a78:	b538      	push	{r3, r4, r5, lr}
 8002a7a:	4604      	mov	r4, r0
 8002a7c:	4608      	mov	r0, r1
 8002a7e:	4611      	mov	r1, r2
 8002a80:	2200      	movs	r2, #0
 8002a82:	4d05      	ldr	r5, [pc, #20]	; (8002a98 <_write_r+0x20>)
 8002a84:	602a      	str	r2, [r5, #0]
 8002a86:	461a      	mov	r2, r3
 8002a88:	f7ff fd42 	bl	8002510 <_write>
 8002a8c:	1c43      	adds	r3, r0, #1
 8002a8e:	d102      	bne.n	8002a96 <_write_r+0x1e>
 8002a90:	682b      	ldr	r3, [r5, #0]
 8002a92:	b103      	cbz	r3, 8002a96 <_write_r+0x1e>
 8002a94:	6023      	str	r3, [r4, #0]
 8002a96:	bd38      	pop	{r3, r4, r5, pc}
 8002a98:	20002168 	.word	0x20002168

08002a9c <__errno>:
 8002a9c:	4b01      	ldr	r3, [pc, #4]	; (8002aa4 <__errno+0x8>)
 8002a9e:	6818      	ldr	r0, [r3, #0]
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	20000068 	.word	0x20000068

08002aa8 <__libc_init_array>:
 8002aa8:	b570      	push	{r4, r5, r6, lr}
 8002aaa:	2600      	movs	r6, #0
 8002aac:	4d0c      	ldr	r5, [pc, #48]	; (8002ae0 <__libc_init_array+0x38>)
 8002aae:	4c0d      	ldr	r4, [pc, #52]	; (8002ae4 <__libc_init_array+0x3c>)
 8002ab0:	1b64      	subs	r4, r4, r5
 8002ab2:	10a4      	asrs	r4, r4, #2
 8002ab4:	42a6      	cmp	r6, r4
 8002ab6:	d109      	bne.n	8002acc <__libc_init_array+0x24>
 8002ab8:	f000 fe4c 	bl	8003754 <_init>
 8002abc:	2600      	movs	r6, #0
 8002abe:	4d0a      	ldr	r5, [pc, #40]	; (8002ae8 <__libc_init_array+0x40>)
 8002ac0:	4c0a      	ldr	r4, [pc, #40]	; (8002aec <__libc_init_array+0x44>)
 8002ac2:	1b64      	subs	r4, r4, r5
 8002ac4:	10a4      	asrs	r4, r4, #2
 8002ac6:	42a6      	cmp	r6, r4
 8002ac8:	d105      	bne.n	8002ad6 <__libc_init_array+0x2e>
 8002aca:	bd70      	pop	{r4, r5, r6, pc}
 8002acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ad0:	4798      	blx	r3
 8002ad2:	3601      	adds	r6, #1
 8002ad4:	e7ee      	b.n	8002ab4 <__libc_init_array+0xc>
 8002ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ada:	4798      	blx	r3
 8002adc:	3601      	adds	r6, #1
 8002ade:	e7f2      	b.n	8002ac6 <__libc_init_array+0x1e>
 8002ae0:	08003890 	.word	0x08003890
 8002ae4:	08003890 	.word	0x08003890
 8002ae8:	08003890 	.word	0x08003890
 8002aec:	08003894 	.word	0x08003894

08002af0 <__retarget_lock_init_recursive>:
 8002af0:	4770      	bx	lr

08002af2 <__retarget_lock_acquire_recursive>:
 8002af2:	4770      	bx	lr

08002af4 <__retarget_lock_release_recursive>:
 8002af4:	4770      	bx	lr
	...

08002af8 <__assert_func>:
 8002af8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002afa:	4614      	mov	r4, r2
 8002afc:	461a      	mov	r2, r3
 8002afe:	4b09      	ldr	r3, [pc, #36]	; (8002b24 <__assert_func+0x2c>)
 8002b00:	4605      	mov	r5, r0
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68d8      	ldr	r0, [r3, #12]
 8002b06:	b14c      	cbz	r4, 8002b1c <__assert_func+0x24>
 8002b08:	4b07      	ldr	r3, [pc, #28]	; (8002b28 <__assert_func+0x30>)
 8002b0a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002b0e:	9100      	str	r1, [sp, #0]
 8002b10:	462b      	mov	r3, r5
 8002b12:	4906      	ldr	r1, [pc, #24]	; (8002b2c <__assert_func+0x34>)
 8002b14:	f000 f9b4 	bl	8002e80 <fiprintf>
 8002b18:	f000 f9d4 	bl	8002ec4 <abort>
 8002b1c:	4b04      	ldr	r3, [pc, #16]	; (8002b30 <__assert_func+0x38>)
 8002b1e:	461c      	mov	r4, r3
 8002b20:	e7f3      	b.n	8002b0a <__assert_func+0x12>
 8002b22:	bf00      	nop
 8002b24:	20000068 	.word	0x20000068
 8002b28:	0800381f 	.word	0x0800381f
 8002b2c:	0800382c 	.word	0x0800382c
 8002b30:	0800385a 	.word	0x0800385a

08002b34 <_free_r>:
 8002b34:	b538      	push	{r3, r4, r5, lr}
 8002b36:	4605      	mov	r5, r0
 8002b38:	2900      	cmp	r1, #0
 8002b3a:	d040      	beq.n	8002bbe <_free_r+0x8a>
 8002b3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b40:	1f0c      	subs	r4, r1, #4
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	bfb8      	it	lt
 8002b46:	18e4      	addlt	r4, r4, r3
 8002b48:	f000 f8e4 	bl	8002d14 <__malloc_lock>
 8002b4c:	4a1c      	ldr	r2, [pc, #112]	; (8002bc0 <_free_r+0x8c>)
 8002b4e:	6813      	ldr	r3, [r2, #0]
 8002b50:	b933      	cbnz	r3, 8002b60 <_free_r+0x2c>
 8002b52:	6063      	str	r3, [r4, #4]
 8002b54:	6014      	str	r4, [r2, #0]
 8002b56:	4628      	mov	r0, r5
 8002b58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b5c:	f000 b8e0 	b.w	8002d20 <__malloc_unlock>
 8002b60:	42a3      	cmp	r3, r4
 8002b62:	d908      	bls.n	8002b76 <_free_r+0x42>
 8002b64:	6820      	ldr	r0, [r4, #0]
 8002b66:	1821      	adds	r1, r4, r0
 8002b68:	428b      	cmp	r3, r1
 8002b6a:	bf01      	itttt	eq
 8002b6c:	6819      	ldreq	r1, [r3, #0]
 8002b6e:	685b      	ldreq	r3, [r3, #4]
 8002b70:	1809      	addeq	r1, r1, r0
 8002b72:	6021      	streq	r1, [r4, #0]
 8002b74:	e7ed      	b.n	8002b52 <_free_r+0x1e>
 8002b76:	461a      	mov	r2, r3
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	b10b      	cbz	r3, 8002b80 <_free_r+0x4c>
 8002b7c:	42a3      	cmp	r3, r4
 8002b7e:	d9fa      	bls.n	8002b76 <_free_r+0x42>
 8002b80:	6811      	ldr	r1, [r2, #0]
 8002b82:	1850      	adds	r0, r2, r1
 8002b84:	42a0      	cmp	r0, r4
 8002b86:	d10b      	bne.n	8002ba0 <_free_r+0x6c>
 8002b88:	6820      	ldr	r0, [r4, #0]
 8002b8a:	4401      	add	r1, r0
 8002b8c:	1850      	adds	r0, r2, r1
 8002b8e:	4283      	cmp	r3, r0
 8002b90:	6011      	str	r1, [r2, #0]
 8002b92:	d1e0      	bne.n	8002b56 <_free_r+0x22>
 8002b94:	6818      	ldr	r0, [r3, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	4408      	add	r0, r1
 8002b9a:	6010      	str	r0, [r2, #0]
 8002b9c:	6053      	str	r3, [r2, #4]
 8002b9e:	e7da      	b.n	8002b56 <_free_r+0x22>
 8002ba0:	d902      	bls.n	8002ba8 <_free_r+0x74>
 8002ba2:	230c      	movs	r3, #12
 8002ba4:	602b      	str	r3, [r5, #0]
 8002ba6:	e7d6      	b.n	8002b56 <_free_r+0x22>
 8002ba8:	6820      	ldr	r0, [r4, #0]
 8002baa:	1821      	adds	r1, r4, r0
 8002bac:	428b      	cmp	r3, r1
 8002bae:	bf01      	itttt	eq
 8002bb0:	6819      	ldreq	r1, [r3, #0]
 8002bb2:	685b      	ldreq	r3, [r3, #4]
 8002bb4:	1809      	addeq	r1, r1, r0
 8002bb6:	6021      	streq	r1, [r4, #0]
 8002bb8:	6063      	str	r3, [r4, #4]
 8002bba:	6054      	str	r4, [r2, #4]
 8002bbc:	e7cb      	b.n	8002b56 <_free_r+0x22>
 8002bbe:	bd38      	pop	{r3, r4, r5, pc}
 8002bc0:	20002170 	.word	0x20002170

08002bc4 <malloc>:
 8002bc4:	4b02      	ldr	r3, [pc, #8]	; (8002bd0 <malloc+0xc>)
 8002bc6:	4601      	mov	r1, r0
 8002bc8:	6818      	ldr	r0, [r3, #0]
 8002bca:	f000 b823 	b.w	8002c14 <_malloc_r>
 8002bce:	bf00      	nop
 8002bd0:	20000068 	.word	0x20000068

08002bd4 <sbrk_aligned>:
 8002bd4:	b570      	push	{r4, r5, r6, lr}
 8002bd6:	4e0e      	ldr	r6, [pc, #56]	; (8002c10 <sbrk_aligned+0x3c>)
 8002bd8:	460c      	mov	r4, r1
 8002bda:	6831      	ldr	r1, [r6, #0]
 8002bdc:	4605      	mov	r5, r0
 8002bde:	b911      	cbnz	r1, 8002be6 <sbrk_aligned+0x12>
 8002be0:	f000 f960 	bl	8002ea4 <_sbrk_r>
 8002be4:	6030      	str	r0, [r6, #0]
 8002be6:	4621      	mov	r1, r4
 8002be8:	4628      	mov	r0, r5
 8002bea:	f000 f95b 	bl	8002ea4 <_sbrk_r>
 8002bee:	1c43      	adds	r3, r0, #1
 8002bf0:	d00a      	beq.n	8002c08 <sbrk_aligned+0x34>
 8002bf2:	1cc4      	adds	r4, r0, #3
 8002bf4:	f024 0403 	bic.w	r4, r4, #3
 8002bf8:	42a0      	cmp	r0, r4
 8002bfa:	d007      	beq.n	8002c0c <sbrk_aligned+0x38>
 8002bfc:	1a21      	subs	r1, r4, r0
 8002bfe:	4628      	mov	r0, r5
 8002c00:	f000 f950 	bl	8002ea4 <_sbrk_r>
 8002c04:	3001      	adds	r0, #1
 8002c06:	d101      	bne.n	8002c0c <sbrk_aligned+0x38>
 8002c08:	f04f 34ff 	mov.w	r4, #4294967295
 8002c0c:	4620      	mov	r0, r4
 8002c0e:	bd70      	pop	{r4, r5, r6, pc}
 8002c10:	20002174 	.word	0x20002174

08002c14 <_malloc_r>:
 8002c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c18:	1ccd      	adds	r5, r1, #3
 8002c1a:	f025 0503 	bic.w	r5, r5, #3
 8002c1e:	3508      	adds	r5, #8
 8002c20:	2d0c      	cmp	r5, #12
 8002c22:	bf38      	it	cc
 8002c24:	250c      	movcc	r5, #12
 8002c26:	2d00      	cmp	r5, #0
 8002c28:	4607      	mov	r7, r0
 8002c2a:	db01      	blt.n	8002c30 <_malloc_r+0x1c>
 8002c2c:	42a9      	cmp	r1, r5
 8002c2e:	d905      	bls.n	8002c3c <_malloc_r+0x28>
 8002c30:	230c      	movs	r3, #12
 8002c32:	2600      	movs	r6, #0
 8002c34:	603b      	str	r3, [r7, #0]
 8002c36:	4630      	mov	r0, r6
 8002c38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c3c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002d10 <_malloc_r+0xfc>
 8002c40:	f000 f868 	bl	8002d14 <__malloc_lock>
 8002c44:	f8d8 3000 	ldr.w	r3, [r8]
 8002c48:	461c      	mov	r4, r3
 8002c4a:	bb5c      	cbnz	r4, 8002ca4 <_malloc_r+0x90>
 8002c4c:	4629      	mov	r1, r5
 8002c4e:	4638      	mov	r0, r7
 8002c50:	f7ff ffc0 	bl	8002bd4 <sbrk_aligned>
 8002c54:	1c43      	adds	r3, r0, #1
 8002c56:	4604      	mov	r4, r0
 8002c58:	d155      	bne.n	8002d06 <_malloc_r+0xf2>
 8002c5a:	f8d8 4000 	ldr.w	r4, [r8]
 8002c5e:	4626      	mov	r6, r4
 8002c60:	2e00      	cmp	r6, #0
 8002c62:	d145      	bne.n	8002cf0 <_malloc_r+0xdc>
 8002c64:	2c00      	cmp	r4, #0
 8002c66:	d048      	beq.n	8002cfa <_malloc_r+0xe6>
 8002c68:	6823      	ldr	r3, [r4, #0]
 8002c6a:	4631      	mov	r1, r6
 8002c6c:	4638      	mov	r0, r7
 8002c6e:	eb04 0903 	add.w	r9, r4, r3
 8002c72:	f000 f917 	bl	8002ea4 <_sbrk_r>
 8002c76:	4581      	cmp	r9, r0
 8002c78:	d13f      	bne.n	8002cfa <_malloc_r+0xe6>
 8002c7a:	6821      	ldr	r1, [r4, #0]
 8002c7c:	4638      	mov	r0, r7
 8002c7e:	1a6d      	subs	r5, r5, r1
 8002c80:	4629      	mov	r1, r5
 8002c82:	f7ff ffa7 	bl	8002bd4 <sbrk_aligned>
 8002c86:	3001      	adds	r0, #1
 8002c88:	d037      	beq.n	8002cfa <_malloc_r+0xe6>
 8002c8a:	6823      	ldr	r3, [r4, #0]
 8002c8c:	442b      	add	r3, r5
 8002c8e:	6023      	str	r3, [r4, #0]
 8002c90:	f8d8 3000 	ldr.w	r3, [r8]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d038      	beq.n	8002d0a <_malloc_r+0xf6>
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	42a2      	cmp	r2, r4
 8002c9c:	d12b      	bne.n	8002cf6 <_malloc_r+0xe2>
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	605a      	str	r2, [r3, #4]
 8002ca2:	e00f      	b.n	8002cc4 <_malloc_r+0xb0>
 8002ca4:	6822      	ldr	r2, [r4, #0]
 8002ca6:	1b52      	subs	r2, r2, r5
 8002ca8:	d41f      	bmi.n	8002cea <_malloc_r+0xd6>
 8002caa:	2a0b      	cmp	r2, #11
 8002cac:	d917      	bls.n	8002cde <_malloc_r+0xca>
 8002cae:	1961      	adds	r1, r4, r5
 8002cb0:	42a3      	cmp	r3, r4
 8002cb2:	6025      	str	r5, [r4, #0]
 8002cb4:	bf18      	it	ne
 8002cb6:	6059      	strne	r1, [r3, #4]
 8002cb8:	6863      	ldr	r3, [r4, #4]
 8002cba:	bf08      	it	eq
 8002cbc:	f8c8 1000 	streq.w	r1, [r8]
 8002cc0:	5162      	str	r2, [r4, r5]
 8002cc2:	604b      	str	r3, [r1, #4]
 8002cc4:	4638      	mov	r0, r7
 8002cc6:	f104 060b 	add.w	r6, r4, #11
 8002cca:	f000 f829 	bl	8002d20 <__malloc_unlock>
 8002cce:	f026 0607 	bic.w	r6, r6, #7
 8002cd2:	1d23      	adds	r3, r4, #4
 8002cd4:	1af2      	subs	r2, r6, r3
 8002cd6:	d0ae      	beq.n	8002c36 <_malloc_r+0x22>
 8002cd8:	1b9b      	subs	r3, r3, r6
 8002cda:	50a3      	str	r3, [r4, r2]
 8002cdc:	e7ab      	b.n	8002c36 <_malloc_r+0x22>
 8002cde:	42a3      	cmp	r3, r4
 8002ce0:	6862      	ldr	r2, [r4, #4]
 8002ce2:	d1dd      	bne.n	8002ca0 <_malloc_r+0x8c>
 8002ce4:	f8c8 2000 	str.w	r2, [r8]
 8002ce8:	e7ec      	b.n	8002cc4 <_malloc_r+0xb0>
 8002cea:	4623      	mov	r3, r4
 8002cec:	6864      	ldr	r4, [r4, #4]
 8002cee:	e7ac      	b.n	8002c4a <_malloc_r+0x36>
 8002cf0:	4634      	mov	r4, r6
 8002cf2:	6876      	ldr	r6, [r6, #4]
 8002cf4:	e7b4      	b.n	8002c60 <_malloc_r+0x4c>
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	e7cc      	b.n	8002c94 <_malloc_r+0x80>
 8002cfa:	230c      	movs	r3, #12
 8002cfc:	4638      	mov	r0, r7
 8002cfe:	603b      	str	r3, [r7, #0]
 8002d00:	f000 f80e 	bl	8002d20 <__malloc_unlock>
 8002d04:	e797      	b.n	8002c36 <_malloc_r+0x22>
 8002d06:	6025      	str	r5, [r4, #0]
 8002d08:	e7dc      	b.n	8002cc4 <_malloc_r+0xb0>
 8002d0a:	605b      	str	r3, [r3, #4]
 8002d0c:	deff      	udf	#255	; 0xff
 8002d0e:	bf00      	nop
 8002d10:	20002170 	.word	0x20002170

08002d14 <__malloc_lock>:
 8002d14:	4801      	ldr	r0, [pc, #4]	; (8002d1c <__malloc_lock+0x8>)
 8002d16:	f7ff beec 	b.w	8002af2 <__retarget_lock_acquire_recursive>
 8002d1a:	bf00      	nop
 8002d1c:	2000216c 	.word	0x2000216c

08002d20 <__malloc_unlock>:
 8002d20:	4801      	ldr	r0, [pc, #4]	; (8002d28 <__malloc_unlock+0x8>)
 8002d22:	f7ff bee7 	b.w	8002af4 <__retarget_lock_release_recursive>
 8002d26:	bf00      	nop
 8002d28:	2000216c 	.word	0x2000216c

08002d2c <__sflush_r>:
 8002d2c:	898a      	ldrh	r2, [r1, #12]
 8002d2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d30:	4605      	mov	r5, r0
 8002d32:	0710      	lsls	r0, r2, #28
 8002d34:	460c      	mov	r4, r1
 8002d36:	d457      	bmi.n	8002de8 <__sflush_r+0xbc>
 8002d38:	684b      	ldr	r3, [r1, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	dc04      	bgt.n	8002d48 <__sflush_r+0x1c>
 8002d3e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	dc01      	bgt.n	8002d48 <__sflush_r+0x1c>
 8002d44:	2000      	movs	r0, #0
 8002d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d4a:	2e00      	cmp	r6, #0
 8002d4c:	d0fa      	beq.n	8002d44 <__sflush_r+0x18>
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002d54:	682f      	ldr	r7, [r5, #0]
 8002d56:	6a21      	ldr	r1, [r4, #32]
 8002d58:	602b      	str	r3, [r5, #0]
 8002d5a:	d032      	beq.n	8002dc2 <__sflush_r+0x96>
 8002d5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002d5e:	89a3      	ldrh	r3, [r4, #12]
 8002d60:	075a      	lsls	r2, r3, #29
 8002d62:	d505      	bpl.n	8002d70 <__sflush_r+0x44>
 8002d64:	6863      	ldr	r3, [r4, #4]
 8002d66:	1ac0      	subs	r0, r0, r3
 8002d68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d6a:	b10b      	cbz	r3, 8002d70 <__sflush_r+0x44>
 8002d6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d6e:	1ac0      	subs	r0, r0, r3
 8002d70:	2300      	movs	r3, #0
 8002d72:	4602      	mov	r2, r0
 8002d74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d76:	4628      	mov	r0, r5
 8002d78:	6a21      	ldr	r1, [r4, #32]
 8002d7a:	47b0      	blx	r6
 8002d7c:	1c43      	adds	r3, r0, #1
 8002d7e:	89a3      	ldrh	r3, [r4, #12]
 8002d80:	d106      	bne.n	8002d90 <__sflush_r+0x64>
 8002d82:	6829      	ldr	r1, [r5, #0]
 8002d84:	291d      	cmp	r1, #29
 8002d86:	d82b      	bhi.n	8002de0 <__sflush_r+0xb4>
 8002d88:	4a28      	ldr	r2, [pc, #160]	; (8002e2c <__sflush_r+0x100>)
 8002d8a:	410a      	asrs	r2, r1
 8002d8c:	07d6      	lsls	r6, r2, #31
 8002d8e:	d427      	bmi.n	8002de0 <__sflush_r+0xb4>
 8002d90:	2200      	movs	r2, #0
 8002d92:	6062      	str	r2, [r4, #4]
 8002d94:	6922      	ldr	r2, [r4, #16]
 8002d96:	04d9      	lsls	r1, r3, #19
 8002d98:	6022      	str	r2, [r4, #0]
 8002d9a:	d504      	bpl.n	8002da6 <__sflush_r+0x7a>
 8002d9c:	1c42      	adds	r2, r0, #1
 8002d9e:	d101      	bne.n	8002da4 <__sflush_r+0x78>
 8002da0:	682b      	ldr	r3, [r5, #0]
 8002da2:	b903      	cbnz	r3, 8002da6 <__sflush_r+0x7a>
 8002da4:	6560      	str	r0, [r4, #84]	; 0x54
 8002da6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002da8:	602f      	str	r7, [r5, #0]
 8002daa:	2900      	cmp	r1, #0
 8002dac:	d0ca      	beq.n	8002d44 <__sflush_r+0x18>
 8002dae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002db2:	4299      	cmp	r1, r3
 8002db4:	d002      	beq.n	8002dbc <__sflush_r+0x90>
 8002db6:	4628      	mov	r0, r5
 8002db8:	f7ff febc 	bl	8002b34 <_free_r>
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	6360      	str	r0, [r4, #52]	; 0x34
 8002dc0:	e7c1      	b.n	8002d46 <__sflush_r+0x1a>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	4628      	mov	r0, r5
 8002dc6:	47b0      	blx	r6
 8002dc8:	1c41      	adds	r1, r0, #1
 8002dca:	d1c8      	bne.n	8002d5e <__sflush_r+0x32>
 8002dcc:	682b      	ldr	r3, [r5, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0c5      	beq.n	8002d5e <__sflush_r+0x32>
 8002dd2:	2b1d      	cmp	r3, #29
 8002dd4:	d001      	beq.n	8002dda <__sflush_r+0xae>
 8002dd6:	2b16      	cmp	r3, #22
 8002dd8:	d101      	bne.n	8002dde <__sflush_r+0xb2>
 8002dda:	602f      	str	r7, [r5, #0]
 8002ddc:	e7b2      	b.n	8002d44 <__sflush_r+0x18>
 8002dde:	89a3      	ldrh	r3, [r4, #12]
 8002de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002de4:	81a3      	strh	r3, [r4, #12]
 8002de6:	e7ae      	b.n	8002d46 <__sflush_r+0x1a>
 8002de8:	690f      	ldr	r7, [r1, #16]
 8002dea:	2f00      	cmp	r7, #0
 8002dec:	d0aa      	beq.n	8002d44 <__sflush_r+0x18>
 8002dee:	0793      	lsls	r3, r2, #30
 8002df0:	bf18      	it	ne
 8002df2:	2300      	movne	r3, #0
 8002df4:	680e      	ldr	r6, [r1, #0]
 8002df6:	bf08      	it	eq
 8002df8:	694b      	ldreq	r3, [r1, #20]
 8002dfa:	1bf6      	subs	r6, r6, r7
 8002dfc:	600f      	str	r7, [r1, #0]
 8002dfe:	608b      	str	r3, [r1, #8]
 8002e00:	2e00      	cmp	r6, #0
 8002e02:	dd9f      	ble.n	8002d44 <__sflush_r+0x18>
 8002e04:	4633      	mov	r3, r6
 8002e06:	463a      	mov	r2, r7
 8002e08:	4628      	mov	r0, r5
 8002e0a:	6a21      	ldr	r1, [r4, #32]
 8002e0c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002e10:	47e0      	blx	ip
 8002e12:	2800      	cmp	r0, #0
 8002e14:	dc06      	bgt.n	8002e24 <__sflush_r+0xf8>
 8002e16:	89a3      	ldrh	r3, [r4, #12]
 8002e18:	f04f 30ff 	mov.w	r0, #4294967295
 8002e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e20:	81a3      	strh	r3, [r4, #12]
 8002e22:	e790      	b.n	8002d46 <__sflush_r+0x1a>
 8002e24:	4407      	add	r7, r0
 8002e26:	1a36      	subs	r6, r6, r0
 8002e28:	e7ea      	b.n	8002e00 <__sflush_r+0xd4>
 8002e2a:	bf00      	nop
 8002e2c:	dfbffffe 	.word	0xdfbffffe

08002e30 <_fflush_r>:
 8002e30:	b538      	push	{r3, r4, r5, lr}
 8002e32:	690b      	ldr	r3, [r1, #16]
 8002e34:	4605      	mov	r5, r0
 8002e36:	460c      	mov	r4, r1
 8002e38:	b913      	cbnz	r3, 8002e40 <_fflush_r+0x10>
 8002e3a:	2500      	movs	r5, #0
 8002e3c:	4628      	mov	r0, r5
 8002e3e:	bd38      	pop	{r3, r4, r5, pc}
 8002e40:	b118      	cbz	r0, 8002e4a <_fflush_r+0x1a>
 8002e42:	6a03      	ldr	r3, [r0, #32]
 8002e44:	b90b      	cbnz	r3, 8002e4a <_fflush_r+0x1a>
 8002e46:	f7ff fd47 	bl	80028d8 <__sinit>
 8002e4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0f3      	beq.n	8002e3a <_fflush_r+0xa>
 8002e52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002e54:	07d0      	lsls	r0, r2, #31
 8002e56:	d404      	bmi.n	8002e62 <_fflush_r+0x32>
 8002e58:	0599      	lsls	r1, r3, #22
 8002e5a:	d402      	bmi.n	8002e62 <_fflush_r+0x32>
 8002e5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e5e:	f7ff fe48 	bl	8002af2 <__retarget_lock_acquire_recursive>
 8002e62:	4628      	mov	r0, r5
 8002e64:	4621      	mov	r1, r4
 8002e66:	f7ff ff61 	bl	8002d2c <__sflush_r>
 8002e6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e6c:	4605      	mov	r5, r0
 8002e6e:	07da      	lsls	r2, r3, #31
 8002e70:	d4e4      	bmi.n	8002e3c <_fflush_r+0xc>
 8002e72:	89a3      	ldrh	r3, [r4, #12]
 8002e74:	059b      	lsls	r3, r3, #22
 8002e76:	d4e1      	bmi.n	8002e3c <_fflush_r+0xc>
 8002e78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e7a:	f7ff fe3b 	bl	8002af4 <__retarget_lock_release_recursive>
 8002e7e:	e7dd      	b.n	8002e3c <_fflush_r+0xc>

08002e80 <fiprintf>:
 8002e80:	b40e      	push	{r1, r2, r3}
 8002e82:	b503      	push	{r0, r1, lr}
 8002e84:	4601      	mov	r1, r0
 8002e86:	ab03      	add	r3, sp, #12
 8002e88:	4805      	ldr	r0, [pc, #20]	; (8002ea0 <fiprintf+0x20>)
 8002e8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e8e:	6800      	ldr	r0, [r0, #0]
 8002e90:	9301      	str	r3, [sp, #4]
 8002e92:	f000 f845 	bl	8002f20 <_vfiprintf_r>
 8002e96:	b002      	add	sp, #8
 8002e98:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e9c:	b003      	add	sp, #12
 8002e9e:	4770      	bx	lr
 8002ea0:	20000068 	.word	0x20000068

08002ea4 <_sbrk_r>:
 8002ea4:	b538      	push	{r3, r4, r5, lr}
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	4d05      	ldr	r5, [pc, #20]	; (8002ec0 <_sbrk_r+0x1c>)
 8002eaa:	4604      	mov	r4, r0
 8002eac:	4608      	mov	r0, r1
 8002eae:	602b      	str	r3, [r5, #0]
 8002eb0:	f7ff fb4a 	bl	8002548 <_sbrk>
 8002eb4:	1c43      	adds	r3, r0, #1
 8002eb6:	d102      	bne.n	8002ebe <_sbrk_r+0x1a>
 8002eb8:	682b      	ldr	r3, [r5, #0]
 8002eba:	b103      	cbz	r3, 8002ebe <_sbrk_r+0x1a>
 8002ebc:	6023      	str	r3, [r4, #0]
 8002ebe:	bd38      	pop	{r3, r4, r5, pc}
 8002ec0:	20002168 	.word	0x20002168

08002ec4 <abort>:
 8002ec4:	2006      	movs	r0, #6
 8002ec6:	b508      	push	{r3, lr}
 8002ec8:	f000 fb96 	bl	80035f8 <raise>
 8002ecc:	2001      	movs	r0, #1
 8002ece:	f7ff fb0b 	bl	80024e8 <_exit>

08002ed2 <__sfputc_r>:
 8002ed2:	6893      	ldr	r3, [r2, #8]
 8002ed4:	b410      	push	{r4}
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	6093      	str	r3, [r2, #8]
 8002edc:	da07      	bge.n	8002eee <__sfputc_r+0x1c>
 8002ede:	6994      	ldr	r4, [r2, #24]
 8002ee0:	42a3      	cmp	r3, r4
 8002ee2:	db01      	blt.n	8002ee8 <__sfputc_r+0x16>
 8002ee4:	290a      	cmp	r1, #10
 8002ee6:	d102      	bne.n	8002eee <__sfputc_r+0x1c>
 8002ee8:	bc10      	pop	{r4}
 8002eea:	f000 bac7 	b.w	800347c <__swbuf_r>
 8002eee:	6813      	ldr	r3, [r2, #0]
 8002ef0:	1c58      	adds	r0, r3, #1
 8002ef2:	6010      	str	r0, [r2, #0]
 8002ef4:	7019      	strb	r1, [r3, #0]
 8002ef6:	4608      	mov	r0, r1
 8002ef8:	bc10      	pop	{r4}
 8002efa:	4770      	bx	lr

08002efc <__sfputs_r>:
 8002efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002efe:	4606      	mov	r6, r0
 8002f00:	460f      	mov	r7, r1
 8002f02:	4614      	mov	r4, r2
 8002f04:	18d5      	adds	r5, r2, r3
 8002f06:	42ac      	cmp	r4, r5
 8002f08:	d101      	bne.n	8002f0e <__sfputs_r+0x12>
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	e007      	b.n	8002f1e <__sfputs_r+0x22>
 8002f0e:	463a      	mov	r2, r7
 8002f10:	4630      	mov	r0, r6
 8002f12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f16:	f7ff ffdc 	bl	8002ed2 <__sfputc_r>
 8002f1a:	1c43      	adds	r3, r0, #1
 8002f1c:	d1f3      	bne.n	8002f06 <__sfputs_r+0xa>
 8002f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002f20 <_vfiprintf_r>:
 8002f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f24:	460d      	mov	r5, r1
 8002f26:	4614      	mov	r4, r2
 8002f28:	4698      	mov	r8, r3
 8002f2a:	4606      	mov	r6, r0
 8002f2c:	b09d      	sub	sp, #116	; 0x74
 8002f2e:	b118      	cbz	r0, 8002f38 <_vfiprintf_r+0x18>
 8002f30:	6a03      	ldr	r3, [r0, #32]
 8002f32:	b90b      	cbnz	r3, 8002f38 <_vfiprintf_r+0x18>
 8002f34:	f7ff fcd0 	bl	80028d8 <__sinit>
 8002f38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f3a:	07d9      	lsls	r1, r3, #31
 8002f3c:	d405      	bmi.n	8002f4a <_vfiprintf_r+0x2a>
 8002f3e:	89ab      	ldrh	r3, [r5, #12]
 8002f40:	059a      	lsls	r2, r3, #22
 8002f42:	d402      	bmi.n	8002f4a <_vfiprintf_r+0x2a>
 8002f44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f46:	f7ff fdd4 	bl	8002af2 <__retarget_lock_acquire_recursive>
 8002f4a:	89ab      	ldrh	r3, [r5, #12]
 8002f4c:	071b      	lsls	r3, r3, #28
 8002f4e:	d501      	bpl.n	8002f54 <_vfiprintf_r+0x34>
 8002f50:	692b      	ldr	r3, [r5, #16]
 8002f52:	b99b      	cbnz	r3, 8002f7c <_vfiprintf_r+0x5c>
 8002f54:	4629      	mov	r1, r5
 8002f56:	4630      	mov	r0, r6
 8002f58:	f000 face 	bl	80034f8 <__swsetup_r>
 8002f5c:	b170      	cbz	r0, 8002f7c <_vfiprintf_r+0x5c>
 8002f5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f60:	07dc      	lsls	r4, r3, #31
 8002f62:	d504      	bpl.n	8002f6e <_vfiprintf_r+0x4e>
 8002f64:	f04f 30ff 	mov.w	r0, #4294967295
 8002f68:	b01d      	add	sp, #116	; 0x74
 8002f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f6e:	89ab      	ldrh	r3, [r5, #12]
 8002f70:	0598      	lsls	r0, r3, #22
 8002f72:	d4f7      	bmi.n	8002f64 <_vfiprintf_r+0x44>
 8002f74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f76:	f7ff fdbd 	bl	8002af4 <__retarget_lock_release_recursive>
 8002f7a:	e7f3      	b.n	8002f64 <_vfiprintf_r+0x44>
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8002f80:	2320      	movs	r3, #32
 8002f82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f86:	2330      	movs	r3, #48	; 0x30
 8002f88:	f04f 0901 	mov.w	r9, #1
 8002f8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f90:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8003140 <_vfiprintf_r+0x220>
 8002f94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f98:	4623      	mov	r3, r4
 8002f9a:	469a      	mov	sl, r3
 8002f9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002fa0:	b10a      	cbz	r2, 8002fa6 <_vfiprintf_r+0x86>
 8002fa2:	2a25      	cmp	r2, #37	; 0x25
 8002fa4:	d1f9      	bne.n	8002f9a <_vfiprintf_r+0x7a>
 8002fa6:	ebba 0b04 	subs.w	fp, sl, r4
 8002faa:	d00b      	beq.n	8002fc4 <_vfiprintf_r+0xa4>
 8002fac:	465b      	mov	r3, fp
 8002fae:	4622      	mov	r2, r4
 8002fb0:	4629      	mov	r1, r5
 8002fb2:	4630      	mov	r0, r6
 8002fb4:	f7ff ffa2 	bl	8002efc <__sfputs_r>
 8002fb8:	3001      	adds	r0, #1
 8002fba:	f000 80a9 	beq.w	8003110 <_vfiprintf_r+0x1f0>
 8002fbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002fc0:	445a      	add	r2, fp
 8002fc2:	9209      	str	r2, [sp, #36]	; 0x24
 8002fc4:	f89a 3000 	ldrb.w	r3, [sl]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 80a1 	beq.w	8003110 <_vfiprintf_r+0x1f0>
 8002fce:	2300      	movs	r3, #0
 8002fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002fd8:	f10a 0a01 	add.w	sl, sl, #1
 8002fdc:	9304      	str	r3, [sp, #16]
 8002fde:	9307      	str	r3, [sp, #28]
 8002fe0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002fe4:	931a      	str	r3, [sp, #104]	; 0x68
 8002fe6:	4654      	mov	r4, sl
 8002fe8:	2205      	movs	r2, #5
 8002fea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fee:	4854      	ldr	r0, [pc, #336]	; (8003140 <_vfiprintf_r+0x220>)
 8002ff0:	f000 fb1e 	bl	8003630 <memchr>
 8002ff4:	9a04      	ldr	r2, [sp, #16]
 8002ff6:	b9d8      	cbnz	r0, 8003030 <_vfiprintf_r+0x110>
 8002ff8:	06d1      	lsls	r1, r2, #27
 8002ffa:	bf44      	itt	mi
 8002ffc:	2320      	movmi	r3, #32
 8002ffe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003002:	0713      	lsls	r3, r2, #28
 8003004:	bf44      	itt	mi
 8003006:	232b      	movmi	r3, #43	; 0x2b
 8003008:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800300c:	f89a 3000 	ldrb.w	r3, [sl]
 8003010:	2b2a      	cmp	r3, #42	; 0x2a
 8003012:	d015      	beq.n	8003040 <_vfiprintf_r+0x120>
 8003014:	4654      	mov	r4, sl
 8003016:	2000      	movs	r0, #0
 8003018:	f04f 0c0a 	mov.w	ip, #10
 800301c:	9a07      	ldr	r2, [sp, #28]
 800301e:	4621      	mov	r1, r4
 8003020:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003024:	3b30      	subs	r3, #48	; 0x30
 8003026:	2b09      	cmp	r3, #9
 8003028:	d94d      	bls.n	80030c6 <_vfiprintf_r+0x1a6>
 800302a:	b1b0      	cbz	r0, 800305a <_vfiprintf_r+0x13a>
 800302c:	9207      	str	r2, [sp, #28]
 800302e:	e014      	b.n	800305a <_vfiprintf_r+0x13a>
 8003030:	eba0 0308 	sub.w	r3, r0, r8
 8003034:	fa09 f303 	lsl.w	r3, r9, r3
 8003038:	4313      	orrs	r3, r2
 800303a:	46a2      	mov	sl, r4
 800303c:	9304      	str	r3, [sp, #16]
 800303e:	e7d2      	b.n	8002fe6 <_vfiprintf_r+0xc6>
 8003040:	9b03      	ldr	r3, [sp, #12]
 8003042:	1d19      	adds	r1, r3, #4
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	9103      	str	r1, [sp, #12]
 8003048:	2b00      	cmp	r3, #0
 800304a:	bfbb      	ittet	lt
 800304c:	425b      	neglt	r3, r3
 800304e:	f042 0202 	orrlt.w	r2, r2, #2
 8003052:	9307      	strge	r3, [sp, #28]
 8003054:	9307      	strlt	r3, [sp, #28]
 8003056:	bfb8      	it	lt
 8003058:	9204      	strlt	r2, [sp, #16]
 800305a:	7823      	ldrb	r3, [r4, #0]
 800305c:	2b2e      	cmp	r3, #46	; 0x2e
 800305e:	d10c      	bne.n	800307a <_vfiprintf_r+0x15a>
 8003060:	7863      	ldrb	r3, [r4, #1]
 8003062:	2b2a      	cmp	r3, #42	; 0x2a
 8003064:	d134      	bne.n	80030d0 <_vfiprintf_r+0x1b0>
 8003066:	9b03      	ldr	r3, [sp, #12]
 8003068:	3402      	adds	r4, #2
 800306a:	1d1a      	adds	r2, r3, #4
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	9203      	str	r2, [sp, #12]
 8003070:	2b00      	cmp	r3, #0
 8003072:	bfb8      	it	lt
 8003074:	f04f 33ff 	movlt.w	r3, #4294967295
 8003078:	9305      	str	r3, [sp, #20]
 800307a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003144 <_vfiprintf_r+0x224>
 800307e:	2203      	movs	r2, #3
 8003080:	4650      	mov	r0, sl
 8003082:	7821      	ldrb	r1, [r4, #0]
 8003084:	f000 fad4 	bl	8003630 <memchr>
 8003088:	b138      	cbz	r0, 800309a <_vfiprintf_r+0x17a>
 800308a:	2240      	movs	r2, #64	; 0x40
 800308c:	9b04      	ldr	r3, [sp, #16]
 800308e:	eba0 000a 	sub.w	r0, r0, sl
 8003092:	4082      	lsls	r2, r0
 8003094:	4313      	orrs	r3, r2
 8003096:	3401      	adds	r4, #1
 8003098:	9304      	str	r3, [sp, #16]
 800309a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800309e:	2206      	movs	r2, #6
 80030a0:	4829      	ldr	r0, [pc, #164]	; (8003148 <_vfiprintf_r+0x228>)
 80030a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80030a6:	f000 fac3 	bl	8003630 <memchr>
 80030aa:	2800      	cmp	r0, #0
 80030ac:	d03f      	beq.n	800312e <_vfiprintf_r+0x20e>
 80030ae:	4b27      	ldr	r3, [pc, #156]	; (800314c <_vfiprintf_r+0x22c>)
 80030b0:	bb1b      	cbnz	r3, 80030fa <_vfiprintf_r+0x1da>
 80030b2:	9b03      	ldr	r3, [sp, #12]
 80030b4:	3307      	adds	r3, #7
 80030b6:	f023 0307 	bic.w	r3, r3, #7
 80030ba:	3308      	adds	r3, #8
 80030bc:	9303      	str	r3, [sp, #12]
 80030be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030c0:	443b      	add	r3, r7
 80030c2:	9309      	str	r3, [sp, #36]	; 0x24
 80030c4:	e768      	b.n	8002f98 <_vfiprintf_r+0x78>
 80030c6:	460c      	mov	r4, r1
 80030c8:	2001      	movs	r0, #1
 80030ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80030ce:	e7a6      	b.n	800301e <_vfiprintf_r+0xfe>
 80030d0:	2300      	movs	r3, #0
 80030d2:	f04f 0c0a 	mov.w	ip, #10
 80030d6:	4619      	mov	r1, r3
 80030d8:	3401      	adds	r4, #1
 80030da:	9305      	str	r3, [sp, #20]
 80030dc:	4620      	mov	r0, r4
 80030de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80030e2:	3a30      	subs	r2, #48	; 0x30
 80030e4:	2a09      	cmp	r2, #9
 80030e6:	d903      	bls.n	80030f0 <_vfiprintf_r+0x1d0>
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0c6      	beq.n	800307a <_vfiprintf_r+0x15a>
 80030ec:	9105      	str	r1, [sp, #20]
 80030ee:	e7c4      	b.n	800307a <_vfiprintf_r+0x15a>
 80030f0:	4604      	mov	r4, r0
 80030f2:	2301      	movs	r3, #1
 80030f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80030f8:	e7f0      	b.n	80030dc <_vfiprintf_r+0x1bc>
 80030fa:	ab03      	add	r3, sp, #12
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	462a      	mov	r2, r5
 8003100:	4630      	mov	r0, r6
 8003102:	4b13      	ldr	r3, [pc, #76]	; (8003150 <_vfiprintf_r+0x230>)
 8003104:	a904      	add	r1, sp, #16
 8003106:	f3af 8000 	nop.w
 800310a:	4607      	mov	r7, r0
 800310c:	1c78      	adds	r0, r7, #1
 800310e:	d1d6      	bne.n	80030be <_vfiprintf_r+0x19e>
 8003110:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003112:	07d9      	lsls	r1, r3, #31
 8003114:	d405      	bmi.n	8003122 <_vfiprintf_r+0x202>
 8003116:	89ab      	ldrh	r3, [r5, #12]
 8003118:	059a      	lsls	r2, r3, #22
 800311a:	d402      	bmi.n	8003122 <_vfiprintf_r+0x202>
 800311c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800311e:	f7ff fce9 	bl	8002af4 <__retarget_lock_release_recursive>
 8003122:	89ab      	ldrh	r3, [r5, #12]
 8003124:	065b      	lsls	r3, r3, #25
 8003126:	f53f af1d 	bmi.w	8002f64 <_vfiprintf_r+0x44>
 800312a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800312c:	e71c      	b.n	8002f68 <_vfiprintf_r+0x48>
 800312e:	ab03      	add	r3, sp, #12
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	462a      	mov	r2, r5
 8003134:	4630      	mov	r0, r6
 8003136:	4b06      	ldr	r3, [pc, #24]	; (8003150 <_vfiprintf_r+0x230>)
 8003138:	a904      	add	r1, sp, #16
 800313a:	f000 f87d 	bl	8003238 <_printf_i>
 800313e:	e7e4      	b.n	800310a <_vfiprintf_r+0x1ea>
 8003140:	0800385b 	.word	0x0800385b
 8003144:	08003861 	.word	0x08003861
 8003148:	08003865 	.word	0x08003865
 800314c:	00000000 	.word	0x00000000
 8003150:	08002efd 	.word	0x08002efd

08003154 <_printf_common>:
 8003154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003158:	4616      	mov	r6, r2
 800315a:	4699      	mov	r9, r3
 800315c:	688a      	ldr	r2, [r1, #8]
 800315e:	690b      	ldr	r3, [r1, #16]
 8003160:	4607      	mov	r7, r0
 8003162:	4293      	cmp	r3, r2
 8003164:	bfb8      	it	lt
 8003166:	4613      	movlt	r3, r2
 8003168:	6033      	str	r3, [r6, #0]
 800316a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800316e:	460c      	mov	r4, r1
 8003170:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003174:	b10a      	cbz	r2, 800317a <_printf_common+0x26>
 8003176:	3301      	adds	r3, #1
 8003178:	6033      	str	r3, [r6, #0]
 800317a:	6823      	ldr	r3, [r4, #0]
 800317c:	0699      	lsls	r1, r3, #26
 800317e:	bf42      	ittt	mi
 8003180:	6833      	ldrmi	r3, [r6, #0]
 8003182:	3302      	addmi	r3, #2
 8003184:	6033      	strmi	r3, [r6, #0]
 8003186:	6825      	ldr	r5, [r4, #0]
 8003188:	f015 0506 	ands.w	r5, r5, #6
 800318c:	d106      	bne.n	800319c <_printf_common+0x48>
 800318e:	f104 0a19 	add.w	sl, r4, #25
 8003192:	68e3      	ldr	r3, [r4, #12]
 8003194:	6832      	ldr	r2, [r6, #0]
 8003196:	1a9b      	subs	r3, r3, r2
 8003198:	42ab      	cmp	r3, r5
 800319a:	dc2b      	bgt.n	80031f4 <_printf_common+0xa0>
 800319c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80031a0:	1e13      	subs	r3, r2, #0
 80031a2:	6822      	ldr	r2, [r4, #0]
 80031a4:	bf18      	it	ne
 80031a6:	2301      	movne	r3, #1
 80031a8:	0692      	lsls	r2, r2, #26
 80031aa:	d430      	bmi.n	800320e <_printf_common+0xba>
 80031ac:	4649      	mov	r1, r9
 80031ae:	4638      	mov	r0, r7
 80031b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80031b4:	47c0      	blx	r8
 80031b6:	3001      	adds	r0, #1
 80031b8:	d023      	beq.n	8003202 <_printf_common+0xae>
 80031ba:	6823      	ldr	r3, [r4, #0]
 80031bc:	6922      	ldr	r2, [r4, #16]
 80031be:	f003 0306 	and.w	r3, r3, #6
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	bf14      	ite	ne
 80031c6:	2500      	movne	r5, #0
 80031c8:	6833      	ldreq	r3, [r6, #0]
 80031ca:	f04f 0600 	mov.w	r6, #0
 80031ce:	bf08      	it	eq
 80031d0:	68e5      	ldreq	r5, [r4, #12]
 80031d2:	f104 041a 	add.w	r4, r4, #26
 80031d6:	bf08      	it	eq
 80031d8:	1aed      	subeq	r5, r5, r3
 80031da:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80031de:	bf08      	it	eq
 80031e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80031e4:	4293      	cmp	r3, r2
 80031e6:	bfc4      	itt	gt
 80031e8:	1a9b      	subgt	r3, r3, r2
 80031ea:	18ed      	addgt	r5, r5, r3
 80031ec:	42b5      	cmp	r5, r6
 80031ee:	d11a      	bne.n	8003226 <_printf_common+0xd2>
 80031f0:	2000      	movs	r0, #0
 80031f2:	e008      	b.n	8003206 <_printf_common+0xb2>
 80031f4:	2301      	movs	r3, #1
 80031f6:	4652      	mov	r2, sl
 80031f8:	4649      	mov	r1, r9
 80031fa:	4638      	mov	r0, r7
 80031fc:	47c0      	blx	r8
 80031fe:	3001      	adds	r0, #1
 8003200:	d103      	bne.n	800320a <_printf_common+0xb6>
 8003202:	f04f 30ff 	mov.w	r0, #4294967295
 8003206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800320a:	3501      	adds	r5, #1
 800320c:	e7c1      	b.n	8003192 <_printf_common+0x3e>
 800320e:	2030      	movs	r0, #48	; 0x30
 8003210:	18e1      	adds	r1, r4, r3
 8003212:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003216:	1c5a      	adds	r2, r3, #1
 8003218:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800321c:	4422      	add	r2, r4
 800321e:	3302      	adds	r3, #2
 8003220:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003224:	e7c2      	b.n	80031ac <_printf_common+0x58>
 8003226:	2301      	movs	r3, #1
 8003228:	4622      	mov	r2, r4
 800322a:	4649      	mov	r1, r9
 800322c:	4638      	mov	r0, r7
 800322e:	47c0      	blx	r8
 8003230:	3001      	adds	r0, #1
 8003232:	d0e6      	beq.n	8003202 <_printf_common+0xae>
 8003234:	3601      	adds	r6, #1
 8003236:	e7d9      	b.n	80031ec <_printf_common+0x98>

08003238 <_printf_i>:
 8003238:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800323c:	7e0f      	ldrb	r7, [r1, #24]
 800323e:	4691      	mov	r9, r2
 8003240:	2f78      	cmp	r7, #120	; 0x78
 8003242:	4680      	mov	r8, r0
 8003244:	460c      	mov	r4, r1
 8003246:	469a      	mov	sl, r3
 8003248:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800324a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800324e:	d807      	bhi.n	8003260 <_printf_i+0x28>
 8003250:	2f62      	cmp	r7, #98	; 0x62
 8003252:	d80a      	bhi.n	800326a <_printf_i+0x32>
 8003254:	2f00      	cmp	r7, #0
 8003256:	f000 80d5 	beq.w	8003404 <_printf_i+0x1cc>
 800325a:	2f58      	cmp	r7, #88	; 0x58
 800325c:	f000 80c1 	beq.w	80033e2 <_printf_i+0x1aa>
 8003260:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003264:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003268:	e03a      	b.n	80032e0 <_printf_i+0xa8>
 800326a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800326e:	2b15      	cmp	r3, #21
 8003270:	d8f6      	bhi.n	8003260 <_printf_i+0x28>
 8003272:	a101      	add	r1, pc, #4	; (adr r1, 8003278 <_printf_i+0x40>)
 8003274:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003278:	080032d1 	.word	0x080032d1
 800327c:	080032e5 	.word	0x080032e5
 8003280:	08003261 	.word	0x08003261
 8003284:	08003261 	.word	0x08003261
 8003288:	08003261 	.word	0x08003261
 800328c:	08003261 	.word	0x08003261
 8003290:	080032e5 	.word	0x080032e5
 8003294:	08003261 	.word	0x08003261
 8003298:	08003261 	.word	0x08003261
 800329c:	08003261 	.word	0x08003261
 80032a0:	08003261 	.word	0x08003261
 80032a4:	080033eb 	.word	0x080033eb
 80032a8:	08003311 	.word	0x08003311
 80032ac:	080033a5 	.word	0x080033a5
 80032b0:	08003261 	.word	0x08003261
 80032b4:	08003261 	.word	0x08003261
 80032b8:	0800340d 	.word	0x0800340d
 80032bc:	08003261 	.word	0x08003261
 80032c0:	08003311 	.word	0x08003311
 80032c4:	08003261 	.word	0x08003261
 80032c8:	08003261 	.word	0x08003261
 80032cc:	080033ad 	.word	0x080033ad
 80032d0:	682b      	ldr	r3, [r5, #0]
 80032d2:	1d1a      	adds	r2, r3, #4
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	602a      	str	r2, [r5, #0]
 80032d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80032e0:	2301      	movs	r3, #1
 80032e2:	e0a0      	b.n	8003426 <_printf_i+0x1ee>
 80032e4:	6820      	ldr	r0, [r4, #0]
 80032e6:	682b      	ldr	r3, [r5, #0]
 80032e8:	0607      	lsls	r7, r0, #24
 80032ea:	f103 0104 	add.w	r1, r3, #4
 80032ee:	6029      	str	r1, [r5, #0]
 80032f0:	d501      	bpl.n	80032f6 <_printf_i+0xbe>
 80032f2:	681e      	ldr	r6, [r3, #0]
 80032f4:	e003      	b.n	80032fe <_printf_i+0xc6>
 80032f6:	0646      	lsls	r6, r0, #25
 80032f8:	d5fb      	bpl.n	80032f2 <_printf_i+0xba>
 80032fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80032fe:	2e00      	cmp	r6, #0
 8003300:	da03      	bge.n	800330a <_printf_i+0xd2>
 8003302:	232d      	movs	r3, #45	; 0x2d
 8003304:	4276      	negs	r6, r6
 8003306:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800330a:	230a      	movs	r3, #10
 800330c:	4859      	ldr	r0, [pc, #356]	; (8003474 <_printf_i+0x23c>)
 800330e:	e012      	b.n	8003336 <_printf_i+0xfe>
 8003310:	682b      	ldr	r3, [r5, #0]
 8003312:	6820      	ldr	r0, [r4, #0]
 8003314:	1d19      	adds	r1, r3, #4
 8003316:	6029      	str	r1, [r5, #0]
 8003318:	0605      	lsls	r5, r0, #24
 800331a:	d501      	bpl.n	8003320 <_printf_i+0xe8>
 800331c:	681e      	ldr	r6, [r3, #0]
 800331e:	e002      	b.n	8003326 <_printf_i+0xee>
 8003320:	0641      	lsls	r1, r0, #25
 8003322:	d5fb      	bpl.n	800331c <_printf_i+0xe4>
 8003324:	881e      	ldrh	r6, [r3, #0]
 8003326:	2f6f      	cmp	r7, #111	; 0x6f
 8003328:	bf0c      	ite	eq
 800332a:	2308      	moveq	r3, #8
 800332c:	230a      	movne	r3, #10
 800332e:	4851      	ldr	r0, [pc, #324]	; (8003474 <_printf_i+0x23c>)
 8003330:	2100      	movs	r1, #0
 8003332:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003336:	6865      	ldr	r5, [r4, #4]
 8003338:	2d00      	cmp	r5, #0
 800333a:	bfa8      	it	ge
 800333c:	6821      	ldrge	r1, [r4, #0]
 800333e:	60a5      	str	r5, [r4, #8]
 8003340:	bfa4      	itt	ge
 8003342:	f021 0104 	bicge.w	r1, r1, #4
 8003346:	6021      	strge	r1, [r4, #0]
 8003348:	b90e      	cbnz	r6, 800334e <_printf_i+0x116>
 800334a:	2d00      	cmp	r5, #0
 800334c:	d04b      	beq.n	80033e6 <_printf_i+0x1ae>
 800334e:	4615      	mov	r5, r2
 8003350:	fbb6 f1f3 	udiv	r1, r6, r3
 8003354:	fb03 6711 	mls	r7, r3, r1, r6
 8003358:	5dc7      	ldrb	r7, [r0, r7]
 800335a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800335e:	4637      	mov	r7, r6
 8003360:	42bb      	cmp	r3, r7
 8003362:	460e      	mov	r6, r1
 8003364:	d9f4      	bls.n	8003350 <_printf_i+0x118>
 8003366:	2b08      	cmp	r3, #8
 8003368:	d10b      	bne.n	8003382 <_printf_i+0x14a>
 800336a:	6823      	ldr	r3, [r4, #0]
 800336c:	07de      	lsls	r6, r3, #31
 800336e:	d508      	bpl.n	8003382 <_printf_i+0x14a>
 8003370:	6923      	ldr	r3, [r4, #16]
 8003372:	6861      	ldr	r1, [r4, #4]
 8003374:	4299      	cmp	r1, r3
 8003376:	bfde      	ittt	le
 8003378:	2330      	movle	r3, #48	; 0x30
 800337a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800337e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003382:	1b52      	subs	r2, r2, r5
 8003384:	6122      	str	r2, [r4, #16]
 8003386:	464b      	mov	r3, r9
 8003388:	4621      	mov	r1, r4
 800338a:	4640      	mov	r0, r8
 800338c:	f8cd a000 	str.w	sl, [sp]
 8003390:	aa03      	add	r2, sp, #12
 8003392:	f7ff fedf 	bl	8003154 <_printf_common>
 8003396:	3001      	adds	r0, #1
 8003398:	d14a      	bne.n	8003430 <_printf_i+0x1f8>
 800339a:	f04f 30ff 	mov.w	r0, #4294967295
 800339e:	b004      	add	sp, #16
 80033a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033a4:	6823      	ldr	r3, [r4, #0]
 80033a6:	f043 0320 	orr.w	r3, r3, #32
 80033aa:	6023      	str	r3, [r4, #0]
 80033ac:	2778      	movs	r7, #120	; 0x78
 80033ae:	4832      	ldr	r0, [pc, #200]	; (8003478 <_printf_i+0x240>)
 80033b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80033b4:	6823      	ldr	r3, [r4, #0]
 80033b6:	6829      	ldr	r1, [r5, #0]
 80033b8:	061f      	lsls	r7, r3, #24
 80033ba:	f851 6b04 	ldr.w	r6, [r1], #4
 80033be:	d402      	bmi.n	80033c6 <_printf_i+0x18e>
 80033c0:	065f      	lsls	r7, r3, #25
 80033c2:	bf48      	it	mi
 80033c4:	b2b6      	uxthmi	r6, r6
 80033c6:	07df      	lsls	r7, r3, #31
 80033c8:	bf48      	it	mi
 80033ca:	f043 0320 	orrmi.w	r3, r3, #32
 80033ce:	6029      	str	r1, [r5, #0]
 80033d0:	bf48      	it	mi
 80033d2:	6023      	strmi	r3, [r4, #0]
 80033d4:	b91e      	cbnz	r6, 80033de <_printf_i+0x1a6>
 80033d6:	6823      	ldr	r3, [r4, #0]
 80033d8:	f023 0320 	bic.w	r3, r3, #32
 80033dc:	6023      	str	r3, [r4, #0]
 80033de:	2310      	movs	r3, #16
 80033e0:	e7a6      	b.n	8003330 <_printf_i+0xf8>
 80033e2:	4824      	ldr	r0, [pc, #144]	; (8003474 <_printf_i+0x23c>)
 80033e4:	e7e4      	b.n	80033b0 <_printf_i+0x178>
 80033e6:	4615      	mov	r5, r2
 80033e8:	e7bd      	b.n	8003366 <_printf_i+0x12e>
 80033ea:	682b      	ldr	r3, [r5, #0]
 80033ec:	6826      	ldr	r6, [r4, #0]
 80033ee:	1d18      	adds	r0, r3, #4
 80033f0:	6961      	ldr	r1, [r4, #20]
 80033f2:	6028      	str	r0, [r5, #0]
 80033f4:	0635      	lsls	r5, r6, #24
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	d501      	bpl.n	80033fe <_printf_i+0x1c6>
 80033fa:	6019      	str	r1, [r3, #0]
 80033fc:	e002      	b.n	8003404 <_printf_i+0x1cc>
 80033fe:	0670      	lsls	r0, r6, #25
 8003400:	d5fb      	bpl.n	80033fa <_printf_i+0x1c2>
 8003402:	8019      	strh	r1, [r3, #0]
 8003404:	2300      	movs	r3, #0
 8003406:	4615      	mov	r5, r2
 8003408:	6123      	str	r3, [r4, #16]
 800340a:	e7bc      	b.n	8003386 <_printf_i+0x14e>
 800340c:	682b      	ldr	r3, [r5, #0]
 800340e:	2100      	movs	r1, #0
 8003410:	1d1a      	adds	r2, r3, #4
 8003412:	602a      	str	r2, [r5, #0]
 8003414:	681d      	ldr	r5, [r3, #0]
 8003416:	6862      	ldr	r2, [r4, #4]
 8003418:	4628      	mov	r0, r5
 800341a:	f000 f909 	bl	8003630 <memchr>
 800341e:	b108      	cbz	r0, 8003424 <_printf_i+0x1ec>
 8003420:	1b40      	subs	r0, r0, r5
 8003422:	6060      	str	r0, [r4, #4]
 8003424:	6863      	ldr	r3, [r4, #4]
 8003426:	6123      	str	r3, [r4, #16]
 8003428:	2300      	movs	r3, #0
 800342a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800342e:	e7aa      	b.n	8003386 <_printf_i+0x14e>
 8003430:	462a      	mov	r2, r5
 8003432:	4649      	mov	r1, r9
 8003434:	4640      	mov	r0, r8
 8003436:	6923      	ldr	r3, [r4, #16]
 8003438:	47d0      	blx	sl
 800343a:	3001      	adds	r0, #1
 800343c:	d0ad      	beq.n	800339a <_printf_i+0x162>
 800343e:	6823      	ldr	r3, [r4, #0]
 8003440:	079b      	lsls	r3, r3, #30
 8003442:	d413      	bmi.n	800346c <_printf_i+0x234>
 8003444:	68e0      	ldr	r0, [r4, #12]
 8003446:	9b03      	ldr	r3, [sp, #12]
 8003448:	4298      	cmp	r0, r3
 800344a:	bfb8      	it	lt
 800344c:	4618      	movlt	r0, r3
 800344e:	e7a6      	b.n	800339e <_printf_i+0x166>
 8003450:	2301      	movs	r3, #1
 8003452:	4632      	mov	r2, r6
 8003454:	4649      	mov	r1, r9
 8003456:	4640      	mov	r0, r8
 8003458:	47d0      	blx	sl
 800345a:	3001      	adds	r0, #1
 800345c:	d09d      	beq.n	800339a <_printf_i+0x162>
 800345e:	3501      	adds	r5, #1
 8003460:	68e3      	ldr	r3, [r4, #12]
 8003462:	9903      	ldr	r1, [sp, #12]
 8003464:	1a5b      	subs	r3, r3, r1
 8003466:	42ab      	cmp	r3, r5
 8003468:	dcf2      	bgt.n	8003450 <_printf_i+0x218>
 800346a:	e7eb      	b.n	8003444 <_printf_i+0x20c>
 800346c:	2500      	movs	r5, #0
 800346e:	f104 0619 	add.w	r6, r4, #25
 8003472:	e7f5      	b.n	8003460 <_printf_i+0x228>
 8003474:	0800386c 	.word	0x0800386c
 8003478:	0800387d 	.word	0x0800387d

0800347c <__swbuf_r>:
 800347c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800347e:	460e      	mov	r6, r1
 8003480:	4614      	mov	r4, r2
 8003482:	4605      	mov	r5, r0
 8003484:	b118      	cbz	r0, 800348e <__swbuf_r+0x12>
 8003486:	6a03      	ldr	r3, [r0, #32]
 8003488:	b90b      	cbnz	r3, 800348e <__swbuf_r+0x12>
 800348a:	f7ff fa25 	bl	80028d8 <__sinit>
 800348e:	69a3      	ldr	r3, [r4, #24]
 8003490:	60a3      	str	r3, [r4, #8]
 8003492:	89a3      	ldrh	r3, [r4, #12]
 8003494:	071a      	lsls	r2, r3, #28
 8003496:	d525      	bpl.n	80034e4 <__swbuf_r+0x68>
 8003498:	6923      	ldr	r3, [r4, #16]
 800349a:	b31b      	cbz	r3, 80034e4 <__swbuf_r+0x68>
 800349c:	6823      	ldr	r3, [r4, #0]
 800349e:	6922      	ldr	r2, [r4, #16]
 80034a0:	b2f6      	uxtb	r6, r6
 80034a2:	1a98      	subs	r0, r3, r2
 80034a4:	6963      	ldr	r3, [r4, #20]
 80034a6:	4637      	mov	r7, r6
 80034a8:	4283      	cmp	r3, r0
 80034aa:	dc04      	bgt.n	80034b6 <__swbuf_r+0x3a>
 80034ac:	4621      	mov	r1, r4
 80034ae:	4628      	mov	r0, r5
 80034b0:	f7ff fcbe 	bl	8002e30 <_fflush_r>
 80034b4:	b9e0      	cbnz	r0, 80034f0 <__swbuf_r+0x74>
 80034b6:	68a3      	ldr	r3, [r4, #8]
 80034b8:	3b01      	subs	r3, #1
 80034ba:	60a3      	str	r3, [r4, #8]
 80034bc:	6823      	ldr	r3, [r4, #0]
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	6022      	str	r2, [r4, #0]
 80034c2:	701e      	strb	r6, [r3, #0]
 80034c4:	6962      	ldr	r2, [r4, #20]
 80034c6:	1c43      	adds	r3, r0, #1
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d004      	beq.n	80034d6 <__swbuf_r+0x5a>
 80034cc:	89a3      	ldrh	r3, [r4, #12]
 80034ce:	07db      	lsls	r3, r3, #31
 80034d0:	d506      	bpl.n	80034e0 <__swbuf_r+0x64>
 80034d2:	2e0a      	cmp	r6, #10
 80034d4:	d104      	bne.n	80034e0 <__swbuf_r+0x64>
 80034d6:	4621      	mov	r1, r4
 80034d8:	4628      	mov	r0, r5
 80034da:	f7ff fca9 	bl	8002e30 <_fflush_r>
 80034de:	b938      	cbnz	r0, 80034f0 <__swbuf_r+0x74>
 80034e0:	4638      	mov	r0, r7
 80034e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034e4:	4621      	mov	r1, r4
 80034e6:	4628      	mov	r0, r5
 80034e8:	f000 f806 	bl	80034f8 <__swsetup_r>
 80034ec:	2800      	cmp	r0, #0
 80034ee:	d0d5      	beq.n	800349c <__swbuf_r+0x20>
 80034f0:	f04f 37ff 	mov.w	r7, #4294967295
 80034f4:	e7f4      	b.n	80034e0 <__swbuf_r+0x64>
	...

080034f8 <__swsetup_r>:
 80034f8:	b538      	push	{r3, r4, r5, lr}
 80034fa:	4b2a      	ldr	r3, [pc, #168]	; (80035a4 <__swsetup_r+0xac>)
 80034fc:	4605      	mov	r5, r0
 80034fe:	6818      	ldr	r0, [r3, #0]
 8003500:	460c      	mov	r4, r1
 8003502:	b118      	cbz	r0, 800350c <__swsetup_r+0x14>
 8003504:	6a03      	ldr	r3, [r0, #32]
 8003506:	b90b      	cbnz	r3, 800350c <__swsetup_r+0x14>
 8003508:	f7ff f9e6 	bl	80028d8 <__sinit>
 800350c:	89a3      	ldrh	r3, [r4, #12]
 800350e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003512:	0718      	lsls	r0, r3, #28
 8003514:	d422      	bmi.n	800355c <__swsetup_r+0x64>
 8003516:	06d9      	lsls	r1, r3, #27
 8003518:	d407      	bmi.n	800352a <__swsetup_r+0x32>
 800351a:	2309      	movs	r3, #9
 800351c:	602b      	str	r3, [r5, #0]
 800351e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003522:	f04f 30ff 	mov.w	r0, #4294967295
 8003526:	81a3      	strh	r3, [r4, #12]
 8003528:	e034      	b.n	8003594 <__swsetup_r+0x9c>
 800352a:	0758      	lsls	r0, r3, #29
 800352c:	d512      	bpl.n	8003554 <__swsetup_r+0x5c>
 800352e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003530:	b141      	cbz	r1, 8003544 <__swsetup_r+0x4c>
 8003532:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003536:	4299      	cmp	r1, r3
 8003538:	d002      	beq.n	8003540 <__swsetup_r+0x48>
 800353a:	4628      	mov	r0, r5
 800353c:	f7ff fafa 	bl	8002b34 <_free_r>
 8003540:	2300      	movs	r3, #0
 8003542:	6363      	str	r3, [r4, #52]	; 0x34
 8003544:	89a3      	ldrh	r3, [r4, #12]
 8003546:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800354a:	81a3      	strh	r3, [r4, #12]
 800354c:	2300      	movs	r3, #0
 800354e:	6063      	str	r3, [r4, #4]
 8003550:	6923      	ldr	r3, [r4, #16]
 8003552:	6023      	str	r3, [r4, #0]
 8003554:	89a3      	ldrh	r3, [r4, #12]
 8003556:	f043 0308 	orr.w	r3, r3, #8
 800355a:	81a3      	strh	r3, [r4, #12]
 800355c:	6923      	ldr	r3, [r4, #16]
 800355e:	b94b      	cbnz	r3, 8003574 <__swsetup_r+0x7c>
 8003560:	89a3      	ldrh	r3, [r4, #12]
 8003562:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003566:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800356a:	d003      	beq.n	8003574 <__swsetup_r+0x7c>
 800356c:	4621      	mov	r1, r4
 800356e:	4628      	mov	r0, r5
 8003570:	f000 f891 	bl	8003696 <__smakebuf_r>
 8003574:	89a0      	ldrh	r0, [r4, #12]
 8003576:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800357a:	f010 0301 	ands.w	r3, r0, #1
 800357e:	d00a      	beq.n	8003596 <__swsetup_r+0x9e>
 8003580:	2300      	movs	r3, #0
 8003582:	60a3      	str	r3, [r4, #8]
 8003584:	6963      	ldr	r3, [r4, #20]
 8003586:	425b      	negs	r3, r3
 8003588:	61a3      	str	r3, [r4, #24]
 800358a:	6923      	ldr	r3, [r4, #16]
 800358c:	b943      	cbnz	r3, 80035a0 <__swsetup_r+0xa8>
 800358e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003592:	d1c4      	bne.n	800351e <__swsetup_r+0x26>
 8003594:	bd38      	pop	{r3, r4, r5, pc}
 8003596:	0781      	lsls	r1, r0, #30
 8003598:	bf58      	it	pl
 800359a:	6963      	ldrpl	r3, [r4, #20]
 800359c:	60a3      	str	r3, [r4, #8]
 800359e:	e7f4      	b.n	800358a <__swsetup_r+0x92>
 80035a0:	2000      	movs	r0, #0
 80035a2:	e7f7      	b.n	8003594 <__swsetup_r+0x9c>
 80035a4:	20000068 	.word	0x20000068

080035a8 <_raise_r>:
 80035a8:	291f      	cmp	r1, #31
 80035aa:	b538      	push	{r3, r4, r5, lr}
 80035ac:	4604      	mov	r4, r0
 80035ae:	460d      	mov	r5, r1
 80035b0:	d904      	bls.n	80035bc <_raise_r+0x14>
 80035b2:	2316      	movs	r3, #22
 80035b4:	6003      	str	r3, [r0, #0]
 80035b6:	f04f 30ff 	mov.w	r0, #4294967295
 80035ba:	bd38      	pop	{r3, r4, r5, pc}
 80035bc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80035be:	b112      	cbz	r2, 80035c6 <_raise_r+0x1e>
 80035c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80035c4:	b94b      	cbnz	r3, 80035da <_raise_r+0x32>
 80035c6:	4620      	mov	r0, r4
 80035c8:	f000 f830 	bl	800362c <_getpid_r>
 80035cc:	462a      	mov	r2, r5
 80035ce:	4601      	mov	r1, r0
 80035d0:	4620      	mov	r0, r4
 80035d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80035d6:	f000 b817 	b.w	8003608 <_kill_r>
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d00a      	beq.n	80035f4 <_raise_r+0x4c>
 80035de:	1c59      	adds	r1, r3, #1
 80035e0:	d103      	bne.n	80035ea <_raise_r+0x42>
 80035e2:	2316      	movs	r3, #22
 80035e4:	6003      	str	r3, [r0, #0]
 80035e6:	2001      	movs	r0, #1
 80035e8:	e7e7      	b.n	80035ba <_raise_r+0x12>
 80035ea:	2400      	movs	r4, #0
 80035ec:	4628      	mov	r0, r5
 80035ee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80035f2:	4798      	blx	r3
 80035f4:	2000      	movs	r0, #0
 80035f6:	e7e0      	b.n	80035ba <_raise_r+0x12>

080035f8 <raise>:
 80035f8:	4b02      	ldr	r3, [pc, #8]	; (8003604 <raise+0xc>)
 80035fa:	4601      	mov	r1, r0
 80035fc:	6818      	ldr	r0, [r3, #0]
 80035fe:	f7ff bfd3 	b.w	80035a8 <_raise_r>
 8003602:	bf00      	nop
 8003604:	20000068 	.word	0x20000068

08003608 <_kill_r>:
 8003608:	b538      	push	{r3, r4, r5, lr}
 800360a:	2300      	movs	r3, #0
 800360c:	4d06      	ldr	r5, [pc, #24]	; (8003628 <_kill_r+0x20>)
 800360e:	4604      	mov	r4, r0
 8003610:	4608      	mov	r0, r1
 8003612:	4611      	mov	r1, r2
 8003614:	602b      	str	r3, [r5, #0]
 8003616:	f7fe ff5d 	bl	80024d4 <_kill>
 800361a:	1c43      	adds	r3, r0, #1
 800361c:	d102      	bne.n	8003624 <_kill_r+0x1c>
 800361e:	682b      	ldr	r3, [r5, #0]
 8003620:	b103      	cbz	r3, 8003624 <_kill_r+0x1c>
 8003622:	6023      	str	r3, [r4, #0]
 8003624:	bd38      	pop	{r3, r4, r5, pc}
 8003626:	bf00      	nop
 8003628:	20002168 	.word	0x20002168

0800362c <_getpid_r>:
 800362c:	f7fe bf50 	b.w	80024d0 <_getpid>

08003630 <memchr>:
 8003630:	4603      	mov	r3, r0
 8003632:	b510      	push	{r4, lr}
 8003634:	b2c9      	uxtb	r1, r1
 8003636:	4402      	add	r2, r0
 8003638:	4293      	cmp	r3, r2
 800363a:	4618      	mov	r0, r3
 800363c:	d101      	bne.n	8003642 <memchr+0x12>
 800363e:	2000      	movs	r0, #0
 8003640:	e003      	b.n	800364a <memchr+0x1a>
 8003642:	7804      	ldrb	r4, [r0, #0]
 8003644:	3301      	adds	r3, #1
 8003646:	428c      	cmp	r4, r1
 8003648:	d1f6      	bne.n	8003638 <memchr+0x8>
 800364a:	bd10      	pop	{r4, pc}

0800364c <__swhatbuf_r>:
 800364c:	b570      	push	{r4, r5, r6, lr}
 800364e:	460c      	mov	r4, r1
 8003650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003654:	4615      	mov	r5, r2
 8003656:	2900      	cmp	r1, #0
 8003658:	461e      	mov	r6, r3
 800365a:	b096      	sub	sp, #88	; 0x58
 800365c:	da0c      	bge.n	8003678 <__swhatbuf_r+0x2c>
 800365e:	89a3      	ldrh	r3, [r4, #12]
 8003660:	2100      	movs	r1, #0
 8003662:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003666:	bf0c      	ite	eq
 8003668:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800366c:	2340      	movne	r3, #64	; 0x40
 800366e:	2000      	movs	r0, #0
 8003670:	6031      	str	r1, [r6, #0]
 8003672:	602b      	str	r3, [r5, #0]
 8003674:	b016      	add	sp, #88	; 0x58
 8003676:	bd70      	pop	{r4, r5, r6, pc}
 8003678:	466a      	mov	r2, sp
 800367a:	f000 f849 	bl	8003710 <_fstat_r>
 800367e:	2800      	cmp	r0, #0
 8003680:	dbed      	blt.n	800365e <__swhatbuf_r+0x12>
 8003682:	9901      	ldr	r1, [sp, #4]
 8003684:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003688:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800368c:	4259      	negs	r1, r3
 800368e:	4159      	adcs	r1, r3
 8003690:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003694:	e7eb      	b.n	800366e <__swhatbuf_r+0x22>

08003696 <__smakebuf_r>:
 8003696:	898b      	ldrh	r3, [r1, #12]
 8003698:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800369a:	079d      	lsls	r5, r3, #30
 800369c:	4606      	mov	r6, r0
 800369e:	460c      	mov	r4, r1
 80036a0:	d507      	bpl.n	80036b2 <__smakebuf_r+0x1c>
 80036a2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80036a6:	6023      	str	r3, [r4, #0]
 80036a8:	6123      	str	r3, [r4, #16]
 80036aa:	2301      	movs	r3, #1
 80036ac:	6163      	str	r3, [r4, #20]
 80036ae:	b002      	add	sp, #8
 80036b0:	bd70      	pop	{r4, r5, r6, pc}
 80036b2:	466a      	mov	r2, sp
 80036b4:	ab01      	add	r3, sp, #4
 80036b6:	f7ff ffc9 	bl	800364c <__swhatbuf_r>
 80036ba:	9900      	ldr	r1, [sp, #0]
 80036bc:	4605      	mov	r5, r0
 80036be:	4630      	mov	r0, r6
 80036c0:	f7ff faa8 	bl	8002c14 <_malloc_r>
 80036c4:	b948      	cbnz	r0, 80036da <__smakebuf_r+0x44>
 80036c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036ca:	059a      	lsls	r2, r3, #22
 80036cc:	d4ef      	bmi.n	80036ae <__smakebuf_r+0x18>
 80036ce:	f023 0303 	bic.w	r3, r3, #3
 80036d2:	f043 0302 	orr.w	r3, r3, #2
 80036d6:	81a3      	strh	r3, [r4, #12]
 80036d8:	e7e3      	b.n	80036a2 <__smakebuf_r+0xc>
 80036da:	89a3      	ldrh	r3, [r4, #12]
 80036dc:	6020      	str	r0, [r4, #0]
 80036de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036e2:	81a3      	strh	r3, [r4, #12]
 80036e4:	9b00      	ldr	r3, [sp, #0]
 80036e6:	6120      	str	r0, [r4, #16]
 80036e8:	6163      	str	r3, [r4, #20]
 80036ea:	9b01      	ldr	r3, [sp, #4]
 80036ec:	b15b      	cbz	r3, 8003706 <__smakebuf_r+0x70>
 80036ee:	4630      	mov	r0, r6
 80036f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036f4:	f000 f81e 	bl	8003734 <_isatty_r>
 80036f8:	b128      	cbz	r0, 8003706 <__smakebuf_r+0x70>
 80036fa:	89a3      	ldrh	r3, [r4, #12]
 80036fc:	f023 0303 	bic.w	r3, r3, #3
 8003700:	f043 0301 	orr.w	r3, r3, #1
 8003704:	81a3      	strh	r3, [r4, #12]
 8003706:	89a3      	ldrh	r3, [r4, #12]
 8003708:	431d      	orrs	r5, r3
 800370a:	81a5      	strh	r5, [r4, #12]
 800370c:	e7cf      	b.n	80036ae <__smakebuf_r+0x18>
	...

08003710 <_fstat_r>:
 8003710:	b538      	push	{r3, r4, r5, lr}
 8003712:	2300      	movs	r3, #0
 8003714:	4d06      	ldr	r5, [pc, #24]	; (8003730 <_fstat_r+0x20>)
 8003716:	4604      	mov	r4, r0
 8003718:	4608      	mov	r0, r1
 800371a:	4611      	mov	r1, r2
 800371c:	602b      	str	r3, [r5, #0]
 800371e:	f7fe ff09 	bl	8002534 <_fstat>
 8003722:	1c43      	adds	r3, r0, #1
 8003724:	d102      	bne.n	800372c <_fstat_r+0x1c>
 8003726:	682b      	ldr	r3, [r5, #0]
 8003728:	b103      	cbz	r3, 800372c <_fstat_r+0x1c>
 800372a:	6023      	str	r3, [r4, #0]
 800372c:	bd38      	pop	{r3, r4, r5, pc}
 800372e:	bf00      	nop
 8003730:	20002168 	.word	0x20002168

08003734 <_isatty_r>:
 8003734:	b538      	push	{r3, r4, r5, lr}
 8003736:	2300      	movs	r3, #0
 8003738:	4d05      	ldr	r5, [pc, #20]	; (8003750 <_isatty_r+0x1c>)
 800373a:	4604      	mov	r4, r0
 800373c:	4608      	mov	r0, r1
 800373e:	602b      	str	r3, [r5, #0]
 8003740:	f7fe fefe 	bl	8002540 <_isatty>
 8003744:	1c43      	adds	r3, r0, #1
 8003746:	d102      	bne.n	800374e <_isatty_r+0x1a>
 8003748:	682b      	ldr	r3, [r5, #0]
 800374a:	b103      	cbz	r3, 800374e <_isatty_r+0x1a>
 800374c:	6023      	str	r3, [r4, #0]
 800374e:	bd38      	pop	{r3, r4, r5, pc}
 8003750:	20002168 	.word	0x20002168

08003754 <_init>:
 8003754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003756:	bf00      	nop
 8003758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800375a:	bc08      	pop	{r3}
 800375c:	469e      	mov	lr, r3
 800375e:	4770      	bx	lr

08003760 <_fini>:
 8003760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003762:	bf00      	nop
 8003764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003766:	bc08      	pop	{r3}
 8003768:	469e      	mov	lr, r3
 800376a:	4770      	bx	lr
